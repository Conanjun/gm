<?php

// +----------------------------------------------------------------------
// | OneThink [ WE CAN DO IT JUST THINK IT ]
// +----------------------------------------------------------------------
// | Copyright (c) 2013 http://www.onethink.cn All rights reserved.
// +----------------------------------------------------------------------
// | Author: 麦当苗儿 <zuojiazi@vip.qq.com> <http://www.zjzit.cn>
// +----------------------------------------------------------------------
namespace Dentist\Controller;
use User\Api\UserApi;
use Common\Common\Super\Order;
/**
 * 牙医 订单管理 : zl
 */
class OrderController extends AdminController
{
	private $model;
	
	//构造函数
	public function __construct()
	{
		parent::__construct();
		$this->model = D('Order');    // 牙医Model
	}
	
	//订单管理首页
	public function index()
	{
		$denid = $this->get_denid(UID);    // 牙医id
		$where = "1=1 and o.denid = {$denid}";
		
		$filter= '';

        $order_sn = empty($_GET['order_sn'])?'':trim($_GET['order_sn']);//订单编号
        if($order_sn){
            $filter .= " and o.order_sn like '%{$order_sn}%'";
        }

		$pname = empty($_GET['pname'])?'':trim($_GET['pname']);//患者姓名
		if($pname){
			$filter .= " and o.pname like '%{$pname}%'";
		}

        $stuname = empty($_GET['stuname'])?'':trim($_GET['stuname']);//工作室名称
        if($stuname){
            $filter .= " and o.stuname like '%{$stuname}%'";
        }

        $servicetype = empty($_GET['servicetype'])?'':trim($_GET['servicetype']);//服务方式
        if($servicetype){
            $filter .= " and o.servicetype like '%{$servicetype}%'";
        }

        $express = empty($_GET['express'])?'':trim($_GET['express']);//快递公司
        if($express){
            $filter .= " and o.express like '%{$express}%'";
        }

		$expresscode = empty($_GET['expresscode'])?'':trim($_GET['expresscode']);//快递单号
		if($expresscode){
			$filter .= " and o.expresscode like '%{$expresscode}%'";
		}

        $state = empty($_GET['state'])?'':trim($_GET['state']);//订单状态
        if($state){
            $filter .= " and o.state = '{$state}'";
        }

		$isurgent = empty($_GET['isurgent'])?'':trim($_GET['isurgent']);//是否加急
		$isurgent == 1 and  $filter .= " and o.isurgent = 1";
		$isurgent == 2 and  $filter .= " and o.isurgent = 0";

        $isclear = empty($_GET['isclear'])?'':trim($_GET['isclear']);//是否结算
        $isclear == 1 and  $filter .= " and o.isclear = 1";
        $isclear == 2 and  $filter .= " and o.isclear = 0";

		$where .= $filter;
		$count = $this->model->countNum($where);
		$page = new \Think\Page($count, 10);
		$lists = $this->model
			->alias('o')
			->where($where)
			->limit($page->firstRow . ',' . $page->listRows)
			->select();
		$page->setConfig('theme','%FIRST% %UP_PAGE% %LINK_PAGE% %DOWN_PAGE% %END% %HEADER%');
		$this->assign('lists', $lists);
		$this->assign('_page', $page->show());
		$this->assign('filtered', $filter ? 1 : 0); //是否有查询条件

		//订单状态
		$states = Order::$orderState;
		$this->assign('states',$states);
        $stuid = $this->get_stuid(UID);    // 工作室id
        //服务类型
        $types = M('StudioService')
            ->alias('ss')
            ->field('ss.sid,d.d_value')
            ->join("ot_dictionary d on d.d_value = ss.type and d.d_code='ser_type' and d.d_del = 0")
            ->where("ss.stuid = ".$stuid)
            ->select();
        $this->assign('types',$types);
		$this->display();
	}
	
	// 新增订单
	public function add()
	{
		$stuid = $this->get_stuid(UID);    // 工作室id
		$dentist = M('Dentist')->where(array('uid'=>UID))->find();
		$denid = $dentist['denid'];
		$time = time();
		if(IS_POST){
			$Model = M(); // 实例化一个空对象
			$Model->startTrans(); // 开启事务
			$servicetype = I('sid',0);
			if($servicetype==''){
				$this->error('请选择服务类型');
			}
			$processing_modem = I('processing_modem','');//加工方式
			if($processing_modem==''){
				$this->error('请选择加工方式');
			}
			$costplan = I('costplan',''); //普通服务内容
			if($costplan ==''){
				$this->error('请选择普通服务内容');
			}
			$costplan1 = I('costplan1',''); //其他服务
			$isurgents = I('isurgents',0);//是否加急
			$addr_id = I('addr_id',0);//邮寄地址
			if(empty($addr_id)){
				$this->error('请选择邮寄地址');
			}
			$addess = M('Addess')->where('addr_id = '.$addr_id)->find();
			
			$doctor = I('doctor',''); //主治医生
			if(empty($doctor)){
				$this->error('请填写主治医生');
			}
			$doctorass = I('doctorass',''); //主治医生助理
			if(empty($doctorass)){
				$this->error('请填写主治医生助理');
			}
			$doctor1 = I('doctor1',''); //转诊医生
			$doctorass1 = I('doctorass1',''); //转诊医生助理
			
			$doctor_tel = I('doctor_tel',0);
			$doctor1_tel =I('doctor1_tel',0);
			$doctorass_tel =I('doctorass_tel',0);
			$doctorass1_tel = I('doctorass1_tel',0);
			
			$pname = I('pname',''); //患者姓名
			if(empty($pname)){
				$this->error('请填写患者姓名');
			}
			$gender = I('gender',0); //性别
			$birthday = I('birthday',''); //出生日期
			if(empty($birthday)){
				$this->error('请选择出生日期');
			}
			$birthday = strtotime($birthday);
			//判断是否新患者
			$patient = M('Patient')->where(array('denid'=>$denid,'realname'=>$pname,'gender'=>$gender,'birthday'=>$birthday))->find();
			if(empty($patient)){
				$patient_data = array( 'realname'=>$pname,'gender'=>$gender,'birthday'=>$birthday,'denid'=>$denid,'addtime'=>time(),'adduid'=>UID );
				$paid = M('Patient')->add($patient_data);
			}else{
				$paid = $patient['paid'];
			}
			$age = I('age',0); //年龄
			$pedesc = I('pedesc',''); //患者主诉
			$pehistory = I('pehistory',''); //既往病史
			$isxft = I('isxft',0); //修复体
			$isyzy = I('isyzy',''); //牙周炎
			$issd = I('issd',''); //牙齿松动
			$repairtype = I('repairtype',''); //上部修复方式
			$surgerytime = I('surgerytime',0); //计划手术日期
			if(empty($surgerytime)){
				$this->error('请选择计划手术日期');
			}
			$toothposition= I('toothposition',''); //缺失牙位标记
			$toothposition1 = I('toothposition',''); //拟种植牙位
			$surgerysystem = I('surgerysystem',''); //种植体品牌及型号
			$surgerytool= I('surgerytool',''); //手术工具
			$mmodel = I('mmodel',''); //口内模型
			$cbct = I('cbct',''); //cbct
			if(empty($cbct) && $mmodel=='mouth_scan'){
				$this->error('请选择上传CBCT');
			}
			$pic1 = I('pic1',''); //患者口内照片
            /*if(empty($pic1)){
                $this->error('请选择上传患者口内照片');
            }*/
            $pic2 = I('pic2',''); //患者面部照片
            /*if(empty($pic2)){
                $this->error('请选择上传患者面部照片');
            }*/
			$print1 = I('print1',''); //颌骨打印
			$print2 = I('print2',''); //模型打印
			$stuname = M('Studio')->where('stuid='.$stuid)->getField('name');
			
			$order_data = array(
				'order_sn' => $order_sn,
				'denid' => $denid,
				'uid' => UID,
				'dename' => empty($dentist['name'])?'':$dentist['name'],
				'stuid' => $stuid,
				'stuname' => $stuname,
				'paid' => $paid,
				'pname' => $pname,
				'servicetype' => $servicetype,
				'state' => Order::SUBMITTED,
				'addtime'=>$time,
				'isurgent'=>$isurgents,
			);
			$order_id = $this->model->add($order_data);
			$order_ext = array(
				'oid' => $order_id,
				'decountry' => empty($dentist['country'])?0:$dentist['country'],
				'deprovince' => empty($dentist['province'])?0:$dentist['province'],
				'decity' => empty($dentist['city'])?0:$dentist['city'],
				'dername' => empty($dentist['name'])?'':$dentist['name'],
				'deaddr' => empty($dentist['addr'])?'':$dentist['addr'],
				'shipcountry' => empty($addess['country'])?0:$addess['country'],
				'shipprovince' => empty($addess['province'])?0:$addess['province'],
				'shipcity' => empty($addess['city'])?0:$addess['city'],
				'shiprname' => empty($addess['regionname'])?0:$addess['regionname'],
				'shipaddr' => empty($addess['addr'])?0:$addess['addr'],
				'doctor' => $doctor,
				'doctor1' => $doctor1,
				'doctorass' => $doctorass,
				'doctorass1' => $doctorass1,
				'doctor_tel' => $doctor_tel,
				'doctor1_tel' => $doctor1_tel,
				'doctorass_tel' => $doctorass_tel,
				'doctorass1_tel' => $doctorass1_tel,
				'peage' => $age,
				'pebirth' => $birthday,
			);
			$extid = M('OrderExt')->add($order_ext);
			$order_ext1 = array(
				'oid' => $order_id,
				'pedesc' => $pedesc,
				'pehistory' => $pehistory,
				'isxft' => $isxft,
				'isyzy' => $isyzy,
				'issd' => $issd,
				'repairtype' => $repairtype,
				'surgerytime' => strtotime($surgerytime),
				'toothposition' => $toothposition,
				'toothposition1' => $toothposition1,
				'surgerysystem' => $surgerysystem,
				'surgerytool' => $surgerytool,
				'mmodel' => $mmodel,
				'print1' => $print1,
				'print2' => $print2,
				'pic1' => $pic1,
				'pic2' => $pic2,
			);
			$ext1id = M('OrderExt1')->add($order_ext1);
			$order_pay_mod = M('OrderPay');
			//普通服务
			$costplan_mod = M('Costplan');
			$modem_count = count($processing_modem);
            foreach($processing_modem as $vo){
                $costplan_data = $costplan_mod->alias('c')->join('ot_costplan_sub cs on cs.planid = c.planid ')->where(array('c.planid'=>$costplan,'cs.feecode' => $vo))->find();
                if(empty($costplan_data)){
                    $this->error('普通服务内容不存在');
                }
                $yh = 1;
                if($costplan_data['discount'] && $modem_count>1){
                    $yh = $costplan_data['discount']/100;
                }
                $order_pay1 = array(
                    'oid'=>$order_id,
                    'feename' => $costplan_data['feename'],
                    'money' => $costplan_data['price'] * $yh,
                    'money1' => $costplan_data['price1'] * $yh,
                    'addtime' =>$time,
                    'adduid' =>UID,
                    'paytype' =>$dentist['paytype'],
                );
                $opid = $order_pay_mod->add($order_pay1);
                if(empty($opid)){
                    $this->error('订单支付明细添加失败');
                }
            }
            //特殊服务
            $costplan1 = array_filter($costplan1);
			if($costplan1){
				foreach($processing_modem as $vo){
					foreach($costplan1 as $v){
						$costplan_data = $costplan_mod->alias('c')->join('ot_costplan_sub cs on cs.planid = c.planid ')->where(array('c.planid'=>$v,'cs.feecode '=>$vo))->find();
						if(empty($costplan_data)){
							$this->error('服务内容不存在');
						}
						$yh = 1;
						/*if($costplan_data['discount']){
							$yh = $costplan_data['discount']/100;
						}*/
						$order_pay1 = array(
						    'oid'=>$order_id,
							'feename' => $costplan_data['feename'],
							'money' => $costplan_data['price'] * $yh,
							'money1' => $costplan_data['price1'] * $yh,
							'addtime' =>$time,
							'adduid' =>UID,
							'paytype' =>$dentist['paytype'],
						);
						$opid1 = $order_pay_mod->add($order_pay1);
						if(empty($opid1)){
							$this->error('订单支付明细添加失败');
						}
					}
				}
			}
			//特殊因素
            if($mmodel!='mouth_scan'){
                $cost_data = M('Costele')->where(array('stuid'=>$stuid,'code'=>$mmodel))->find();
                if(!empty($cost_data) && ($cost_data['price']>0 || $cost_data['price1']>0)){
                    $order_pay1 = array(
                        'oid'=>$order_id,
                        'feename' => $cost_data['ename'],
                        'money' => $cost_data['price'],
                        'money1' => $cost_data['price1'],
                        'addtime' =>$time,
                        'adduid' =>UID,
                        'paytype' =>$dentist['paytype'],
                    );
                    $opid1 = $order_pay_mod->add($order_pay1);
                    if(empty($opid1)){
                        $this->error('订单支付明细添加失败');
                    }
                }
            }
			//订单文件
		/*	$cbct = explode(',',$cbct);
            if(!empty(array_filter($cbct))){
                foreach($cbct as $vo){
                    $file = M('File')->where(array('fileid'=>$vo))->find();
                    if(empty($file)){
                        $this->error('请选择上传CBCT');
                    }
                    $order_file = array(
                        'oid' => $order_id,
                        'file_id' => $cbct,
                        'ftype' => $file['ext'],
                        'uid' => $file['uid'],
                        'addtime' => $file['addtime'],
                    );
                    $order_file_id = M('OrderFile')->add($order_file);
                    if(empty($order_file_id)){
                        $this->error('CBCT上传失败');
                    }
                }
            }

            if($mmodel=='silica_gel'){//生成实物接受任务
                $tname = '订单'.$order_sn.'口内硅胶模型待接收';
                $tid = Order::add_task(array('oid' => $order_id, 'tname' =>$tname, 'tasktype' => 'STUDIO_TASK_SW', 'uid' => '' ,'note'=>$tname));
            }elseif($mmodel=='plaster_scan'){
                $tname = '订单'.$order_sn.'口内石膏模型待接收';
                $tid = Order::add_task(array('oid' => $order_id, 'tname' =>$tname, 'tasktype' => 'STUDIO_TASK_SW', 'uid' => '' ,'note'=>$tname));
            }else{//生成设计师任务
                $tname = '订单'.$order_sn.'资料以完善待分派设计师';
                $tid = Order::add_task(array('oid' => $order_id, 'tname' =>$tname, 'tasktype' => 'STUDIO_TASK_SJS', 'uid' => '' ,'note'=>$tname));
            }
            $m = M("OrderPay")->where("oid=".$order_id)->sum('money');
            $m1 = M("OrderPay")->where("oid=".$order_id)->sum('money1');
            M("Order")->where("order_id=".$order_id)->save(array('amount'=>$m,'amount1'=>$m1));
            echo $order_id;echo "<br/>";
            echo $extid;echo "<br/>";
            echo $ext1id;echo "<br/>";
            echo $tid;echo "<br/>";
			if (!empty($order_id) && !empty($extid) && !empty($ext1id)&&!empty($tid)) {
				action_log_new(array('outtype' => 'ot_order', 'outkey' => $order_id, 'action' => 'add', 'comment' => ''));
				$Model->commit(); // 成功则提交事务
				$this->redirect('Order/index');
			} else {
				$Model->rollback(); // 否则将事务回滚
				$this->error(L('ADD_ERROR'));
			}*/
		}else{
			//服务类型
			$types = M('StudioService')
				->alias('ss')
				->field('ss.sid,d.d_value')
				->join("ot_dictionary d on d.d_value = ss.type and d.d_code='ser_type' and d_del = 0")
				->where("ss.stuid = ".$stuid)
				->select();
			$this->assign('types',$types);
			//加工方式
			$processing_modem = M('Dictionary')->where("d_code = 'feeitem' and d_del = 0")->order('d_order asc')->select();
			$this->assign('processing_modem',$processing_modem);
			//服务方案-普通
			if(getlange()){
				$field = "en_pname as pname";
			}else{
				$field = "zh_pname as pname";
			}
			$costplan = M('Costplan')->field('*,'.$field)->where('type=0')->select();
			$this->assign('costplan',json_encode($costplan));
			//服务方案-其他
			$costplan1 = M('Costplan')->field('*,'.$field)->where('type=1')->select();
			$this->assign('costplan1',json_encode($costplan1));
			//牙医信息
			$dentist = M('Dentist')->where('uid='.UID)->find();
			$this->assign('dentist', json_encode($dentist));
			//邮寄地址
			$addr = M('Addess')->where('isdefault = 1 and uid = '.UID)->find();
			$this->assign('addr', json_encode($addr));
			//修复体
			$isxft = M('Dictionary')->where("d_code = 'isxft' and d_del = 0")->order('d_order asc')->select();
			$this->assign('isxft', $isxft);
			//牙周炎
			$isyzy = M('Dictionary')->where("d_code = 'isyzy' and d_del = 0")->order('d_order asc')->select();
			$this->assign('isyzy', $isyzy);
			//牙齿松动
			$issd = M('Dictionary')->where("d_code = 'issd' and d_del = 0")->order('d_order asc')->select();
			$this->assign('issd', $issd);
			//上部修复方式
			$repairtype = M('Dictionary')->where("d_code = 'repairtype' and d_del = 0")->order('d_order asc')->select();
			foreach($repairtype as $key=>$vo){
				$repairtype[$key]['d_value']= L($vo['d_value']);
			}
			$this->assign('repairtype', json_encode($repairtype));
			//口内模型
			$mmodel = M('Dictionary')->where("d_code = 'mmodel' and d_del = 0")->order('d_order asc')->select();
			foreach($mmodel as $key=>$vo){
				$mmodel[$key]['d_value']= L($vo['d_value']);
			}
			$this->assign('mmodel', json_encode($mmodel));
			//种植体
            $plants = M('PlantingSys')->select();
            $this->assign('plants', json_encode($plants));
            //工具
            $tools = M('tool')->select();
            $this->assign('tools', json_encode($tools));
			$this->display();
		}
	}
	
	//异步上传图片
	public function uploadPic($files = "")
	{
		$c = C('PICTURE_UPLOAD');
		$uploader = new \Think\Upload($c);// 实例化上传类
		$method = $_SERVER["REQUEST_METHOD"];
		if ($method == "POST") {
			header("Content-Type: text/plain");
			if($files===''){
				$files  =   $_FILES;
			}
			$info = $uploader->upload($files);
			$result['success'] = true;
			$result['uploadName'] = $c['rootPath'].$info['qqfile']['savepath'].$info['qqfile']['savename'];
			echo json_encode($result);
		} else {
			header("HTTP/1.0 405 Method Not Allowed");
		}
		
	}
	
	//异步上传文件
	public function uploadFile($files = "")
	{
		$c = C('DOWNLOAD_UPLOAD');
		
		$uploader = new \Think\Upload($c);// 实例化上传类
		$method = $_SERVER["REQUEST_METHOD"];
		if ($method == "POST") {
			header("Content-Type: text/plain");
			if($files===''){
				$files  =   $_FILES;
			}
			$info = $uploader->upload($files);
			$res = array();
			if($info){
				$res['size'] = format_bytes($info['mypic']['size']);
					$res['addtime'] = date('Y-m-d H:i:s');
			}else{
				$res = false;
			}
			echo json_encode($res);
		} else {
			header("HTTP/1.0 405 Method Not Allowed");
		}
		
	}

	//工作室ID
	public function get_stuid($uid){
		$user = M('Member')->where("uid=".$uid)->find();
		return $user['stuid'];
	}

	//诊所id
	public function get_denid($uid){
        $Dentist = M('Dentist')->where("uid=".$uid)->find();
        return $Dentist['denid'];
    }
	
	//获取订单sn
	public function getCode($str){
		$code = '';
		if(preg_match('/[a-zA-Z\d ]/', $str)){
			$arr = explode(' ',$str);
			foreach($arr as $vo){
				$code .= $vo{0};
			}
		}else{
			$code =pinyin($str, $ret_format = 'first', $placeholder = '');
		}
		$code = strtoupper($code).rand(100000,999999);
		$temp = M('OrderCode')->where('code='.$code)->count();
		if($temp){
			$this->getCode($str);
		}
		$res = M('OrderCode')->add(array('code'=>$code,'addtime'=>time));
		if($res){
			return $code;
		}else{
			$this->getCode($str);
		}
		return $code;
	}

	//订单详情
    public function view(){
        $id = empty($_GET['id'])?0:$_GET['id'];//订单id
        $info = $this->model
            ->alias('o')
            ->join("ot_order_ext ext on ext.oid = o.order_id")
            ->where("order_id=".$id)->find();
        if($info['sevicetype']=='PLANT'){
            $info_item = M('order_ext1')->where("oid=".$id)->find();
        }else{
            $info_item = M('order_ext2')->where("oid=".$id)->find();
        }
        //文件详情
        $files = M('order_file')->where("oid=".$id)->select();
        //支付详情
        $fees = M('order_pay')->alias('p')
            ->join("ot_pay_log log on log.subid = p.opid")->where("p.oid=".$id)->select();
        $this->assign('info',$info);
        $this->assign('info_item',$info_item);
        $this->assign('files',$files);
        $this->assign('fees',$fees);
        $this->display();
    }

    //确认方案
    public function confirm(){
        $id = empty($_GET['id'])?0:$_GET['id'];//订单id
        if(empty($id)){
            $this->error(L('ORDER_EMPTY'));
        }
        $order = M("Order")->where("order_id = ".$id)->find();
        if(empty($order)){
            $this->error(L('ORDER_EMPTY'));
        }
        if($order['state']!=50){
            $this->error(L('ORDER_CONFIRM_ERROR'));
        }
        $Model = M(); // 实例化一个空对象
        $Model->startTrans(); // 开启事务
        //写入订单操作记录
        $content = "客户".$order['dename']."已确认订单为".$order['order_sn'].'的方案';
        $log_id = Order::action_order_log(array('oid' => $id, 'uid' =>'', 'addtime' => '', 'state' => Order::CONFIRMED ,'note'=>$content));
        //更改订单状态
        $result = M('Order')->where("order_id=".$id)->save(array('state'=>Order::CONFIRMED));
        if($log_id&&$result){
            $Model->commit(); // 成功则提交事务
            $this->success(L('TASK_CONFIRM_SUC'), U('index'));
        }else{
            $Model->rollback(); // 否则将事务回滚
            $this->error(L('TASK_CONFIRM_ERROR'));
        }
    }

    //方案变更
    public function change(){
        $id = empty($_GET['id'])?0:$_GET['id'];//订单id
        if(empty($id)){
            $this->error(L('ORDER_EMPTY'));
        }
        $order = M("Order")->where("order_id = ".$id)->find();
        if(empty($order)){
            $this->error(L('ORDER_EMPTY'));
        }
        if($order['state']!=50){
            $this->error(L('ORDER_CHANGE_ERROR'));
        }
        $Model = M(); // 实例化一个空对象
        $Model->startTrans(); // 开启事务
        $cost = M('Costele')->where('code=change_cost')->find();
        if(!empty($cost)){
            if($cost['type']==0){
                $money = $cost['price'];
                $money1 = $cost['price1'];
            }elseif($cost['type']==1){
                $money = $order['amount']*$cost['percent']/100;
                $money1 = $order['amount1']*$cost['percent']/100;
            }
        }
        $pay_type = Order::get_dent_paytype($id);
        $order_pay = array(
            'oid'=>$id,
            'feename' => $cost['ename'],
            'money' => $money,
            'money1' => $money1,
            'addtime' =>NOW_TIME,
            'adduid' =>UID,
            'paytype' =>$pay_type,
            'note'=>L('TASK_CHANGE_ADD_FEE'),
            'eleid'=>$cost['eleid']
        );
        $opid = M('OrderPay')->add($order_pay);
        if(empty($opid)){
            $this->error(L('TASK_CHANGE_ADD_FEE_ERROR'));
        }
        $m = M("order_pay")->where("oid=".$id)->sum('money');
        $m1 = M("order_pay")->where("oid=".$id)->sum('money1');
        $data = array();
        $data['amount'] = $m;
        $data['amount1'] = $m1;
        $result = M("Order")->where("order_id=".$id)->save($data);
        //写入订单操作记录
        $content = "客户".$order['dename']."变更订单为".$order['order_sn'].'的方案';
        $log_id = Order::action_order_log(array('oid' => $id, 'uid' =>'', 'addtime' => '', 'state' => $order['state'] ,'note'=>$content));
        if($log_id&&$result){
            $Model->commit(); // 成功则提交事务
            $this->success(L('TASK_CONFIRM_SUC'), U('index'));
        }else{
            $Model->rollback(); // 否则将事务回滚
            $this->error(L('TASK_CONFIRM_ERROR'));
        }
    }

}


