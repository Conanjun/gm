<?php

namespace Admin\Controller;

/*
 * 任务控制器
 * */
use Admin\Common\Super\Task;

class TaskAllController extends AdminController
{
    //定义数据表
    private $db;

    //构造函数 实例化ModuleModel 并获得整张表的数据
    public function __construct()
    {
        parent::__construct();
        //初始化时实例化category model
        $this->db = D('Group');
        $this->assign('nowDate', date('Ymd'));
    }

// 任务的搜索 : LGW
    public function taskSearch()
    {
        // 任务状态
        $state = M("Dictionary")->where("d_code='taskstatus' and d_del=1")->field(array('d_key', 'd_value'))->order('d_order asc,d_tid asc')->select();
        // 优先级
        $unit = M("Dictionary")->where("d_code='task_level' and d_del=1")->field(array('d_key', 'd_value'))->order('d_order asc,d_tid asc')->select();
        // 任务类型
        $taskType = M('dictionary')->where("d_code = 'task_type'")->field(true)->select(array('order' => 'd_order asc'));
        $this->assign('taskType', $taskType);
        // 服务角色
        $Group = M('Group')->field('groupid,name')->order('sort_order desc')->select();
        $this->assign('states', $state);
        $this->assign('units', $unit);
        $this->assign('taskType', $taskType);
        $this->assign('groups', $Group);
        $c1 = " 1=1 ";
        $c2 = "";
        $c3 = "";
        $c4 = "";
        $c5 = "";
        $c6 = "";
        $c7 = "";
        $c8 = "";
        $c9 = " 1=1 ";
        $c10 = "";
        $c11 = "";
        $c12 = "";
        $c13 = "";
        $c14 = "";
        $c15 = "";


        $field1 = 'p.name';
        $field2 = 't.title';
        $field3 = 't.manageruname';
        $field4 = 't.assignedname';
        $field5 = 't.state';
        $field6 = 't.level';
        $field7 = 't.tasktype';
        $field8 = 't.groupid';
        $field9 = 't.pstime';
        $field10 = 't.petime';
        $field11 = 't.etime';
        $value1 = I('get.pname', '');  // 项目名称
        $value2 = I('get.title', '');     // 任务名称
        $value3 = I('get.manageruname', '');      // 分派人
        $value4 = I('get.assignedname', '');    // 执行人
        $value5 = I('get.state'); // 任务状态
        $value6 = I('get.level'); // 优先级
        $value7 = I('get.tasktype', ''); // 任务类型
        $value8 = I('get.groupid', ''); // 服务角色

        $pstimeStart = I('get.pstime_start', ''); // 计划开始时间从
        $pstimeEnd = I('get.pstime_end', ''); // 计划开始时间至
        $petimeStart = I('get.petime_start', ''); // 计划结束时间至
        $petimeEnd = I('get.petime_end', ''); // 计划结束时间至
        $etimeStart = I('get.etime_start', ''); // 实际结束时间至
        $etimeEnd = I('get.etime_end', ''); // 实际结束时间至

        $exists = "EXISTS(SELECT 1 FROM ot_project p WHERE p.pid=t.pid and";

        $value1 and $c1 = " $exists $field1 like '%{$value1}%')";
        $value2 and $c2 = " and $field2 like '%{$value2}%' ";
        $value3 and $c3 = " and $field3 like '%{$value3}%' ";
        $value4 and $c4 = " and $field4 like '%{$value4}%' ";
        if (is_numeric($value5)) $c5 = " and $field5=$value5";
        if (is_numeric($value6)) $c6 = " and $field6=$value6";
        if (is_numeric($value7)) $c7 = " and $field7=$value7";
        $value8 and $c8 = " and $field8=$value8";
        if ($pstimeStart) {
            $start = strtotime($pstimeStart);
            $c9 .= " and $field9 >= '{$start}'";
        }
        if ($pstimeEnd) {
            $end = strtotime($pstimeEnd);
            $c9 .= " and $field9 <= '{$end}'";
        }
        if ($petimeStart) {
            $start = strtotime($petimeStart);
            $c10 .= " and $field10 >= '{$start}'";
        }
        if ($petimeEnd) {
            $end = strtotime($petimeEnd);
            $c10 .= " and $field10 <= '{$end}'";
        }

        if ($etimeStart) {
            $start = strtotime($etimeStart);
            $c11 .= " and $field11 >= '{$start}'";
        }
        if ($etimeEnd) {
            $end = strtotime($etimeEnd);
            $c11 .= "and $field11 <= '{$end}'";
        }
        $this->assign('calculate', calculateDate()); // 本周 本月 等
        $actionURL = strstr(__ACTION__, '/Admin');
        $this->assign('actionURL', $actionURL);

        $reset = I('get.reset');
        if ($reset == 1) {
            $c1 = " 1=1 ";
            $condition ['_string'] = "(( $c1))";
            return $condition;
        }
        $condition ['_string'] = "(($c1 $c2 $c3 $c4 $c5 $c6 $c7 $c8) and ($c9 $c10 $c11 $c12 $c13 $c14 $c15 ) )";

        $this->assign('value1', $value1);
        $this->assign('value2', $value2);
        $this->assign('value3', $value3);
        $this->assign('value4', $value4);
        $this->assign('value5', $value5);
        $this->assign('value5', $value5);
        $this->assign('value6', $value6);
        $this->assign('value7', $value7);
        $this->assign('value8', $value8);

        $this->assign('pstimeStart', $pstimeStart);
        $this->assign('pstimeEnd', $pstimeEnd);
        $this->assign('petimeStart', $petimeStart);
        $this->assign('petimeEnd', $petimeEnd);

        $this->assign('etimeStart', $etimeStart);
        $this->assign('etimeEnd', $etimeEnd);
        $pstime = I('get.pstime');
        $petime = I('get.petime');
        $etime = I('get.etime');
        $this->assign('pstime', $pstime);
        $this->assign('petime', $petime);
        $this->assign('etime', $etime);
        $show = 0;
        $second = 0;
        if ($value1 || $value2 || $value3 || $value4 || is_numeric($value5) || is_numeric($value6) || $value7 || $value8 || $pstimeStart || $pstimeEnd || $petimeStart || $petimeEnd || $etimeStart || $etimeEnd) $show = 1;
        if ($pstimeStart || $pstimeEnd || $petimeStart || $petimeEnd || $etimeStart || $etimeEnd) $second = 1;
        $this->assign('show', $show);
        $this->assign('second', $second);

        return $condition;

    }

    public function index()
    {
        $this->assign('actname', ACTION_NAME);

        $where = $this->taskSearch();
        $where["t.deleted"] = 0;
        $pid = I('pid');
        if ($pid) {
            $this->assign('pid', $pid);
            $where['_string'] .= " and p.pid=" . $pid;
        }
        C('LIST_ROWS', 20);

        $where['_string'] .= " and (t.state=2 or t.state=6 or t.state=1 or t.state=4)";


        $res = M('member')->alias('m')->field('g.*')
            ->join('ot_auth_group_access a on m.uid=a.uid')
            ->join('ot_auth_group g on g.id=a.group_id')
            ->where("m.uid=" . UID)->find();
        $group = 0;
        $grade = 10;
        if ($res) {
            $group = $res['id'];
            $grade = $res['grade'];
        }
        $where['_string'] .= " and (t.assigneduid='" . UID . "' or t.manageruid='" . UID . "'
or EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=t.assigneduid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . ")
or EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=t.manageruid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . "))";


        if (I('sort', '') && I('order', '')) {
            $order = I("sort") . " " . I("order");
        } else {
            $order = "t.petime";
        }
        $module = M('Task')->alias('t')
            ->join("ot_dictionary d on d.d_value = t.level and d.d_code='task_level'", 'left')
            ->join("ot_dictionary d1 on d1.d_value = t.state and d1.d_code='taskstatus'", 'left')
            ->join('ot_module m on m.mid = t.mid', 'left')
            ->join('ot_project p on p.pid = t.pid', 'left')
            ->join('ot_group g ON m.role = g.groupid', 'LEFT');
        $list = $this->lists($module, $where, $order, null, 't.*,d.d_key level_name,m.name mname,p.name pname,d1.d_key as statestr,(select count(1) from ot_module_help mh where mh.mid = t.mid) as sdc');
	    // 大于要求时间为红色，等于要求时间为黄色  :LGW
	    $today = strtotime(date('Y-m-d'));
	    foreach ($list as $k => $v) {
		    $petime = strtotime(date('Y-m-d',$v['petime']));
		    $num = (int)$petime-(int)$today;
		    if($num>0){
			    $num = round($num/86400);
			    if($num>5){
				    $list[$k]['color'] = 'green';
				    $list[$k]['num'] = '···';
				    $list[$k]['num1'] = $num;
			    }else{
				    $list[$k]['color'] = 'green';
				    $list[$k]['num'] = $num;
				    $list[$k]['num1'] = $num;
			    }
		    }elseif($num<0){
			    $num = abs($num);
			    $num = round($num/86400);
			    if($num>5){
				    $list[$k]['color'] = 'red';
				    $list[$k]['num'] = '···';
				    $list[$k]['num1'] = $num;
			    }else{
				    $list[$k]['color'] = 'red';
				    $list[$k]['num'] = $num;
				    $list[$k]['num1'] = $num;
			    }
		    }else{
			    $list[$k]['color'] = 'yellow';
		    }
	    }
        $this->assign('_list', $list);
        /*$task=$taskmod->alias('t')->field("t.*,d2.d_key,m.name as o_name,g.name as gname,s.name as ssname,pc.name as pcname,d1.d_key as statestr")->
         join('ot_dictionary d2 on t.level = d2.d_value and d2.d_code=\'task_level\'','LEFT')
         ->join("ot_dictionary d1 on d1.d_value = t.state and d1.d_code='taskstatus'",'left')
         ->join("ot_project_config pc on pc.pid=t.pcid", 'LEFT')
         ->join("ot_service s on s.sid=t.psid", 'LEFT')
         ->join ( 'ot_module m ON m.mid = s.mid', 'LEFT' )
         ->join ( 'ot_group g ON m.role = g.groupid', 'LEFT' )
         ->where("t.tid='{$id}' and t.deleted=0")->find();*/
        //项目
        $pro = M('Project')->alias("p")->join("left join ot_customer c on c.cid=p.cid")->field('p.pid,p.name,c.shortsign')
            ->where("(EXISTS(select 1 from ot_takepart tp where tp.pid = p.pid and (tp.uid=" . UID . " or
 EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=tp.uid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . ")) )
or EXISTS(select 1 from ot_task t where t.pid = p.pid and (t.assigneduid=" . UID . " or
 EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=t.assigneduid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . ")))) and p.del = 0
  and p.state !=-1")->order("p.addtime desc")->select();
        $this->assign('pro', $pro);

        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => '所有任务-未完成', 'url' => '');
        $this->assign('root_mbx', $root_mbx);

        Cookie('__from_route_t__', '所有任务');
        Cookie('__from_url_t__', U('TaskAll/index'));

        $this->display();
    }

    public function out()
    {
        $this->assign('actname', ACTION_NAME);

        $where = $this->taskSearch();
        $where["t.deleted"] = 0;
        C('LIST_ROWS', 20);
        $pid = I('pid');
        if ($pid) {
            $this->assign('pid', $pid);
            $where['_string'] .= "  and p.pid=" . $pid;
        }

        $time = strtotime(date('Ymd', time() + 84600));

        $where['_string'] .= " and t.petime<" . $time . " and t.state!=3 and t.state!=-1";

        $res = M('member')->alias('m')->field('g.*')
            ->join('ot_auth_group_access a on m.uid=a.uid')
            ->join('ot_auth_group g on g.id=a.group_id')
            ->where("m.uid=" . UID)->find();
        $group = 0;
        $grade = 10;
        if ($res) {
            $group = $res['id'];
            $grade = $res['grade'];
        }
        $where['_string'] .= " and (t.assigneduid='" . UID . "' or t.manageruid='" . UID . "'
or EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=t.assigneduid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . ")
or EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=t.manageruid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . "))";

        if (I('sort', '') && I('order', '')) {
            $order = I("sort") . " " . I("order");
        } else {
            $order = "t.petime";
        }
        $module = M('Task')->alias('t')
            ->join("ot_dictionary d on d.d_value = t.level and d.d_code='task_level'", 'left')
            ->join("ot_dictionary d1 on d1.d_value = t.state and d1.d_code='taskstatus'", 'left')
            ->join('ot_module m on m.mid = t.mid', 'left')
            ->join('ot_project p on p.pid = t.pid', 'left');
        $list = $this->lists($module, $where, $order, null, 't.*,d.d_key level_name,m.name mname,p.name pname,d1.d_key as statestr');
        $this->assign('_list', $list);
        //项目
        $pro = M('Project')->alias("p")->join("left join ot_customer c on c.cid=p.cid")->field('p.pid,p.name,c.shortsign')
            ->where("(EXISTS(select 1 from ot_takepart tp where tp.pid = p.pid and (tp.uid=" . UID . " or
 EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=tp.uid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . ")) )
or EXISTS(select 1 from ot_task t where t.pid = p.pid and (t.assigneduid=" . UID . " or
 EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=t.assigneduid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . ")))) and p.del = 0
  and p.state !=-1")->order("p.addtime desc")->select();
        $this->assign('pro', $pro);

        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => '所有任务-已延期', 'url' => '');
        $this->assign('root_mbx', $root_mbx);

        Cookie('__from_route_t__', '所有任务');
        Cookie('__from_url_t__', U('TaskAll/index'));

        $this->display("index");
    }

    public function nots()
    {
        $this->assign('actname', ACTION_NAME);

        $where = $this->taskSearch();
        $where["t.deleted"] = 0;
        C('LIST_ROWS', 20);
        $pid = I('pid');
        if ($pid) {
            $this->assign('pid', $pid);
            $where['_string'] .= " and p.pid=" . $pid;
        }

        $where['_string'] .= " and (t.state=1)";

        $res = M('member')->alias('m')->field('g.*')
            ->join('ot_auth_group_access a on m.uid=a.uid')
            ->join('ot_auth_group g on g.id=a.group_id')
            ->where("m.uid=" . UID)->find();
        $group = 0;
        $grade = 10;
        if ($res) {
            $group = $res['id'];
            $grade = $res['grade'];
        }
        $where['_string'] .= " and (t.assigneduid='" . UID . "' or t.manageruid='" . UID . "'
or EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=t.assigneduid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . ")
or EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=t.manageruid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . "))";

        if (I('sort', '') && I('order', '')) {
            $order = I("sort") . " " . I("order");
        } else {
            $order = "t.petime";
        }
        $module = M('Task')->alias('t')
            ->join("ot_dictionary d on d.d_value = t.level and d.d_code='task_level'", 'left')
            ->join("ot_dictionary d1 on d1.d_value = t.state and d1.d_code='taskstatus'", 'left')
            ->join('ot_module m on m.mid = t.mid', 'left')
            ->join('ot_project p on p.pid = t.pid', 'left');
        $list = $this->lists($module, $where, $order, null, 't.*,d.d_key level_name,m.name mname,p.name pname,d1.d_key as statestr');
        $this->assign('_list', $list);
        //项目
        $pro = M('Project')->alias("p")->join("left join ot_customer c on c.cid=p.cid")->field('p.pid,p.name,c.shortsign')
            ->where("(EXISTS(select 1 from ot_takepart tp where tp.pid = p.pid and (tp.uid=" . UID . " or
 EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=tp.uid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . ")) )
or EXISTS(select 1 from ot_task t where t.pid = p.pid and (t.assigneduid=" . UID . " or
 EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=t.assigneduid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . ")))) and p.del = 0
  and p.state !=-1")->order("p.addtime desc")->select();
        $this->assign('pro', $pro);

        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => '所有任务-未开始', 'url' => '');
        $this->assign('root_mbx', $root_mbx);

        Cookie('__from_route_t__', '所有任务');
        Cookie('__from_url_t__', U('TaskAll/index'));

        $this->display("index");
    }

    public function allindex()
    {
        $where = $this->taskSearch();
        $where["t.deleted"] = 0;
        C('LIST_ROWS', 20);
        $pid = I('pid');
        if ($pid) {
            $this->assign('pid', $pid);
            $where['_string'] .= " and p.pid=" . $pid;
        }

        //$where['_string'] .= " and t.assigneduid=".UID;

        $res = M('member')->alias('m')->field('g.*')
            ->join('ot_auth_group_access a on m.uid=a.uid')
            ->join('ot_auth_group g on g.id=a.group_id')
            ->where("m.uid=" . UID)->find();
        $group = 0;
        $grade = 10;
        if ($res) {
            $group = $res['id'];
            $grade = $res['grade'];
        }
        $where['_string'] .= " and (t.assigneduid='" . UID . "' or t.manageruid='" . UID . "'
or EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=t.assigneduid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . ")
or EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=t.manageruid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . "))";

        if (I('sort', '') && I('order', '')) {
            $order = I("sort") . " " . I("order");
        } else {
            $order = "t.petime";
        }
        $module = M('Task')->alias('t')
            ->join("ot_dictionary d on d.d_value = t.level and d.d_code='task_level'", 'left')
            ->join("ot_dictionary d1 on d1.d_value = t.state and d1.d_code='taskstatus'", 'left')
            ->join('ot_module m on m.mid = t.mid', 'left')
            ->join('ot_project p on p.pid = t.pid', 'left');
        $list = $this->lists($module, $where, $order, null, 't.*,d.d_key level_name,m.name mname,p.name pname,d1.d_key as statestr');
	    // 大于要求时间为红色，等于要求时间为黄色  :LGW
	    $today = strtotime(date('Y-m-d'));
	    foreach ($list as $k => $v) {
		    $petime = strtotime(date('Y-m-d',$v['petime']));
		    $num = (int)$petime-(int)$today;
		    if($num>0){
			    $num = round($num/86400);
			    if($num>5){
				    $list[$k]['color'] = 'green';
				    $list[$k]['num'] = '···';
				    $list[$k]['num1'] = $num;
			    }else{
				    $list[$k]['color'] = 'green';
				    $list[$k]['num'] = $num;
				    $list[$k]['num1'] = $num;
			    }
		    }elseif($num<0){
			    $num = abs($num);
			    $num = round($num/86400);
			    if($num>5){
				    $list[$k]['color'] = 'red';
				    $list[$k]['num'] = '···';
				    $list[$k]['num1'] = $num;
			    }else{
				    $list[$k]['color'] = 'red';
				    $list[$k]['num'] = $num;
				    $list[$k]['num1'] = $num;
			    }
		    }else{
			    $list[$k]['color'] = 'yellow';
		    }
	    }
        $this->assign('_list', $list);
        //项目
        $pro = M('Project')->alias("p")->join("left join ot_customer c on c.cid=p.cid")->field('p.pid,p.name,c.shortsign')
            ->where("(EXISTS(select 1 from ot_takepart tp where tp.pid = p.pid and (tp.uid=" . UID . " or
 EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=tp.uid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . ")) )
or EXISTS(select 1 from ot_task t where t.pid = p.pid and (t.assigneduid=" . UID . " or
 EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=t.assigneduid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . ")))) and p.del = 0
  and p.state !=-1")->order("p.addtime desc")->select();
        $this->assign('pro', $pro);

        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => '所有任务', 'url' => '');
        $this->assign('root_mbx', $root_mbx);

        Cookie('__from_route_t__', '所有任务');
        Cookie('__from_url_t__', U('TaskAll/index'));
        $this->assign('actname', ACTION_NAME);
        $this->display("index");
    }

    public function pause()
    {
        $where = $this->taskSearch();
        $where["t.deleted"] = 0;
        C('LIST_ROWS', 20);
        $pid = I('pid');
        if ($pid) {
            $this->assign('pid', $pid);
            $where['_string'] .= " and p.pid=" . $pid;
        }

        $where['_string'] .= " and (t.state=5)";


        $res = M('member')->alias('m')->field('g.*')
            ->join('ot_auth_group_access a on m.uid=a.uid')
            ->join('ot_auth_group g on g.id=a.group_id')
            ->where("m.uid=" . UID)->find();
        $group = 0;
        $grade = 10;
        if ($res) {
            $group = $res['id'];
            $grade = $res['grade'];
        }
        $where['_string'] .= " and (t.assigneduid='" . UID . "' or t.manageruid='" . UID . "'
or EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=t.assigneduid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . ")
or EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=t.manageruid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . "))";

        if (I('sort', '') && I('order', '')) {
            $order = I("sort") . " " . I("order");
        } else {
            $order = "t.petime";
        }
        $module = M('Task')->alias('t')
            ->join("ot_dictionary d on d.d_value = t.level and d.d_code='task_level'", 'left')
            ->join("ot_dictionary d1 on d1.d_value = t.state and d1.d_code='taskstatus'", 'left')
            ->join('ot_module m on m.mid = t.mid', 'left')
            ->join('ot_project p on p.pid = t.pid', 'left');
        $list = $this->lists($module, $where, $order, null, 't.*,d.d_key level_name,m.name mname,p.name pname,d1.d_key as statestr');
        $this->assign('_list', $list);
        //项目
        $pro = M('Project')->alias("p")->join("left join ot_customer c on c.cid=p.cid")->field('p.pid,p.name,c.shortsign')
            ->where("(EXISTS(select 1 from ot_takepart tp where tp.pid = p.pid and (tp.uid=" . UID . " or
 EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=tp.uid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . ")) )
or EXISTS(select 1 from ot_task t where t.pid = p.pid and (t.assigneduid=" . UID . " or
 EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=t.assigneduid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . ")))) and p.del = 0
  and p.state !=-1")->order("p.addtime desc")->select();
        $this->assign('pro', $pro);

        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => '所有任务-已暂停', 'url' => '');
        $this->assign('root_mbx', $root_mbx);

        Cookie('__from_route_t__', '所有任务');
        Cookie('__from_url_t__', U('TaskAll/index'));
        $this->assign('actname', ACTION_NAME);
        $this->display("index");
    }

    public function finished()
    {
        $where = $this->taskSearch();
        $where["t.deleted"] = 0;
        C('LIST_ROWS', 20);
        $pid = I('pid');
        if ($pid) {
            $this->assign('pid', $pid);
            $where['_string'] .= " and p.pid=" . $pid;
        }

        $where['_string'] .= " and (t.state=3)";

        $res = M('member')->alias('m')->field('g.*')
            ->join('ot_auth_group_access a on m.uid=a.uid')
            ->join('ot_auth_group g on g.id=a.group_id')
            ->where("m.uid=" . UID)->find();
        $group = 0;
        $grade = 10;
        if ($res) {
            $group = $res['id'];
            $grade = $res['grade'];
        }
        $where['_string'] .= " and (t.assigneduid='" . UID . "' or t.manageruid='" . UID . "'
or EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=t.assigneduid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . ")
or EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=t.manageruid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . "))";

        if (I('sort', '') && I('order', '')) {
            $order = I("sort") . " " . I("order");
        } else {
            $order = "t.petime";
        }
        $module = M('Task')->alias('t')
            ->join("ot_dictionary d on d.d_value = t.level and d.d_code='task_level'", 'left')
            ->join("ot_dictionary d1 on d1.d_value = t.state and d1.d_code='taskstatus'", 'left')
            ->join('ot_module m on m.mid = t.mid', 'left')
            ->join('ot_project p on p.pid = t.pid', 'left');
        $list = $this->lists($module, $where, $order, null, 't.*,d.d_key level_name,m.name mname,p.name pname,d1.d_key as statestr');
        $this->assign('_list', $list);
        //项目
        $pro = M('Project')->alias("p")->join("left join ot_customer c on c.cid=p.cid")->field('p.pid,p.name,c.shortsign')
            ->where("(EXISTS(select 1 from ot_takepart tp where tp.pid = p.pid and (tp.uid=" . UID . " or
 EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=tp.uid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . ")) )
or EXISTS(select 1 from ot_task t where t.pid = p.pid and (t.assigneduid=" . UID . " or
 EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=t.assigneduid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . ")))) and p.del = 0
  and p.state !=-1")->order("p.addtime desc")->select();
        $this->assign('pro', $pro);

        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => '所有任务-已完成', 'url' => '');
        $this->assign('root_mbx', $root_mbx);

        Cookie('__from_route_t__', '所有任务');
        Cookie('__from_url_t__', U('TaskAll/index'));
        $this->assign('actname', ACTION_NAME);
        $this->display("index");
    }

    public function closed()
    {
        $this->assign('actname', ACTION_NAME);
        $where = $this->taskSearch();
        $where["t.deleted"] = 0;

        $pid = I('pid');
        if ($pid) {
            $this->assign('pid', $pid);
            $where['_string'] .= " and p.pid=" . $pid;
        }

        $where['_string'] .= " and (t.state=-1)";

        $res = M('member')->alias('m')->field('g.*')
            ->join('ot_auth_group_access a on m.uid=a.uid')
            ->join('ot_auth_group g on g.id=a.group_id')
            ->where("m.uid=" . UID)->find();
        $group = 0;
        $grade = 10;
        if ($res) {
            $group = $res['id'];
            $grade = $res['grade'];
        }
        $where['_string'] .= " and (t.assigneduid='" . UID . "' or t.manageruid='" . UID . "'
or EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=t.assigneduid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . ")
or EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=t.manageruid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . "))";

        if (I('sort', '') && I('order', '')) {
            $order = I("sort") . " " . I("order");
        } else {
            $order = "t.petime";
        }
        $module = M('Task')->alias('t')
            ->join("ot_dictionary d on d.d_value = t.level and d.d_code='task_level'", 'left')
            ->join("ot_dictionary d1 on d1.d_value = t.state and d1.d_code='taskstatus'", 'left')
            ->join('ot_module m on m.mid = t.mid', 'left')
            ->join('ot_project p on p.pid = t.pid', 'left');
        $list = $this->lists($module, $where, $order, null, 't.*,d.d_key level_name,m.name mname,p.name pname,d1.d_key as statestr');
        $this->assign('_list', $list);
        //项目
        $pro = M('Project')->alias("p")->join("left join ot_customer c on c.cid=p.cid")->field('p.pid,p.name,c.shortsign')
            ->where("(EXISTS(select 1 from ot_takepart tp where tp.pid = p.pid and (tp.uid=" . UID . " or
 EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=tp.uid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . ")) )
or EXISTS(select 1 from ot_task t where t.pid = p.pid and (t.assigneduid=" . UID . " or
 EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=t.assigneduid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . ")))) and p.del = 0
  and p.state !=-1")->order("p.addtime desc")->select();
        $this->assign('pro', $pro);

        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => '所有任务-已关闭', 'url' => '');
        $this->assign('root_mbx', $root_mbx);

        Cookie('__from_route_t__', '所有任务');
        Cookie('__from_url_t__', U('TaskAll/index'));

        $this->display("index");
    }

    public function view()
    {

        $id = I("get.id", "");
        if (empty($id)) {
            $this->error("任务信息不存在");
        }

        $res = M('member')->alias('m')->field('g.*')
            ->join('ot_auth_group_access a on m.uid=a.uid')
            ->join('ot_auth_group g on g.id=a.group_id')
            ->where("m.uid=" . UID)->find();
        $group = 0;
        $grade = 10;
        if ($res) {
            $group = $res['id'];
            $grade = $res['grade'];
        }

        $taskmod = M("Task");
        $task = $taskmod->alias('t')->field("t.*,d2.d_key,d3.d_key as typename,m.name as o_name,g.name as gname,s.name as ssname,pc.name as pcname,d1.d_key as statestr")->
        join('ot_dictionary d2 on t.level = d2.d_value and d2.d_code=\'task_level\'', 'LEFT')
            ->join("ot_dictionary d1 on d1.d_value = t.state and d1.d_code='taskstatus'", 'left')
            ->join("ot_dictionary d3 on d3.d_value = t.tasktype and d3.d_code='task_type'", 'left')
            ->join("ot_project_config pc on pc.pid=t.pcid", 'LEFT')
            ->join("ot_service s on s.sid=t.sid", 'LEFT')
            ->join('ot_module m ON m.mid = t.mid', 'LEFT')
            ->join('ot_group g ON m.role = t.groupid', 'LEFT')
            ->where("t.tid='{$id}' and t.deleted=0 and (t.assigneduid='" . UID . "' or t.manageruid='" . UID . "'
or EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=t.assigneduid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . ")
or EXISTS(select 1 from ot_auth_group_access a INNER JOIN ot_auth_group g on a.group_id=g.id where a.uid=t.manageruid and g.path like CONCAT('%,','" . $group . "',',%') and g.grade>" . $grade . "))")->find();
        if (empty($task)) {
            $this->error("任务信息不存在");
        }
        if ($task['assigneduid'] == UID || $task['manageruid'] == UID) {
            header("Location:" . U('Task/view?id=' . $id));
            exit();
        }
        $doc = M("doc")->where("tid=$id")
            ->join('ot_file f on d.fileid=f.fileid  and f.delete=0', 'left')
            ->join('ot_doc_type t on d.dtid=t.dtid', 'left')
            ->field(array(
                'd.docid',
                'd.uid',
                't.name as tname',
                'f.name as dname',
                'savepath',
                'size', 'views', 'd.uname', 'd.addtime', 'note', 'f.fileid', 'd.url', 'd.urlname', 'f.ext'
            ))->order('addtime desc')->select(array('alias' => 'd'));

        $extimg = array('jpg', 'jpeg', 'png', 'gif', 'bmp', 'tiff', 'tiff');
        foreach ($doc as &$vo) {
            $vo['size'] = ceil(intval($vo['size']) / 1024);
            if (in_array($vo['ext'], $extimg)) {
                $vo['isimg'] = true;
            } else {
                $vo['isimg'] = false;
            }
        }
        $this->assign('doc', $doc);

        $task['finishcontent'] = strip_tags($task['finishcontent']);
        $task['finishcontent'] = trim($task['finishcontent']);
        $task['finishcontent'] = ereg_replace("\t", "", $task['finishcontent']);
        $task['finishcontent'] = ereg_replace("\r\n", "", $task['finishcontent']);
        $task['finishcontent'] = ereg_replace("\r", "", $task['finishcontent']);
        $task['finishcontent'] = ereg_replace("\n", "", $task['finishcontent']);
        $task['finishcontent'] = ereg_replace(" ", "", $task['finishcontent']);

        $task['closereason'] = strip_tags($task['closereason']);
        $task['closereason'] = trim($task['closereason']);
        $task['closereason'] = ereg_replace("\t", "", $task['closereason']);
        $task['closereason'] = ereg_replace("\r\n", "", $task['closereason']);
        $task['closereason'] = ereg_replace("\r", "", $task['closereason']);
        $task['closereason'] = ereg_replace("\n", "", $task['closereason']);
        $task['closereason'] = ereg_replace(" ", "", $task['closereason']);
        $task['format_petime'] = date("Ymd", $task['petime']);
        $this->assign('info', $task);
        $this->assign('nowDay', date('Ymd', time()));
        $wlist = array();//提醒数据
        $rlist = array();//评论数据
        $wlist = M("TaskWarn")->where("tid='{$id}'")->order("addtime desc")->select();
        $rlist = M("TaskComment")->where("tid='{$id}'")->order("addtime desc")->select();

        $this->assign('wlist', $wlist);
        $this->assign('rlist', $rlist);

        //任务转阅列表
        $readlist = array();
        $readlist = M("Toread")->where("tid='{$id}'")->select();
        $this->assign('readlist', $readlist);


        //审核进程
        $process = M("exprocess")->alias('e')->where("exid='" . $id . "' and type='任务审核'")->order('e.order asc')->select();
        $this->assign('process', $process);

        $logs = array();
        $logs = M("Log")->where(array("outtype" => "ot_task", "outkey" => $id))->order("addtime asc")->select();


        if ($logs) {
            foreach ($logs as $k => $v) {
                $hs = M("History")->where("logid='{$v['logid']}'")->select();
                if ($hs) {
                    foreach ($hs as $kk => $vv) {
                        $hs[$kk]['fname'] = tf_name("ot_task", $vv['field']);
                        switch ($vv['field']) {
                            case "state":
                                $mod = M("Dictionary");
                                $orow = $mod->field("d_key")->where("d_code='taskstatus' and d_value='{$vv['olddata']}'")->find();
                                if ($orow) {
                                    $hs[$kk]['olddata'] = $orow["d_key"];
                                }
                                $nrow = $mod->field("d_key")->where("d_code='taskstatus' and d_value='{$vv['newdata']}'")->find();
                                if ($orow) {
                                    $hs[$kk]['newdata'] = $nrow["d_key"];
                                }
                                break;
                        }
                    }

                    $logs[$k]['hs'] = $hs;
                }
            }
        }

        $this->assign('logs', $logs);
        /* // 任务记录
         $taskLog = [];
         $where = [];
         $where['outtype'] = 'ot_task';
         $where['outkey'] = $id;
         $where['action'] = [['in', 'pause,finish,open,send']]; // 暂停 完成 开启 转派
         $taskLog = M("Log")
             ->where($where)
             ->order("addtime asc")->select();
         $this->assign('taskLog', $taskLog);*/
        $project = M('Project')
            ->field('p.*,d1.d_key sname')
            ->alias('p')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->where('p.pid=' . $task['pid'])
            ->find();

        $project['description'] = htmlspecialchars_decode($project['description']);
        $project['risk'] = htmlspecialchars_decode($project['risk']);
        $project['feedback'] = htmlspecialchars_decode($project['feedback']);

        $this->assign('p', $project);

        $from_route_t = Cookie('__from_route_t__') ? Cookie('__from_route_t__') : '所有任务';
        $from_url_t = Cookie('__from_url_t__') ? Cookie('__from_url_t__') : U('TaskAll/index');

        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => $from_route_t, 'url' => $from_url_t);
        $root_mbx[] = array('title' => $task['title'], 'url' => U('TaskAll/view?id=' . $task['tid']));
        $root_mbx[] = array('title' => '查看任务', 'url' => '');
        $this->assign('root_mbx', $root_mbx);

        $this->assign('from_url', $from_url_t);

        $this->display();
    }

}
