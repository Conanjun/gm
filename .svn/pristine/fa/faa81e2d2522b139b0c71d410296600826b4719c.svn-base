<?php

namespace Admin\Controller;

use Admin\Common\Super\ProjectBudget;
use Admin\Common\Super\ProjectService;

/**
 *铁三角启动会控制器
 */
class PlanController extends AdminController
{
    private $today;

    // 构造函数
    public function __construct()
    {
        parent::__construct();
        $this->today = strtotime(date('Y-m-d'));
    }

    public function loadfile($files = "")
    {
        /* private $config = array(
        'mimes'         =>  array(), //允许上传的文件MiMe类型
        'maxSize'       =>  0, //上传的文件大小限制 (0-不做限制)
        'exts'          =>  array(), //允许上传的文件后缀
        'autoSub'       =>  true, //自动子目录保存文件
        'subName'       =>  array('date', 'Y-m-d'), //子目录创建方式，[0]-函数名，[1]-参数，多个参数使用数组
        'rootPath'      =>     '../Uploads/', //保存根路径
        'savePath'      =>  '', //保存路径
        'saveName'      =>  array('uniqid', ''), //上传文件命名规则，[0]-函数名，[1]-参数，多个参数使用数组
        'saveExt'       =>  '', //文件保存后缀，空则使用原后缀
        'replace'       =>  false, //存在同名是否覆盖
        'hash'          =>  true, //是否生成hash编码
        'callback'      =>  false, //检测文件是否存在回调，如果存在返回文件信息数组
        'driver'        =>  '', // 文件上传驱动
        'driverConfig'  =>  array(), // 上传驱动配置
    );*/
//		$uploader = new \Vendor\UploadHandler;
        $uploader = new \Think\Upload(C('DOWNLOAD_UPLOAD'));// 实例化上传类
        // Specify the list of valid extensions, ex. array("jpeg", "xml", "bmp")
//		$uploader->allowedExtensions = array(); // all files types allowed by default

        // Specify max file size in bytes.
        $uploader->maxSize = 500 * 1024 * 1024; // default is 10 MiB

        // Specify the input name set in the javascript.
//		$uploader->inputName = "qqfile"; // matches Fine Uploader's default inputName value by default

        // If you want to use the chunking/resume feature, specify the folder to temporarily save parts.
//		$uploader->chunksFolder = "chunks";

        $method = $_SERVER["REQUEST_METHOD"];
        $pid = I('get.pid');
        $type = I('get.type');
        if ($method == "POST") {
            header("Content-Type: text/plain");

            // Assumes you have a chunking.success.endpoint set to point here with a query parameter of "done".
            // For example: /myserver/handlers/endpoint.php?done
            if (isset($_GET["done"])) {
//				$result = $uploader->combineChunks("../Uploads/project");
            } // Handles upload requests
            else {
                // Call handleUpload() with the name of the folder, relative to PHP's getcwd()
                $info = $uploader->upload($files);
                if (!$info) {// 上传错误提示错误信息
//                    $this->error($upload->getError());
                } else {
                    $output = array();
                    foreach ($info as $key => $value) {
                        $a = explode('.', $value['name']);
                        $name = $a[0];
                        $file['name'] = $name;
                        $c = C('DOWNLOAD_UPLOAD');
                        $file['savepath'] = $c['rootPath'] . $value['savepath'] . $value['savename'];
                        $file['ext'] = $value['ext'];
                        $file['size'] = $value['size'];
                        $file['addtime'] = time();
                        $file['uid'] = UID;
                        $file['uname'] = get_nickname(is_login()) ? get_nickname(is_login()) : get_username(is_login());
                        $fileid = M('File')->add($file);
//                        $filelids[$key] = $filelid;
                        $output['info'] = $file;
                        $output['fileid'] = $fileid;
                    }
                    if ($output['fileid']) {
                        $data1 = array(
                            'type' => $type,
                            'pid' => $pid,
                            'uid' => UID,
                            'uname' => get_nickname(UID) ?: get_username(UID),
                            'addtime' => time(),
                            'fileid' => $output['fileid'],
                        );
                        $res = M('meet_file')->add($data1);
                        if ($type == 'scheme' || $type == 'contract' || $type == 'offer') {
                            $dtid = M('DocType')->where("name='销售文档'")->getField('dtid');
                        } else {
                            $dtid = M('DocType')->where("name='其他文档'")->getField('dtid');
                        }
                        $data2 = array(
                            'pid' => $pid,
                            'fileid' => $output['fileid'],
                            'dtid' => $dtid,
                            'addtime' => time(),
                            'uid' => UID,
                            'uname' => get_nickname(UID) ?: get_username(UID),
                        );
                        M('Doc')->add($data2);
                        if ($res) {
                            $output['state'] = 200;
                            $output['success'] = 'true';
                            $output['down'] = U('Doc/download?fid=' . $output['fileid']);
                            $output['del'] = U('Plan/meetfile?id=' . $res);
                        }
                    }

                }
                // To return a name used for uploaded file you can use the following line.
//				$result["uploadName"] = $uploader->getMakeName();
            }
//             var_dump($info);exit;
            echo json_encode($output);
        } else {
            header("HTTP/1.0 405 Method Not Allowed");
        }

    }


    /*
     * 铁三角启动会
     * */
    public function meet()
    {
        $pid = I('get.id', "");
        if (empty($pid)) {
            $this->error('请选择相关的项目');
        }
        $res_meet = M('meet')->alias('m')->where(array('m.pid' => $pid))->find();
        $path = pathinfo($res_meet['sow']);
        $res_meet['path'] = $path['basename'];
        $this->assign('meet', $res_meet);
        $meet_file = M('meet_file')->alias('mf')->field('f.fileid,f.ext,mf.type,f.name')
            ->join('ot_file f on mf.fileid=f.fileid', 'left')
            ->order('mf.addtime desc')
            ->where(array('mf.pid' => $pid))
            ->select();
        $list = [];
        foreach ($meet_file as $k => $v) {
            $list[$v['type']][] = $v;
        }
        if ($res_meet['mtime']) {
            $mtime = date("Y-m-d ", $res_meet['mtime']);
        } else {
            $mtime = date('Y-m-d ', time());
        }
        $this->assign('mtime', $mtime);
        $map['pid'] = $pid;
        $project = M('Project')->alias('p')
	        ->field('p.name,p.pm,p.stime,d1.d_key sname,d3.name dname,p.tasknum,p.ftasknum,p.pstime,p.petime,p.etime,pid,p.uid,p.pmuid')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dept d3 on p.orgid = d3.did', 'LEFT')
            ->where($map)
            ->find();
        $this->assign('mf', $list);
        $this->assign('pid', $pid);
        $this->assign('p', $project);
        $this->assign('meet', $res_meet);
        $this->assign('fourtitle', 'meet');
        $this->assign('actionName', 'projection');
        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => '我参与的项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectView/view?id=' . $pid));
        $root_mbx[] = array('title' => '规划', 'url' => U('ProjectNew/service?id=' . $pid));
        $root_mbx[] = array('title' => '铁三角启动会', 'url' => '');
        $this->assign('root_mbx', $root_mbx);

        if (empty($res_meet['mid']) && cando('Plan/meet', null, $pid)) {
            $this->redirect('meetedit', array('id' => $pid));
        } else {
            $this->display();
        }
    }

    /*
     * 铁三角启动会编辑
     */
    public function meetedit()
    {
        $pid = I('get.id', "");
        $mid = I('get.mid');
        if (empty($pid)) {
            $this->error('请选择相关的项目');
        }
        if (IS_POST) {
            $this->project_out($pid);//判断项目是否可以操作
            $takepart = str_replace('，', ',', trim($_POST['takepart']));
            $data = array(
                'uid' => UID,
                'uname' => get_nickname(UID) ?: get_username(UID),
                'mtime' => strtotime($_POST['mtime']),
                'address' => $_POST['address'],
                'takepart' => $takepart,
                'target' => $_POST['target'],
                'description' => $_POST['description'],
                'plan' => $_POST['plan'],
                'addtime' => time(),
                'pid' => $pid
            );
            $type = array('sow', 'scheme', 'contract', 'offer', 'other');
            $access = array_filter($_FILES['files']['tmp_name']);
            if ($access) {
                $file_ids = $this->file_uplode();
            }
            if (is_array($file_ids)) {
                foreach ($file_ids as $k => $v) {
                    $data[$type[$k]] = $v;
                }
            }
            $mid = $_POST['mid'];
            if (empty($mid)) {
                $result = M('meet')->add($data);
            } else {
                M('meet')->where(array('mid' => $mid))->save($data);
            }
            $this->redirect('meet', array('id' => $pid));

        } else {
            $res_meet = M('meet')->alias('m')->where(array('m.pid' => $pid))->find();
            $this->assign('meet', $res_meet);
            $meet_file = M('meet_file')->alias('mf')->field('mf.mfid,f.fileid,f.ext,mf.type,f.name')
                ->join('ot_file f on mf.fileid=f.fileid', 'left')
                ->order('mf.addtime desc')
                ->where(array('mf.pid' => $pid))
                ->select();
            $list = [];
            foreach ($meet_file as $k => $v) {
                $list[$v['type']][] = $v;
            }
            if ($res_meet['mtime']) {
                $mtime = date("Y-m-d", $res_meet['mtime']);
            } else {
                $mtime = date('Y-m-d', time());
            }
            $this->assign('mf', $list);
            $this->assign('mtime', $mtime);
            $map['pid'] = $pid;
            $project = M('Project')->alias('p')
                ->field('p.name,p.pm,p.stime,d1.d_key sname,d3.name dname,p.tasknum,p.ftasknum,p.pstime,p.petime,p.etime,pid,p.uid,p.pmuid')
                ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
                ->join('ot_dept d3 on p.orgid = d3.did', 'LEFT')
                ->where($map)
                ->find();
            $this->assign('p', $project);
            $this->assign('meet', $res_meet);
            $this->assign('fourtitle', 'meet');
            $this->assign('actionName', 'projection');
            $root_mbx = array();
            $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
            $root_mbx[] = array('title' => '我管理的项目', 'url' => U('ProjectNewFromMe/index'));
            $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectView/view?id=' . $pid));
            $root_mbx[] = array('title' => '规划', 'url' => U('ProjectNew/service?id=' . $project['pid']));
            $root_mbx[] = array('title' => '铁三角启动会', 'url' => U('Plan/meet?id=' . $pid));
            $root_mbx[] = array('title' => '编辑', 'url' => '');
            $this->assign('root_mbx', $root_mbx);
            $this->display();
        }

    }

    /*
     * 铁三角启动会文件的删除
     * */
    public function meetFile()
    {
        $id = I('get.id');
        if (!$id) {
            $this->json_error('请选择要操作的数据!', false);
        }
        $filed = M('meet_file')->where(array('mfid' => $id))->getField('fileid');
        $data = M('meet_file')->where(array('mfid' => $id))->delete();
        if ($data) {
            M('Doc')->where(array('fileid' => $filed))->delete();
            $this->ajaxReturn(array('done' => true, 'msg' => '删除成功'));
        } else {
            $this->json_error('删除失败', false);


        }

    }

    /*
     *文件上传处理
     * */
    public function file_uplode($files = '')
    {
        $upload = new \Think\Upload(C('DOWNLOAD_UPLOAD'));// 实例化上传类
        // 上传文件
        $info = $upload->upload($files);
        if (!$info) {// 上传错误提示错误信息
            $this->error($upload->getError());
        } else {// 上传成功 获取上传文件信息
            $filelids = array();
            foreach ($info as $key => $value) {
                $a = explode('.', $value['name']);
                $name = $a[0];
                $file['name'] = $_POST['labels'][$key] ? $_POST['labels'][$key] : $name;
                $c = C('DOWNLOAD_UPLOAD');
                $file['savepath'] = $c['rootPath'] . $value['savepath'] . $value['savename'];
                $file['ext'] = $value['ext'];
                $file['size'] = $value['size'];
                $file['addtime'] = time();
                $file['uid'] = UID;
                $file['uname'] = get_nickname(is_login()) ? get_nickname(is_login()) : get_username(is_login());
                $filelid = M('File')->add($file);
                $filelids[$key] = $filelid;
            }
            return $filelids;
        }
    }

    /*    内部启动会*/
    public function innermeet()
    {
        $pid = I('get.id', "");
        if (empty($pid)) {
            $this->error('请选择相关的项目');
        }
        $res_meet = M('innerMeet')->alias('m')->field("m.*")->where(array('pid' => $pid))
            ->find();
        if ($res_meet['mtime']) {
            $mtime = date("Y-m-d ", $res_meet['mtime']);
        } else {
            $mtime = date('Y-m-d ', time());
        }
        $res_file = M('innerMeet')->alias('im')->field("f.name,f.ext,f.savepath,f.fileid fid,imf.ifid")
            ->join('ot_im_file imf on im.imid=imf.imid')
            ->join('ot_file f on f.fileid=imf.fileid')
            ->where(array('im.pid' => $pid))
            ->select();
        $this->assign('files', $res_file);
        $this->assign('mtime', $mtime);
        $map['pid'] = $pid;
        $project = M('Project')->alias('p')
	        ->field('p.name,p.pm,p.stime,d1.d_key sname,d3.name dname,p.tasknum,p.ftasknum,p.pstime,p.petime,p.etime,pid,p.uid,p.pmuid,p.state')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dept d3 on p.orgid = d3.did', 'LEFT')
            ->where($map)
            ->find();
        $this->assign('pid', $pid);
        $this->assign('p', $project);
        $this->assign('meet', $res_meet);
        $this->assign('fourtitle', 'innermeet');
        $this->assign('actionName', 'projection');
        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => '我管理的项目', 'url' => U('ProjectNewFromMe/index'));
        $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectView/view?id=' . $pid));
        $root_mbx[] = array('title' => '规划', 'url' => U('ProjectNew/service?id=' . $project['pid']));
        $root_mbx[] = array('title' => '内部启动会', 'url' => '');
        $this->assign('root_mbx', $root_mbx);
        $this->display();

    }

    /*内部启动会编辑*/
    public function imedit()
    {
        $pid = I('get.id', "");
        if (empty($pid)) {
            $this->error('请选择相关的项目');
        }
        if (IS_POST) {
            $this->project_out($pid);//判断项目是否可以操作
            $takepart = str_replace('，', ',', trim($_POST['takepart']));
            $data = array(
                'uid' => UID,
                'uname' => get_nickname(UID) ?: get_username(UID),
                'mtime' => strtotime($_POST['mtime']),
                'address' => $_POST['address'],
                'takepart' => $takepart,
                'target' => $_POST['target'],
                'description' => $_POST['description'],
                'plan' => $_POST['plan'],
                'addtime' => time(),
                'pid' => $pid
            );

            $imid = $_POST['imid'];
            if (empty($imid)) {
                $imid = M('innerMeet')->add($data);
            } else {
                M('innerMeet')->where(array('imid' => $imid))->save($data);
            }
            $access = array_filter($_FILES['files']['tmp_name']);
            if ($access) {
                $file_ids = $this->file_uplode();
            }
            if (is_array($file_ids)) {
                $sql = 'insert into ot_doc (pid,fileid,dtid,addtime,uid,uname,edittime,edituid,edituname) values ';
                $dtid = M('DocType')->where("name='其他文档'")->getField('dtid');
                foreach ($file_ids as $k => $v) {
                    M('imFile')->add(array('imid' => $imid, 'fileid' => $v));
                    $addtime = time();
                    $uid = UID;
                    $uname = get_nickname(UID) ? get_nickname(UID) : get_username(UID);
                    $sql .= "($pid,$v,$dtid,$addtime,$uid,'" . $uname . "',$addtime,$uid,'" . $uname . "'),";

                }
                $sql = substr($sql, 0, -1);
                M('Doc')->query($sql);
            }
            $this->redirect('innermeet', array('id' => $pid));

        } else {
            $res_file = M('innerMeet')->alias('im')->field("f.name,f.ext,f.savepath,f.fileid fid,imf.ifid")
                ->join('ot_im_file imf on im.imid=imf.imid')
                ->join('ot_file f on f.fileid=imf.fileid')
                ->where(array('im.pid' => $pid))
                ->select();
            $res_meet = M('innerMeet')->where(array('pid' => $pid))->find();
            if ($res_meet['mtime']) {
                $mtime = date("Y-m-d ", $res_meet['mtime']);
            } else {
                $mtime = date('Y-m-d ', time());
            }
            $this->assign('mtime', $mtime);
            $map['pid'] = $pid;
            $project = M('Project')->alias('p')
	            ->field('p.name,p.pm,p.stime,d1.d_key sname,d3.name dname,p.tasknum,p.ftasknum,p.pstime,p.petime,p.etime,pid,p.uid,p.pmuid')
                ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
                ->join('ot_dept d3 on p.orgid = d3.did', 'LEFT')
                ->where($map)
                ->find();
            $this->assign('file', $res_file);
            $this->assign('pid', $pid);
            $this->assign('p', $project);
            $this->assign('meet', $res_meet);
            $this->assign('fourtitle', 'innermeet');
            $this->assign('actionName', 'projection');
            $root_mbx = array();
            $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
            $root_mbx[] = array('title' => '我管理的项目', 'url' => U('ProjectNewFromMe/index'));
            $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectView/view?id=' . $pid));
            $root_mbx[] = array('title' => '规划', 'url' => U('ProjectNew/service?id=' . $project['pid']));
            $root_mbx[] = array('title' => '内部启动会', 'url' => U('Plan/innermeet?id=' . $pid));
            $root_mbx[] = array('title' => '编辑', 'url' => '');
            $this->assign('root_mbx', $root_mbx);
            $this->display();
        }
    }

    /* 内部启动会删除文件*/
    public function imdelfile()
    {
        $ifid = I('get.ifid');
        $fid = I('get.fid');
        if (!$ifid) {
            $this->json_error('请选择要操作的数据!', false);
        }
        $filed = M('imFile')->where(array('ifid' => $ifid))->getField('fileid');
        $data = M('imFile')->where(array('ifid' => $ifid))->delete();

        if (empty($data)) {
            $this->json_error('删除失败!', false);
        } else {
            $updata = array('del' => 0);
            M('file')->where(array('fileid' => $fid))->save($updata);
            M('Doc')->where(array('fileid' => $filed))->delete();
            $this->ajaxReturn(array('done' => true, 'msg' => '删除成功'));
        }

    }

    /*
     * 立项
     * */
    public function closure()
    {
        $pid = I('get.id', "");
        if (empty($pid)) {
            $this->error('请选择相关的项目');
        }
        if (IS_POST) {
            $data = array(
                'taskcheck' => $_POST['taskcheck'] ?: 0,
                'doccheck' => $_POST['doccheck'] ?: 0,
                'expensecheck' => $_POST['expensecheck'] ?: 0,
                'voucher' => $_POST['voucher'] ?: 0,
                'addtime' => time(),
                'uid' => UID,
                'uname' => get_nickname(UID) ?: get_username(UID),
                'pid' => $pid
            );
            $pa = M('ProjectAccept')->where(array('pid' => $pid))->getField('paid');
            if ($pa) {
                M('ProjectAccept')->where(array('pid' => $pid))->save($data);
                $accessories = array_filter($_FILES['files']['tmp_name']);
                if (!empty($accessories)) {
                    $file_ids = $this->file_uplode();
                    if (!empty($file_ids)) {
                        $sql = 'insert into ot_project_accept_file (pid,fileid,paid,addtime,uid,uname) values ';
                        foreach ($file_ids as $key => $vo) {
                            $addtime = time();
                            $uid = UID;
                            $uname = get_nickname(UID) ? get_nickname(UID) : get_username(UID);
                            $sql .= "($pid,$vo,$pa,$addtime,$uid,'" . $uname . "'),";
                        }
                        $sql = substr($sql, 0, -1);
                        M()->execute($sql);
                    }
                }
            } else {
                $paid = M('ProjectAccept')->add($data);
                $accessories = array_filter($_FILES['files']['tmp_name']);
                if (!empty($accessories)) {
                    $file_ids = $this->file_uplode();
                    if (!empty($file_ids)) {
                        $sql = 'insert into ot_project_accept_file (pid,fileid,paid,addtime,uid,uname) values ';
                        foreach ($file_ids as $key => $vo) {
                            $addtime = time();
                            $uid = UID;
                            $uname = get_nickname(UID) ? get_nickname(UID) : get_username(UID);
                            $sql .= "($pid,$vo,$paid,$addtime,$uid,'" . $uname . "'),";
                        }
                        $sql = substr($sql, 0, -1);
                        M()->execute($sql);
                    }
                }
            }

            $this->redirect('closure', array('id' => $pid));
        } else {
            $taskcount = M('ProjectService')->where('pid=' . $pid)->count();
            $taskfinish = M('task')->where('pid=' . $pid . ' and state=3')->count();
            $taskclose = M('task')->where('pid=' . $pid . ' and state=-1')->count();
            $project['taskzj'] = (int)$taskfinish + (int)$taskclose;
            $doctypes = M('doc_type')->field('dtid,name')->order('sort_order asc')->select();
            //文档个数
            $docs = array();
            foreach ($doctypes as $k => $v) {
                $num = M('Doc')->where(array('dtid' => $v['dtid'], 'pid' => $pid))->count();
                $docs[$v['dtid']]['sum'] = $num;
                $docs[$v['dtid']]['name'] = $v['name'];
            }
            //报销成本
            $budget = M('Projectbudget')->alias('pb')
                ->field(array('pb.type1', 'pb.cbudget', 'pb.chours', 'pb.pid', 'pb.finishours',
                'pb.hours', 'pb.outid', 'pb.hours', 'pb.finishours', 'pb.pbid', 'pb.type', 'pb.budget',
                'pb.cost', 'FORMAT(pb.cost/pb.budget*10000/100,0) as bl', 'FORMAT(pb.cost/pb.cbudget*10000/100,0) as b2', 'pb.addtime', 'pb.updatetime', 'pb.outitem'))
                ->where(array('pid' => $pid))
                ->order('pb.updatetime desc')
                ->select();
            $map['pid'] = $pid;
            $project = M('Project')->alias('p')
	            ->field('p.name,p.pm,p.stime,d1.d_key sname,d3.name dname,p.tasknum,p.ftasknum,p.pstime,p.petime,p.etime,pid,p.uid,p.pmuid')
                ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
                ->join('ot_dept d3 on p.orgid = d3.did', 'LEFT')
                ->where($map)
                ->find();

            //验收结果
            $result = M('ProjectAccept')->where(array('pid' => $pid))->find();
            $files = M('project_accept_file')->alias('paf')->field('f.name,f.ext,f.savepath,f.fileid')
                ->join('ot_file f on f.fileid=paf.fileid')
                ->where(array('paf.pid' => $pid))
                ->select();
            $this->assign('file', $files);
            $this->assign('accept', $result);
            $this->assign('budget', $budget);
            $this->assign('docs', $docs);
            $this->assign('docTypes', $doctyps);
            $project['taskcount'] = $taskcount;
            $project['taskfinish'] = $taskfinish;
            $project['taskclose'] = $taskclose;
            $this->assign('pid', $pid);
            $this->assign('p', $project);
            $this->assign('actionName', 'closure');
            $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
            $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');
            $root_mbx = array();
            $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
            $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
            $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectView/view?id=' . $pid));
            $root_mbx[] = array('title' => '结项', 'url' => '');
            $this->assign('root_mbx', $root_mbx);
            $this->display();
        }

    }

    /*
     * 客户验收文档删除
     * */
    public function closurefile()
    {
        $fid = I('get.fid');
        if (empty($fid)) {
            $this->json_error("请选择要删除的数据");
        }
        M('ProjectAcceptFile')->where(array('fileid' => $fid))->delete();
        $this->ajaxReturn(array('done' => true, 'msg' => '删除成功'));
    }

    /* *
     *关闭项目
     * */
    public function close()
    {
        $pid = I('get.id', '');
        if ($pid) {
            $this->project_out($pid);//判断项目是否可以操作
            $tmep = M('Project')->field('state')->find($pid);
            if ($tmep['state'] == 2) {
                $this->json_error('项目已完成!', false);
            }
            $etime = $_POST['etime'];
            if (!$etime) $this->json_error('完成时间不能为空!', false);
            $content = $_POST['content'];
            $pid = $_POST['pid'];
            $data = array();
            $data['pid'] = $pid;
            $data['state'] = 2;
            $data['etime'] = strtotime($etime);
            $temp = M('Project')->save($data);
            $history = array();
            $history [0] = array(
                'field' => 'state',
                'olddata' => $tmep['state'],
                'newdata' => 2
            );
            action_log_new(array('history' => $history, 'outtype' => 'ot_project', 'outkey' => $pid, 'pid' => $pid, 'action' => 'finish', 'comment' => $content, 'ext1' => ''));
            if ($temp === false) {
                $this->json_error('操作失败!', false);
            } else {
                $this->ajaxReturn(array('done' => true, 'msg' => '成功'));
            }
        } else {
            $this->error('请选择要操作的数据！');

        }
    }

    //验正任务是否全部完成、关闭
    public function verifytask()
    {
        $pid = I('post.pid');
        $this->project_out($pid, 1);//判断项目是否可以操作
        $taskwhere = "pid = {$pid} and state != 3 and state != -1 and deleted = 0 ";
        $taskcount = M('Task')->where($taskwhere)->count();
        $servicecount = M('ProjectService')->where(array('pid'=>$pid,'state'=>0))->count();
        if ($taskcount || $servicecount) {
            $this->json_error('项目还有任务没有关闭或完成');
        } else {
            $this->json_success('sur');
        }
    }

    public function verifydoc()
    {
        $pid = I('post.pid');
        $this->project_out($pid, 1);//判断项目是否可以操作
        $docwhere = "pid = {$pid}";
        $doccount = M('Doc')->where($docwhere)->count();
        if (empty($doccount)) {
            $this->json_error('请上传至少一个项目文档');
        } else {
            $this->json_success('sur');
        }
    }

    public function verifyexpense()
    {
        $pid = I('post.pid');
        $this->project_out($pid, 1);//判断项目是否可以操作
        $expewhere = "state !=3 and pid = {$pid} and 'delete' !=1";
        $expecount = M('Expense')->where($expewhere)->count();
        if ($expecount) {
            $this->json_error('项目还有报销单没有未生效');
        } else {
            $this->json_success('sur');
        }
    }

    public function verifyaccept()
    {
        $pid = I('post.pid');
        $this->project_out($pid, 1);//判断项目是否可以操作
        $acceptfile = M('ProjectAcceptFile')->where(array('pid' => $pid))->count();
        if (empty($acceptfile)) {
            $this->json_error('请上传客户验证凭证');
        } else {
            $this->json_success('sur');
        }
    }

    // 项目详情
    public function sow()
    {
        $project = $this->baseMessage();    // 基本信息
        $pid = $project['pid'];
        if (IS_POST) {
            $notes = I('post.note');
            $rids = I('post.rid');
            $map = [];
            $data = [];
            foreach ($rids as $k => $v) {
                $map['rid'] = $v;
                $data['note'] = $notes[$k];
                M('related')->where($map)->save($data);
            }
            $this->redirect('plan/sow?id=' . $pid . '#Menu');
        } else {
            $kpi = M('Project_kpi')->where('pid=' . $pid)->order('kid asc')->select();    // kpi
            $milestone = D('Milestone')->getMilestoneByPid($pid);    // 里程碑
            $this->taskGantt($pid);     // 甘特图
            $this->service($pid);       // 项目内容
            $task = D('Task')->getTaskByPid($pid);    // 项目范围
            $takePart = D('TakePart')->getTakePartByPid($pid);    // 参与成员
            //干系人
            $holder = M('related')->field('rid,name,dept,email,phone,note')->where(array('pid' => $pid))->select();
            $this->assign('holder', $holder);
            //项目范围
            $scope = M('ProjectService')->distinct(true)->alias('t')
                ->field("pc.name as p1name,pc2.name as p2name")
                ->join("ot_project_config pc  on t.pcid = pc.pid")
                ->join("ot_project_config pc2  on  CONCAT(pc.path) like CONCAT('%,',pc2.pid,',%') and pc2.grade=2")
                ->where("t.pid = " . $pid)->order("pc2.pid")->select();
            $newscope = array();
            foreach ($scope as $k => $v) {
                $newscope[$v['p2name']] .= $v['p1name'] . '、';
            }
            $takePart1 = array();
            foreach ($takePart as $k => $v) {
                $takePart1[$v['title']] .= $v['uname'] . '、';
            }
            foreach ($takePart1 as $kk => $vv) {
                $takePart1[$kk] = implode('、', array_unique(explode('、', trim($vv, '、'))));
            }
            $w1 = " 1=1 and pid =$pid";
            $w2 = " and outtype ='ot_project'";
            $condition ['_string'] = "(($w1 $w2))";
            $takezxr = $takePart1['项目执行'];
            $this->assign('scope', $newscope);
            $this->assign('tplist', $takePart1);
            $this->assign('takezxr', $takezxr);
            $this->assign('tlist', $task);
            $this->assign('mlist', $milestone);
            $this->rootMbx($project['name'], $project['pid']);   // 底部面包屑
            $this->assign('kpi', $kpi);
            $this->assign('p', $project);
            $this->assign('fourtitle', 'meet');
            $this->assign('actionName', 'projection');
            $this->assign('e', I('get.e'));      // 编辑
            $this->display();
        }
    }

    // 项目的基本信息
    public function baseMessage()
    {

        $id = I("get.id");
        empty($id) and $this->error('项目不存在！');
        $where = " and  p.del = 0  and (EXISTS(select 1 from ot_takepart tp where tp.pid = p.pid and tp.uid=" . UID . ")
			or EXISTS(select 1 from ot_task t where t.pid = p.pid and t.assigneduid=" . UID . ") or p.pmuid=" . UID . " or p.uid=" . UID . ")";
        $project = D('Project')
            ->field('p.*,o.code oname,o.chance_code,d1.d_key sname,d2.d_key levelc,c.name cname,d3.name dname,m.nickname mname')
            ->alias('p')
            ->join('ot_offer o on p.oid = o.oid', 'LEFT')
            ->join('ot_dept d3 on p.orgid = d3.did', 'LEFT')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
            ->join('ot_customer c on p.cid = c.cid', 'LEFT')
            ->join('ot_member m on p.sale = m.uid', 'LEFT')
            ->where('p.pid=' . $id . $where)
            ->find();
        if (empty($project)) {
            $this->error('项目不存在！');
        }

        return $project;

    }


    /**
     * 底部面包屑
     *
     * @param $title
     * @param $pid
     */
    public function rootMbx($title, $pid)
    {
        $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
        $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectView/index');
        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
        $root_mbx[] = array('title' => $title, 'url' => U('ProjectView/view?id=' . $pid));
        $root_mbx[] = array('title' => '查看项目', 'url' => '');
        $this->assign('root_mbx', $root_mbx);
        $this->assign('from_url', $from_url);
    }
    //  甘特图
    public function taskGantt($pid)
    {
        $map = [];
        $map['ps.pid'] = $pid;
        $map['ps.state'] = ProjectService::STARTED;
        $project_item = M("ProjectService")->alias('ps')
            ->field(array('ps.mid', 'ps.pcid', 'ps.sid', 'ps.prepsid', 'pc.name as p_name'))
            ->join("ot_project_config pc on ps.pcid = pc.pid")
            ->group('ps.pcid')
            ->where($map)
            ->select();

        $m_item = M("ProjectService")->alias('ps')
            ->field(array('ps.mid', 'ps.pcid', 'ps.sid', 'ps.psid', 'ps.prepsid', 'm.name as m_name'))
            ->join("ot_module m on ps.mid = m.mid")
            ->group('ps.mid')
            ->where($map)
            ->select();
        $s_item = M("ProjectService")->alias('ps')
            ->field(array('ps.mid', 'ps.pcid', 'ps.psid', 'ps.prepsid', 'ps.sid', 'ps.assignedname', 'ps.pstime', 'ps.petime', 'ps.days', 'ps.progress', 's.name as s_name'))
            ->join("ot_service s on ps.sid = s.sid")
            ->where($map)
            ->select();

        $data = array();
        $color_temp = array('836fff');
        $color_data = array();
        $new_pk = 0;
        foreach ($project_item as $key => $val) {
            $p = array();
            $pk = $key + 1;
            $p['id'] = $pid;
            $p['pCid'] = $val['pcid'];
            $p['pID'] = $pk;
            $p['pName'] = $val['p_name'];
            $p['pStart'] = '';
            $p['pEnd'] = '';
            $p['pColor'] = "ffc125";
            $p['pLink'] = '';
            $p['pMile'] = 0;
            $p['pRes'] = '';
            $p['pComp'] = 0;
            $p['pParent'] = 0;
            $p['pOpen'] = 1;
//	 		$p['pDepend'] =;
            $data[$pk] = $p;
            foreach ($m_item as $ke => $va) {
                $m = array();
                $mk = $ke + 1;
                if ($va['pcid'] == $val['pcid']) {
                    if (!isset($color_data[$va['groupid']])) {
                        $color = $color_temp[array_rand($color_temp, 1)];
                        if (!in_array($color, $color_data)) {
                            $color_data[$va['groupid']] = $color;
                        }
                    } else {
                        $color = $color_data[$va['groupid']];
                    }
                    $m['id'] = $pid;
                    $m['pMid'] = $va['mid'];
                    $m['pID'] = $pk . $mk;
                    $m['pName'] = $va['m_name'];
                    $m['pStart'] = '';
                    $m['pEnd'] = '';
                    $m['pColor'] = "7ccd7c";
                    $m['pLink'] = '';
                    $m['pMile'] = 0;
                    $m['pRes'] = '';
                    $m['pComp'] = 0;
                    $m['pParent'] = $pk;
                    $m['pOpen'] = 1;
                    $data[$pk . $mk] = $m;
                    foreach ($s_item as $k => $v) {
                        $s = array();
                        $sk = $k + 1;
                        if ($va['mid'] == $v['mid']) {

                            $s['pID'] = $pk . $mk . $sk;

                            $temp_array[$v['psid']] = $s['pID'];
                            $s['pName'] = $v['s_name'];
                            if($v['pstime']){
                                $s['pStart'] = date('Y-m-d', $v['pstime']);
                            }else{
                                $s['pStart'] = '';
                            }
                            if($v['petime']){
                                $s['pEnd'] = date('Y-m-d', $v['petime']);
                            }else{
                                $s['pEnd'] = '';
                            }


                            $today = strtotime(date('Y-m-d', time()));
                            $pe = strtotime(date('Y-m-d', $v['petime']));
                            if ($v['petime'] < time() && $pe != $today && $v['progress'] != 100) {
                                $s['pColor'] = 'ff0000';
                            } else {
                                $s['pColor'] = $color;
                            }
                            $s['pLink'] = '';
                            $s['pMile'] = 0;
                            $s['pRes'] = $v['assignedname'];
                            $s['pComp'] = intval($v['progress']);
                            $s['pParent'] = $pk . $mk;
                            $s['pGroup'] = 0;
                            $s['pOpen'] = 0;
                            $s['pDepend'] = $temp_array[$v['prepsid']];
                            $data[$pk . $mk . $sk] = $s;
                        }
                    }
                    $data[$pk . $mk]['pGroup'] = 1;
                }
            }
            $data[$pk]['pGroup'] = 1;
            $new_pk = $pk;
        }
        $pro_item = M("ProjectService")->alias('ps')
            ->field(array('ps.*'))
            ->where("ps.pid='" . $pid . "' and ps.pcid=0 and ps.state = 1")
            ->select();
        foreach ($pro_item as $kk => $vv) {
            $color = $color_temp[array_rand($color_temp, 1)];
            if (!in_array($color, $color_data)) {
                $color_data['no_' . $kk] = $color;
            }
            $p = array();
            $ok = $new_pk + $kk + 1;
            $p['pID'] = $ok;
            $temp_array[$vv['psid']] = $p['pID'];
            $p['pName'] = $vv['title'];
            if($vv['pstime']){
                $p['pStart'] = date('Y-m-d', $vv['pstime']);
            }else{
                $p['pStart']='';
            }

            if($vv['petime']){
                $p['pEnd'] = date('Y-m-d', $vv['petime']);
            }else{
                $p['pEnd']='';
            }

            $p['pColor'] = $color;
            $p['pLink'] = '';
            $p['pMile'] = 0;
            $p['pRes'] = $vv['assignedname'];
            $p['pComp'] = intval($vv['progress']);
            $p['pParent'] = 0;
            $p['pOpen'] = 1;
            $p['pGroup'] = 0;
            $p['customize'] = 1;
            $p['pDepend'] = $temp_array[$vv['prepsid']];
            $data[$ok] = $p;

        }
        $parent_pid = array();
        foreach ($parent_array as $p => $v) {
            $parent_pid[$temp_array[$p]] = $temp_array[$v];
        }
        $data = array_values($data);
        $this->assign('data', json_encode($data));

    }

    // 项目服务核心构成
    public function service($pid)
    {
        $order = 's.sort_order asc';
        $Model = M('ProjectService');
        $list = $Model->alias('s')->field(array(
            's.*', 'm.name as o_name', 'g.name as gname', 's1.name as sname',
            's1.description as s_description', 'p.name as pname', 'p.pid as pid',
            '(select count(1) from ot_service_doc sd where sd.sid = s.sid) as sdc'))
            ->join('ot_module m ON m.mid = s.mid', 'LEFT')
            ->join('ot_project_config p ON m.pid = p.pid', 'LEFT')
            ->join('ot_service s1 ON s1.sid = s.sid', 'LEFT')
            ->join('ot_group g ON s.groupid = g.groupid', 'LEFT')
            ->where("p.name !='' and s.pid=" . $pid)
            ->order($order)
            ->select();
        $nlist = array();
        if ($list) {
            foreach ($list as $k => $v) {
                if ($v['sid']) {
                    $stemp = M('Service')->field('description,mid')->where('sid = ' . $v['sid'])->find();
                    $sdescription = $stemp['description'];
                    $smid = $stemp['mid'];
                    $smh = M('ModuleHelp')->where('mid = ' . $smid)->count();
                    if ($sdescription || $smh) {
                        $list[$k]['bulb'] = 1;
                    }
                }
                if ($v['s_description']) {
                    $str = strip_tags(htmlspecialchars_decode($v['s_description']));
                    $list[$k]['title_show'] = $str;
                } else {
                    if ($v['gname']) {
                        $list[$k]['title_show'] = $v['gname'] . '-' . $v['o_name'] . '-' . $v['sname'];
                    } else {
                        if ($v['o_name'] || $v['sname']) {
                            $list[$k]['title_show'] = $v['o_name'] . '-' . $v['sname'];
                        } else {
                            $list[$k]['title_show'] = $v['title'];
                        }

                    }

                }
            }

            foreach ($list as $k => $v) {
                $listpid = $v['pid'] ?: 'xx';
                $nlist[$listpid]['mid'] = $listpid;
                $nlist[$listpid]['mname'] = $v['pname'];
                $nlist[$listpid]['list'][] = $v;
            }
        }

        $this->assign('service1', $nlist);
    }

}
