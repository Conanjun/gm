<?php

namespace Admin\Controller;

use Admin\Common\Super\Api;
use Admin\Common\Super\Project;
use Admin\Common\Super\ProjectService;

/*
 * 项目维护控制器
 * */

class ProjectNewController extends AdminController
{
    //定义数据表
    private $db;
    private $pro_module;
    private $today;
    private $meta_title;

    //构造函数
    public function __construct()
    {
        parent::__construct();
        $this->db = D('Project');
        $this->pro_module = D('ProjectConfig');
        $this->today = strtotime(date('Y-m-d'));
    }

    // 高级搜索 : LGW
    public function advancedtSearch()
    {
        $actionURL = strstr(__ACTION__, '/Admin');
        $config = array(
            "actionURL" => $actionURL,
            "operators" => array("=" => "=", "!=" => "!=", ">" => ">", ">=" => ">=", "<" => "<", "<=" => "<=", "include" => "包含"),
            "params" => array(
                0 => array('str' => '项目名称', 'fieldname' => 'p.name', 'operator' => 'include', 'control' => 'input', 'values' => '')
            , 1 => array('str' => '状态', 'fieldname' => 'p.state', 'operator' => '=', 'control' => 'select', 'values' => array())
            , 2 => array('str' => '编号', 'fieldname' => 'p.code', 'operator' => 'include', 'control' => 'input', 'values' => '')
            , 3 => array('str' => '项目类型', 'fieldname' => 'p.type', 'operator' => '=', 'control' => 'select', 'values' => array())
            , 4 => array('str' => '客户', 'fieldname' => 'P.cid', 'operator' => '=', 'control' => 'select', 'values' => array())
            , 5 => array('str' => '合同号', 'fieldname' => 'p.contract', 'operator' => 'include', 'control' => 'input', 'values' => '')
            , 6 => array('str' => '报价单号', 'fieldname' => 'p.oid', 'operator' => '=', 'control' => 'input', 'values' => '')
            , 7 => array('str' => '关联机会', 'fieldname' => 'p.chance', 'operator' => '=', 'control' => 'input', 'values' => "")
            , 8 => array('str' => '项目经理', 'fieldname' => 'p.pmuid', 'operator' => '=', 'control' => 'select', 'values' => array())
            , 9 => array('str' => '所属部门', 'fieldname' => 'p.orgid', 'operator' => '=', 'control' => 'select', 'values' => array())
            , 10 => array('str' => '销售', 'fieldname' => 'p.sale', 'operator' => '=', 'control' => 'select', 'values' => array())
            , 11 => array('str' => '优先级', 'fieldname' => 'p.level', 'operator' => '=', 'control' => 'select', 'values' => array())
            , 12 => array('str' => '金额', 'fieldname' => 'p.money', 'operator' => '=', 'control' => 'input', 'values' => "")
            , 13 => array('str' => '任务数', 'fieldname' => 'p.tasknum', 'operator' => '=', 'control' => 'input', 'values' => "")
            , 14 => array('str' => '成本', 'fieldname' => 'p.cost', 'operator' => '=', 'control' => 'input', 'values' => "")
            , 15 => array('str' => '合同推广费用', 'fieldname' => 'p.promotion', 'operator' => '=', 'control' => 'input', 'values' => "")
            , 16 => array('str' => '计划开始时间', 'fieldname' => 'p.pstime', 'operator' => '=', 'control' => 'input', 'values' => "", "class" => "date")
            , 17 => array('str' => '计划结束时间', 'fieldname' => 'p.petime', 'operator' => '=', 'control' => 'input', 'values' => "", "class" => "date")
            , 18 => array('str' => '实际开始时间', 'fieldname' => 'p.stime', 'operator' => '=', 'control' => 'input', 'values' => "", "class" => "date")
            , 19 => array('str' => '实际结束时间', 'fieldname' => 'p.etime', 'operator' => '=', 'control' => 'input', 'values' => "", "class" => "date")
            , 20 => array('str' => '顾问', 'fieldname' => 'p.adviser', 'operator' => '=', 'control' => 'select', 'values' => array())
            , 21 => array('str' => '是否启动', 'fieldname' => 'p.breakdown', 'operator' => '=', 'control' => 'select', 'values' => array("" => "", "0" => '否', '1' => "是"))
            , 22 => array('str' => '创建人', 'fieldname' => 'p.uid', 'operator' => '=', 'control' => 'select', 'values' => array())
            , 23 => array('str' => '创建时间', 'fieldname' => 'p.addtime', 'operator' => '=', 'control' => 'input', 'values' => '', 'class' => 'date')
            )
        );
        if ($config && $config['params']) {
            //类型
            $types = M('dictionary')->where("d_code = 'project_type'")->field(true)->select(array('order' => 'd_order asc'));
            //客户
            $customer = M('Customer')->field('cid,name')->where('enabled = 1')->select();
            //项目部门
            $dept = M('Dept')->field('did,name')->select();
            //项目经理
            $pm = M('Member')->field('uid,nickname')->where('status = 1')->select();
            //销售
            $sales = M('Member')->field('uid,nickname')->where('status = 1')->select();
            //状态
            $states = M('dictionary')->where("d_code = 'project_state'")->field(true)->select(array('order' => 'd_order asc'));
            //报价单
            $offer = D('Offer')->field('oid,code')->select();
            //优先级
            $levels = M('dictionary')->where("d_code = 'level'")->field(true)->select(array('order' => 'd_order asc'));
            //进度
            $progress = M('dictionary')->where("d_code = 'progress'")->field(true)->select(array('order' => 'd_order asc'));

            $mcustomer = array("" => "");
            $mdept = array("" => "");
            $mtypes = array("" => "");
            $mpm = array("" => "");
            $msales = array("" => "");
            $mstates = array("" => "");
            $moffer = array("" => "");
            $mlevels = array("" => "");
            $mprogress = array("" => "");
            if ($customer) {
                foreach ($customer as $v) {
                    $mcustomer[$v['cid']] = $v['name'];
                }
            }
            if ($pm) {
                foreach ($pm as $v) {
                    $mpm[$v['uid']] = $v['nickname'];
                }
            }
            if ($dept) {
                foreach ($dept as $v) {
                    $mdept[$v['did']] = $v['name'];
                }
            }
            if ($types) {
                foreach ($types as $v) {
                    $mtypes[$v['d_value']] = $v['d_value'];
                }
            }
            if ($sales) {
                foreach ($sales as $v) {
                    $msales[$v['uid']] = $v['nickname'];
                }
            }
            if ($states) {
                foreach ($states as $v) {
                    $mstates[$v['d_value']] = $v['d_key'];
                }
            }
            if ($offer) {
                foreach ($offer as $v) {
                    $moffer[$v['oid']] = $v['code'];
                }
            }
            if ($levels) {
                foreach ($levels as $v) {
                    $mlevels[$v['d_value']] = $v['d_key'];
                }
            }
            if ($progress) {
                foreach ($progress as $v) {
                    $mprogress[$v['d_value']] = $v['d_key'];
                }
            }

            $config['params'][3]['values'] = $mtypes;
            $config['params'][4]['values'] = $mcustomer;
            $config['params'][9]['values'] = $mdept;
            $config['params'][8]['values'] = $mpm;
            $config['params'][10]['values'] = $msales;
            $config['params'][1]['values'] = $mstates;
            $config['params'][11]['values'] = $mlevels;
            $config['params'][20]['values'] = $mpm;
            $config['params'][22]['values'] = $mpm;
        }

        $this->setSearchConfig($config);
    }

    // 项目的搜索 : LGW
    public function projectSearch()
    {
        // 项目状态
        $states = M('dictionary')->where("d_code = 'project_state'")->field(true)->select(array('order' => 'd_order asc'));
        //项目类型
        $types = M('dictionary')->where("d_code = 'project_type'")->field(true)->select(array('order' => 'd_order asc'));
        //项目部门 - 项目归属
        $depts = M('Dept')->field(true)->select();
        $depts = D('Common/Tree')->toFormatTree1($depts);
        $depts = array_merge(array(0 => array('did' => 0, 'title_show' => '', 'grade' => 0)), $depts);
        //客户
        $customer = M('Customer')->field('cid,name')->where('enabled = 1')->select();
        // 服务类型
        $prop = D('ProjectConfig')->where('grade<5 and enabled =1')->select();
        $prop = D('Common/Tree')->toFormatTree($prop, 'name', 'pid', 'parentid');
        $prop = array_merge(array(
            0 => array(
                'pid' => '',
                'title_show' => '',
                'grade' => ''
            )
        ), $prop);
        //治疗领域
        $therapy_areas = M("Dictionary")->where("d_code='therapy_area'")->select(array('order' => 'd_order asc'));
        // 目标科室
        $departments = Project::department();

        $this->assign('prop', $prop);
        $this->assign('depts', $depts);
        $this->assign('states', $states);
        $this->assign('types', $types);
        $this->assign('customer', $customer);
        $this->assign('areas', $therapy_areas);
        $this->assign('departments', $departments);
        $c1 = " 1=1 ";
        $c2 = "";
        $c3 = "";
        $c4 = "";
        $c5 = "";
        $c6 = "";
        $c7 = "";
        $c8 = "";
        $c9 = " 1=1 ";
        $c10 = "";
        $c11 = "";
        $c12 = "";
        $c13 = "";
        $c14 = "";
        $c15 = "";
        $c16 = "";
        $c17 = "";
        $c18 = "";
        $c19 = "";

        $field1 = 'p.name';
        $field2 = 'p.state';
        $field3 = 'p.type';
        $field4 = 'p.orgid';
        $field5 = 'p.pm';
        $field6 = 'p.sale';
        $field7 = 'p.adviser';
        $field8 = 'tp.uname';
        $field9 = 'p.contract';
        $field10 = 'p.money';
        $field11 = 'p.cid';
        $field12 = 'p.path';
        $field13 = 'p.therapy_area';
        $field14 = 'p.department';
        $field15 = 'p.drug_name';
        $field16 = 'p.pstime';
        $field17 = 'p.petime';
        $field18 = 'p.stime';
        $field19 = 'p.etime';

        $value1 = I('get.name', '');  // 项目名称
        $value2 = I('get.state');     // 项目状态
        $value3 = I('get.type');      // 项目类型
        $value4 = I('get.orgid');    // 项目归属 - 项目部门
        $value5 = I('get.pmanager', ''); // 项目经理
        $value6 = I('get.cmanager', ''); // 客户经理
        $value7 = I('get.adviser', ''); // 顾问
        $value8 = I('get.uname', '');; // 项目成员
        $value9 = I('get.contract', ''); // 合同
        $value10 = I('get.money', ''); // 金额
        $value11 = I('get.cid', ''); // 客户
        $value12 = I('get.path', ''); //服务类型
        $value13 = I('get.therapy_area', '');   // 治疗领域 多选
        $value14 = I('get.department', '');   // 目标科室
        $value15 = I('get.drug_name', '');   // 药品

        $pstimeStart = I('get.pstime_start', ''); // 预计启动时间从
        $pstimeEnd = I('get.pstime_end', ''); // 预计启动时间至
        $petimeStart = I('get.petime_start', ''); // 预计结束时间至
        $petimeEnd = I('get.petime_end', ''); // 预计结束时间至
        $stimeStart = I('get.stime_start', ''); // 实际启动时间从
        $stimeEnd = I('get.stime_end', ''); // 实际启动时间至
        $etimeStart = I('get.etime_start', ''); // 实际启动时间至
        $etimeEnd = I('get.etime_end', ''); // 实际启动时间至

        $value1 and $c1 = " $field1 like '%{$value1}%' ";
        $value2 and $c2 = " and $field2=$value2";
        $value3 and $c3 = " and $field3='{$value3}'";
        $value4 and $c4 = " and $field4=$value4";
        $value5 and $c5 = "and ( $field5 like '%{$value5}%' 
       
        or EXISTS(  SELECT 1 FROM ot_ucenter_member m WHERE m.id=p.pmuid and ( m.email like '%{$value5}%' or m.username like '%{$value5}%' or m.mobile like '%{$value5}%') ) 
        ) ";
        $value6 and $c6 = "and (EXISTS(  SELECT 1 FROM ot_ucenter_member m LEFT JOIN ot_member me on m.id=me.uid WHERE m.id=$field6 and (me.nickname like  '%{$value6}%' or m.email like '%{$value6}%' or m.username like '%{$value6}%' or m.mobile like '%{$value6}%') ))";
        $value7 and $c7 = "and ($field7 like '%{$value7}%'  
        or EXISTS(  SELECT 1 FROM ot_ucenter_member m WHERE m.id=p.adviserid and (m.email like '%{$value7}%' or m.username like '%{$value7}%' or m.mobile like '%{$value7}%') ) 
        )";
        $value8 and $c8 = "and EXISTS( SELECT 1 FROM ot_takepart tp WHERE p.pid = tp.pid and $field8 like '%{$value8}%')";
        $value9 and $c9 = "$field9 like '%{$value9}%'";
        $value10 and $c10 = "and $field10<='{$value10}'";
        $value11 and $c11 = "and $field11=$value11";
        $value12 and $c12 = "and $field12 like '%{$value12}%'";
        if (is_array($value13) && !empty($value13)) {
            $c13 = "and( ";
            foreach ($value13 as $k => $v) {
                if ($k > 0) {
                    $c13 .= "or $field13 like '%{$v}%'";
                } else {
                    $c13 .= " $field13 like '%{$v}%'";

                }

            }
            $c13 .= ")";
        }
        $value14 and $c14 = "and $field14 like '%{$value14}%'";
        $value15 and $c15 = "and $field15 like '%{$value15}%'";
        if ($pstimeStart) {
            $start = strtotime($pstimeStart);
            $c16 .= " and $field16 >= '{$start}'";
        }
        if ($pstimeEnd) {
            $end = strtotime($pstimeEnd);
            $c16 .= " and $field16 <= '{$end}'";
        }
        if ($petimeStart) {
            $start = strtotime($petimeStart);
            $c17 .= " and $field17 >= '{$start}'";
        }
        if ($petimeEnd) {
            $end = strtotime($petimeEnd);
            $c17 .= " and $field17 <= '{$end}'";
        }
        if ($stimeStart) {
            $start = strtotime($stimeStart);
            $c18 .= " and $field18 >= '{$start}'";
        }
        if ($stimeEnd) {
            $end = strtotime($stimeEnd);
            $c18 .= " and $field18 <= '{$end}'";
        }
        if ($etimeStart) {
            $start = strtotime($etimeStart);
            $c19 .= " and $field19 >= '{$start}'";
        }
        if ($etimeEnd) {
            $end = strtotime($etimeEnd);
            $c19 .= "and $field19 <= '{$end}'";
        }
        $this->assign('calculate', calculateDate()); // 本周 本月 等
        $actionURL = strstr(__ACTION__, '/Admin');
        $this->assign('actionURL', $actionURL);

        $reset = I('get.reset');
        if ($reset == 1) {
            $c1 = " 1=1 ";
            $condition ['_string'] = "(( $c1))";
            return $condition;
        }
        $condition ['_string'] = "(($c1 $c2 $c3 $c4 $c5 $c6 $c7 $c8) and ($c9 $c10 $c11 $c12 $c13 $c14 $c15 $c16 $c17 $c18 $c19) )";
        if (is_array($value13) && !empty($value13)) {
            $value13 = implode(',', $value13);
        } else {
            $value13 = '';
        }
        $this->assign('value1', $value1);
        $this->assign('value2', $value2);
        $this->assign('value3', $value3);
        $this->assign('value4', $value4);
        $this->assign('value5', $value5);
        $this->assign('value5', $value5);
        $this->assign('value6', $value6);
        $this->assign('value7', $value7);
        $this->assign('value8', $value8);
        $this->assign('value9', $value9);
        $this->assign('value10', $value10);
        $this->assign('value11', $value11);
        $this->assign('value12', $value12);
        $this->assign('value13', $value13);
        $this->assign('value14', $value14);
        $this->assign('value15', $value15);
        $this->assign('pstimeStart', $pstimeStart);
        $this->assign('pstimeEnd', $pstimeEnd);
        $this->assign('petimeStart', $petimeStart);
        $this->assign('petimeEnd', $petimeEnd);
        $this->assign('stimeStart', $stimeStart);
        $this->assign('stimeEnd', $stimeEnd);
        $this->assign('etimeStart', $etimeStart);
        $this->assign('etimeEnd', $etimeEnd);
        $pstime = I('get.pstime');
        $petime = I('get.petime');
        $stime = I('get.stime');
        $etime = I('get.etime');
        $this->assign('pstime', $pstime);
        $this->assign('petime', $petime);
        $this->assign('stime', $stime);
        $this->assign('etime', $etime);
        $show = 0;
        $second = 0;
        if ($value1 || $value2 || $value3 || $value4 || $value5 || $value6 || $value7 || $value8 || $value9 || $value10 || $value11 || $value12 || $value13 || $value14 || $value15 || $pstimeStart || $pstimeEnd || $petimeStart || $petimeEnd || $stimeStart || $stimeEnd || $etimeStart || $etimeEnd) $show = 1;
        if ($value7 || $value8 || $value9 || $value10 || $value11 || $value12 || $value13 || $value14 || $value15 || $pstimeStart || $pstimeEnd || $petimeStart || $petimeEnd || $stimeStart || $stimeEnd || $etimeStart || $etimeEnd) $second = 1;
        $this->assign('show', $show);
        $this->assign('second', $second);

        return $condition;

    }

    /*所有项目 - 进行中*/
    public function index()
    {
        //更新排序
        if (isset($_GET['sort']) && isset($_GET['order'])) {
            $sort = strtolower(trim($_GET['sort']));
            $order = strtolower(trim($_GET['order']));
            if (!in_array($order, array('asc', 'desc'))) {
                $sort = 'p.addtime';
                $order = 'desc';
            }
        } else {
            $sort = 'p.addtime';
            $order = 'desc';
        }
        $advanced = I('get.advanced', 0); //切换高级搜索
        $show = I('get.show');

        if ($advanced == 1) {
            $this->advancedtSearch(); // 高级搜索
            $where = $this->getCondition(); //查询条件
            $this->assign('advanced', $advanced);
        } else {
            $where = $this->projectSearch(); //查询条件
            $this->assign('advanced', 0);
        }
        $show and $this->assign('show', $show);


        $re = strpos($where['_string'], 'p.state');
        if (!$re) {
            $where['_string'] .= " and (p.state=1 or p.state=4 or p.state=0)";
        }

        $where['_string'] .= " and (EXISTS(select 1 from ot_takepart tp where tp.pid = p.pid and tp.uid=" . UID . ")
			or EXISTS(select 1 from ot_task t where t.pid = p.pid and t.assigneduid=" . UID . ")) and p.del = 0 ";
        $count = $this->db
            ->distinct(true)
            ->alias('p')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
            ->join('ot_customer c on p.cid = c.cid', 'LEFT')
            ->join('ot_dept d on p.orgid = d.did', 'LEFT')
            ->join('ot_member m on p.sale = m.uid', 'LEFT')
            ->where($where)->count();
        $page = new \Think\Page($count, 20);
        $pro = $this->db
            ->distinct(true)
            ->field('p.*,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d.name dname,m.nickname mname')
            ->alias('p')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
            ->join('ot_customer c on p.cid = c.cid', 'LEFT')
            ->join('ot_dept d on p.orgid = d.did', 'LEFT')
            ->join('ot_member m on p.sale = m.uid', 'LEFT')
            ->where($where)
            ->order($sort . " " . $order)
            ->limit($page->firstRow . ',' . $page->listRows)
            ->select();
        if (I("get.exportexcel", "") == 1) {
            $pro = $this->db
                ->distinct(true)
                ->field('p.*,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d.name dname,m.nickname mname')
                ->alias('p')
                ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
                ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
                ->join('ot_customer c on p.cid = c.cid', 'LEFT')
                ->join('ot_dept d on p.orgid = d.did', 'LEFT')
                ->join('ot_member m on p.sale = m.uid', 'LEFT')
                ->where($where)
                ->order($sort . " " . $order)
                ->select();
            $this->export($pro);
        }

        foreach ($pro as $key => $vo) {
            if ($vo['money'] != '0.00') {
                $duty = round((float)$vo['amount'] / (float)$vo['money'] * 100);
                if ($duty > 100) {
                    $pro[$key]['duty'] = 100;
                } else {
                    $pro[$key]['duty'] = $duty;
                }
            } else {
                $pro[$key]['duty'] = 0;
            }
        }

        /*echo M()->getlastsql();*/
        $page->setConfig('theme', '%FIRST% %UP_PAGE% %LINK_PAGE% %DOWN_PAGE% %END% %HEADER%');
        $this->assign('_page', $page->show());
        $this->assign('_list', $pro);
        $this->assign('actname', ACTION_NAME);
        $this->assign('map', $where['_string']);
        $this->assign('map_order', $order);
        $this->assign('map_sort', $sort);
        $this->meta_title = '我参与的项目';

        $projectlog = $this->projectlog();

        $this->assign('projectlog', $projectlog);

        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => '我参与的项目-进行中', 'url' => '');
        $this->assign('root_mbx', $root_mbx);

        Cookie('__from_route__', '我参与的项目');
        Cookie('__from_url__', U('ProjectNew/index'));

        $this->display();
    }

    /*所有项目 - 已延期*/
    public function out()
    {
        //更新排序
        if (isset($_GET['sort']) && isset($_GET['order'])) {
            $sort = strtolower(trim($_GET['sort']));
            $order = strtolower(trim($_GET['order']));
            if (!in_array($order, array('asc', 'desc'))) {
                $sort = 'p.addtime';
                $order = 'desc';
            }
        } else {
            $sort = 'p.addtime';
            $order = 'desc';
        }
        $advanced = I('get.advanced', 0); //切换高级搜索
        $show = I('get.show');

        if ($advanced == 1) {
            $this->advancedtSearch(); // 高级搜索
            $where = $this->getCondition(); //查询条件
            $this->assign('advanced', $advanced);
        } else {
            $where = $this->projectSearch(); //查询条件
            $this->assign('advanced', 0);
        }
        $show and $this->assign('show', $show);


        $re = strpos($where['_string'], 'p.state');
        if (!$re) {
            $where['_string'] .= " and p.state=4 ";
        }
        $where['_string'] .= " and (EXISTS(select 1 from ot_takepart tp where tp.pid = p.pid and tp.uid=" . UID . ")
			or EXISTS(select 1 from ot_task t where t.pid = p.pid and t.assigneduid=" . UID . ")) and p.del = 0 ";
        $count = $this->db
            ->alias('p')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
            ->join('ot_customer c on p.cid = c.cid', 'LEFT')
            ->join('ot_dept d on p.orgid = d.did', 'LEFT')
            ->join('ot_member m on p.sale = m.uid', 'LEFT')
            ->where($where)->count();
        $page = new \Think\Page($count, 20);
        $pro = $this->db
            ->field('p.*,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d.name dname,m.nickname mname')
            ->alias('p')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
            ->join('ot_customer c on p.cid = c.cid', 'LEFT')
            ->join('ot_dept d on p.orgid = d.did', 'LEFT')
            ->join('ot_member m on p.sale = m.uid', 'LEFT')
            ->where($where)
            ->order($sort . " " . $order)
            ->limit($page->firstRow . ',' . $page->listRows)
            ->select();

        if (I("get.exportexcel", "") == 1) {
            $pro = $this->db
                ->distinct(true)
                ->field('p.*,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d.name dname,m.nickname mname')
                ->alias('p')
                ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
                ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
                ->join('ot_customer c on p.cid = c.cid', 'LEFT')
                ->join('ot_dept d on p.orgid = d.did', 'LEFT')
                ->join('ot_member m on p.sale = m.uid', 'LEFT')
                ->where($where)
                ->order($sort . " " . $order)
                ->select();
            $this->export($pro);
            exit();
        }

        foreach ($pro as $key => $vo) {
            if ($vo['money'] != '0.00') {
                $duty = round((float)$vo['amount'] / (float)$vo['money'] * 100);
                if ($duty > 100) {
                    $pro[$key]['duty'] = 100;
                } else {
                    $pro[$key]['duty'] = $duty;
                }
            } else {
                $pro[$key]['duty'] = 0;
            }
        }

        /*echo M()->getlastsql();*/
        $page->setConfig('theme', '%FIRST% %UP_PAGE% %LINK_PAGE% %DOWN_PAGE% %END% %HEADER%');
        $this->assign('_page', $page->show());
        $this->assign('_list', $pro);
        $this->assign('actname', ACTION_NAME);
        $this->meta_title = '我参与的项目';

        $projectlog = $this->projectlog();

        $this->assign('projectlog', $projectlog);

        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => '我参与的项目-已延期', 'url' => '');
        $this->assign('root_mbx', $root_mbx);

        Cookie('__from_route__', '我参与的项目');
        Cookie('__from_url__', U('ProjectNew/index'));

        $this->display('index');
    }

    /*所有项目 - 未开始*/
    public function nots()
    {
        //更新排序
        if (isset($_GET['sort']) && isset($_GET['order'])) {
            $sort = strtolower(trim($_GET['sort']));
            $order = strtolower(trim($_GET['order']));
            if (!in_array($order, array('asc', 'desc'))) {
                $sort = 'p.addtime';
                $order = 'desc';
            }
        } else {
            $sort = 'p.addtime';
            $order = 'desc';
        }
        $advanced = I('get.advanced', 0); //切换高级搜索
        $show = I('get.show');

        if ($advanced == 1) {
            $this->advancedtSearch(); // 高级搜索
            $where = $this->getCondition(); //查询条件
            $this->assign('advanced', $advanced);
        } else {
            $where = $this->projectSearch(); //查询条件
            $this->assign('advanced', 0);
        }
        $show and $this->assign('show', $show);


        $re = strpos($where['_string'], 'p.state');
        if (!$re) {
            $where['_string'] .= " and p.state=0 ";
        }

        $where['_string'] .= " and (EXISTS(select 1 from ot_takepart tp where tp.pid = p.pid and tp.uid=" . UID . ")
			or EXISTS(select 1 from ot_task t where t.pid = p.pid and t.assigneduid=" . UID . ")) and p.del = 0 ";
        $count = $this->db
            ->distinct(true)
            ->alias('p')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
            ->join('ot_customer c on p.cid = c.cid', 'LEFT')
            ->join('ot_dept d on p.orgid = d.did', 'LEFT')
            ->join('ot_member m on p.sale = m.uid', 'LEFT')
            ->where($where)->count();
        $page = new \Think\Page($count, 20);
        $pro = $this->db
            ->distinct(true)
            ->field('p.*,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d.name dname,m.nickname mname')
            ->alias('p')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
            ->join('ot_customer c on p.cid = c.cid', 'LEFT')
            ->join('ot_dept d on p.orgid = d.did', 'LEFT')
            ->join('ot_member m on p.sale = m.uid', 'LEFT')
            ->where($where)
            ->order($sort . " " . $order)
            ->limit($page->firstRow . ',' . $page->listRows)
            ->select();
        /*echo M()->getlastsql();*/
        if (I("get.exportexcel", "") == 1) {
            $pro = $this->db
                ->distinct(true)
                ->field('p.*,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d.name dname,m.nickname mname')
                ->alias('p')
                ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
                ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
                ->join('ot_customer c on p.cid = c.cid', 'LEFT')
                ->join('ot_dept d on p.orgid = d.did', 'LEFT')
                ->join('ot_member m on p.sale = m.uid', 'LEFT')
                ->where($where)
                ->order($sort . " " . $order)
                ->select();
            $this->export($pro);
            exit();
        }

        foreach ($pro as $key => $vo) {
            if ($vo['money'] != '0.00') {
                $duty = round((float)$vo['amount'] / (float)$vo['money'] * 100);
                if ($duty > 100) {
                    $pro[$key]['duty'] = 100;
                } else {
                    $pro[$key]['duty'] = $duty;
                }
            } else {
                $pro[$key]['duty'] = 0;
            }
        }
        $page->setConfig('theme', '%FIRST% %UP_PAGE% %LINK_PAGE% %DOWN_PAGE% %END% %HEADER%');
        $this->assign('_page', $page->show());
        $this->assign('_list', $pro);
        $this->assign('actname', ACTION_NAME);

        $this->meta_title = '我参与的项目';

        $projectlog = $this->projectlog();

        $this->assign('projectlog', $projectlog);

        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => '我参与的项目-未开始', 'url' => '');
        $this->assign('root_mbx', $root_mbx);

        Cookie('__from_route__', '我参与的项目');
        Cookie('__from_url__', U('ProjectNew/index'));

        $this->display('index');
    }

    /*所有项目 - 所有*/
    public function allindex()
    {
        //更新排序
        if (isset($_GET['sort']) && isset($_GET['order'])) {
            $sort = strtolower(trim($_GET['sort']));
            $order = strtolower(trim($_GET['order']));
            if (!in_array($order, array('asc', 'desc'))) {
                $sort = 'p.addtime';
                $order = 'desc';
            }
        } else {
            $sort = 'p.addtime';
            $order = 'desc';
        }
        $advanced = I('get.advanced', 0); //切换高级搜索
        $show = I('get.show');

        if ($advanced == 1) {
            $this->advancedtSearch(); // 高级搜索
            $where = $this->getCondition(); //查询条件
            $this->assign('advanced', $advanced);
        } else {
            $where = $this->projectSearch(); //查询条件
            $this->assign('advanced', 0);
        }
        $show and $this->assign('show', $show);

        $where['_string'] .= " and (EXISTS(select 1 from ot_takepart tp where tp.pid = p.pid and tp.uid=" . UID . ")
			or EXISTS(select 1 from ot_task t where t.pid = p.pid and t.assigneduid=" . UID . ")) and p.del = 0 ";
        $count = $this->db
            ->distinct(true)
            ->alias('p')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
            ->join('ot_customer c on p.cid = c.cid', 'LEFT')
            ->join('ot_dept d on p.orgid = d.did', 'LEFT')
            ->join('ot_member m on p.sale = m.uid', 'LEFT')
            ->where($where)->count();
        $page = new \Think\Page($count, 20);
        $pro = $this->db
            ->distinct(true)
            ->field('p.*,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d.name dname,m.nickname mname')
            ->alias('p')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
            ->join('ot_customer c on p.cid = c.cid', 'LEFT')
            ->join('ot_dept d on p.orgid = d.did', 'LEFT')
            ->join('ot_member m on p.sale = m.uid', 'LEFT')
            ->where($where)
            ->order($sort . " " . $order)
            ->limit($page->firstRow . ',' . $page->listRows)
            ->select();
        /*echo M()->getlastsql();*/
        if (I("get.exportexcel", "") == 1) {
            $pro = $this->db
                ->distinct(true)
                ->field('p.*,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d.name dname,m.nickname mname')
                ->alias('p')
                ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
                ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
                ->join('ot_customer c on p.cid = c.cid', 'LEFT')
                ->join('ot_dept d on p.orgid = d.did', 'LEFT')
                ->join('ot_member m on p.sale = m.uid', 'LEFT')
                ->where($where)
                ->order($sort . " " . $order)
                ->select();
            $this->export($pro);
            exit();
        }

        foreach ($pro as $key => $vo) {
            if ($vo['money'] != '0.00') {
                $duty = round((float)$vo['amount'] / (float)$vo['money'] * 100);
                if ($duty > 100) {
                    $pro[$key]['duty'] = 100;
                } else {
                    $pro[$key]['duty'] = $duty;
                }
            } else {
                $pro[$key]['duty'] = 0;
            }
        }
        $page->setConfig('theme', '%FIRST% %UP_PAGE% %LINK_PAGE% %DOWN_PAGE% %END% %HEADER%');
        $this->assign('_page', $page->show());
        $this->assign('_list', $pro);
        $this->assign('actname', ACTION_NAME);
        $this->meta_title = '我参与的项目';

        $projectlog = $this->projectlog();

        $this->assign('projectlog', $projectlog);

        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => '我参与的项目', 'url' => '');
        $this->assign('root_mbx', $root_mbx);

        Cookie('__from_route__', '我参与的项目');
        Cookie('__from_url__', U('ProjectNew/index'));

        $this->display('index');
    }

    /*所有项目 - 已暂停*/
    public function pause()
    {
        //更新排序
        if (isset($_GET['sort']) && isset($_GET['order'])) {
            $sort = strtolower(trim($_GET['sort']));
            $order = strtolower(trim($_GET['order']));
            if (!in_array($order, array('asc', 'desc'))) {
                $sort = 'p.addtime';
                $order = 'desc';
            }
        } else {
            $sort = 'p.addtime';
            $order = 'desc';
        }
        $advanced = I('get.advanced', 0); //切换高级搜索
        $show = I('get.show');

        if ($advanced == 1) {
            $this->advancedtSearch(); // 高级搜索
            $where = $this->getCondition(); //查询条件
            $this->assign('advanced', $advanced);
        } else {
            $where = $this->projectSearch(); //查询条件
            $this->assign('advanced', 0);
        }
        $show and $this->assign('show', $show);

        $re = strpos($where['_string'], 'p.state');
        if (!$re) {
            $where['_string'] .= " and p.state=3";
        }
        $where['_string'] .= " and (EXISTS(select 1 from ot_takepart tp where tp.pid = p.pid and tp.uid=" . UID . ")
			or EXISTS(select 1 from ot_task t where t.pid = p.pid and t.assigneduid=" . UID . ")) and p.del = 0 ";
        $count = $this->db
            ->distinct(true)
            ->alias('p')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
            ->join('ot_customer c on p.cid = c.cid', 'LEFT')
            ->join('ot_dept d on p.orgid = d.did', 'LEFT')
            ->join('ot_member m on p.sale = m.uid', 'LEFT')
            ->where($where)->count();
        $page = new \Think\Page($count, 20);
        $pro = $this->db
            ->distinct(true)
            ->field('p.*,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d.name dname,m.nickname mname')
            ->alias('p')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
            ->join('ot_customer c on p.cid = c.cid', 'LEFT')
            ->join('ot_dept d on p.orgid = d.did', 'LEFT')
            ->join('ot_member m on p.sale = m.uid', 'LEFT')
            ->where($where)
            ->order($sort . " " . $order)
            ->limit($page->firstRow . ',' . $page->listRows)
            ->select();
        if (I("get.exportexcel", "") == 1) {
            $pro = $this->db
                ->distinct(true)
                ->field('p.*,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d.name dname,m.nickname mname')
                ->alias('p')
                ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
                ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
                ->join('ot_customer c on p.cid = c.cid', 'LEFT')
                ->join('ot_dept d on p.orgid = d.did', 'LEFT')
                ->join('ot_member m on p.sale = m.uid', 'LEFT')
                ->where($where)
                ->order($sort . " " . $order)
                ->select();
            $this->export($pro);
            exit();
        }

        foreach ($pro as $key => $vo) {
            if ($vo['money'] != '0.00') {
                $duty = round((float)$vo['amount'] / (float)$vo['money'] * 100);
                if ($duty > 100) {
                    $pro[$key]['duty'] = 100;
                } else {
                    $pro[$key]['duty'] = $duty;
                }
            } else {
                $pro[$key]['duty'] = 0;
            }
        }
        /*echo M()->getlastsql();*/
        $page->setConfig('theme', '%FIRST% %UP_PAGE% %LINK_PAGE% %DOWN_PAGE% %END% %HEADER%');
        $this->assign('_page', $page->show());
        $this->assign('_list', $pro);
        $this->assign('actname', ACTION_NAME);
        $this->meta_title = '我参与的项目';

        $projectlog = $this->projectlog();

        $this->assign('projectlog', $projectlog);

        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => '我参与的项目-已暂停', 'url' => '');
        $this->assign('root_mbx', $root_mbx);

        Cookie('__from_route__', '我参与的项目');
        Cookie('__from_url__', U('ProjectNew/index'));
        $this->display('index');
    }

    /*所有项目 - 已完成*/
    public function finished()
    {
        //更新排序
        if (isset($_GET['sort']) && isset($_GET['order'])) {
            $sort = strtolower(trim($_GET['sort']));
            $order = strtolower(trim($_GET['order']));
            if (!in_array($order, array('asc', 'desc'))) {
                $sort = 'p.addtime';
                $order = 'desc';
            }
        } else {
            $sort = 'p.addtime';
            $order = 'desc';
        }
        $advanced = I('get.advanced', 0); //切换高级搜索
        $show = I('get.show');

        if ($advanced == 1) {
            $this->advancedtSearch(); // 高级搜索
            $where = $this->getCondition(); //查询条件
            $this->assign('advanced', $advanced);
        } else {
            $where = $this->projectSearch(); //查询条件
            $this->assign('advanced', 0);
        }
        $show and $this->assign('show', $show);

        $re = strpos($where['_string'], 'p.state');
        if (!$re) {
            $where['_string'] .= " and p.state=2";
        }
        $where['_string'] .= " and (EXISTS(select 1 from ot_takepart tp where tp.pid = p.pid and tp.uid=" . UID . ")
			or EXISTS(select 1 from ot_task t where t.pid = p.pid and t.assigneduid=" . UID . ")) and p.del = 0 ";
        $count = $this->db
            ->distinct(true)
            ->alias('p')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
            ->join('ot_customer c on p.cid = c.cid', 'LEFT')
            ->join('ot_dept d on p.orgid = d.did', 'LEFT')
            ->join('ot_member m on p.sale = m.uid', 'LEFT')
            ->where($where)->count();
        $page = new \Think\Page($count, 20);
        $pro = $this->db
            ->distinct(true)
            ->field('p.*,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d.name dname,m.nickname mname')
            ->alias('p')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
            ->join('ot_customer c on p.cid = c.cid', 'LEFT')
            ->join('ot_dept d on p.orgid = d.did', 'LEFT')
            ->join('ot_member m on p.sale = m.uid', 'LEFT')
            ->where($where)
            ->order($sort . " " . $order)
            ->limit($page->firstRow . ',' . $page->listRows)
            ->select();
        if (I("get.exportexcel", "") == 1) {
            $pro = $this->db
                ->distinct(true)
                ->field('p.*,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d.name dname,m.nickname mname')
                ->alias('p')
                ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
                ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
                ->join('ot_customer c on p.cid = c.cid', 'LEFT')
                ->join('ot_dept d on p.orgid = d.did', 'LEFT')
                ->join('ot_member m on p.sale = m.uid', 'LEFT')
                ->where($where)
                ->order($sort . " " . $order)
                ->select();
            $this->export($pro);
            exit();
        }

        foreach ($pro as $key => $vo) {
            if ($vo['money'] != '0.00') {
                $duty = round((float)$vo['amount'] / (float)$vo['money'] * 100);
                if ($duty > 100) {
                    $pro[$key]['duty'] = 100;
                } else {
                    $pro[$key]['duty'] = $duty;
                }
            } else {
                $pro[$key]['duty'] = 0;
            }
        }
        /*echo M()->getlastsql();*/
        $page->setConfig('theme', '%FIRST% %UP_PAGE% %LINK_PAGE% %DOWN_PAGE% %END% %HEADER%');
        $this->assign('_page', $page->show());
        $this->assign('_list', $pro);
        $this->assign('actname', ACTION_NAME);
        $this->meta_title = '我参与的项目';

        $projectlog = $this->projectlog();

        $this->assign('projectlog', $projectlog);

        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => '我参与的项目-已完成', 'url' => '');
        $this->assign('root_mbx', $root_mbx);

        Cookie('__from_route__', '我参与的项目');
        Cookie('__from_url__', U('ProjectNew/index'));
        $this->display('index');
    }

    /*所有项目 - 已关闭*/
    public function closed()
    {
        //更新排序
        if (isset($_GET['sort']) && isset($_GET['order'])) {
            $sort = strtolower(trim($_GET['sort']));
            $order = strtolower(trim($_GET['order']));
            if (!in_array($order, array('asc', 'desc'))) {
                $sort = 'p.addtime';
                $order = 'desc';
            }
        } else {
            $sort = 'p.addtime';
            $order = 'desc';
        }
        $advanced = I('get.advanced', 0); //切换高级搜索
        $show = I('get.show');

        if ($advanced == 1) {
            $this->advancedtSearch(); // 高级搜索
            $where = $this->getCondition(); //查询条件
            $this->assign('advanced', $advanced);
        } else {
            $where = $this->projectSearch(); //查询条件
            $this->assign('advanced', 0);
        }
        $show and $this->assign('show', $show);

        $re = strpos($where['_string'], 'p.state');
        if (!$re) {
            $where['_string'] .= " and p.state=-1";
        }
        $where['_string'] .= " and (EXISTS(select 1 from ot_takepart tp where tp.pid = p.pid and tp.uid=" . UID . ")
			or EXISTS(select 1 from ot_task t where t.pid = p.pid and t.assigneduid=" . UID . ")) and p.del = 0 ";
        $count = $this->db
            ->distinct(true)
            ->alias('p')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
            ->join('ot_customer c on p.cid = c.cid', 'LEFT')
            ->join('ot_dept d on p.orgid = d.did', 'LEFT')
            ->join('ot_member m on p.sale = m.uid', 'LEFT')
            ->where($where)->count();
        $page = new \Think\Page($count, 20);
        $pro = $this->db
            ->distinct(true)
            ->field('p.*,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d.name dname,m.nickname mname')
            ->alias('p')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
            ->join('ot_customer c on p.cid = c.cid', 'LEFT')
            ->join('ot_dept d on p.orgid = d.did', 'LEFT')
            ->join('ot_member m on p.sale = m.uid', 'LEFT')
            ->where($where)
            ->order($sort . " " . $order)
            ->limit($page->firstRow . ',' . $page->listRows)
            ->select();
        if (I("get.exportexcel", "") == 1) {
            $pro = $this->db
                ->distinct(true)
                ->field('p.*,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d.name dname,m.nickname mname')
                ->alias('p')
                ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
                ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
                ->join('ot_customer c on p.cid = c.cid', 'LEFT')
                ->join('ot_dept d on p.orgid = d.did', 'LEFT')
                ->join('ot_member m on p.sale = m.uid', 'LEFT')
                ->where($where)
                ->order($sort . " " . $order)
                ->select();
            $this->export($pro);
            exit();
        }

        foreach ($pro as $key => $vo) {
            if ($vo['money'] != '0.00') {
                $duty = round((float)$vo['amount'] / (float)$vo['money'] * 100);
                if ($duty > 100) {
                    $pro[$key]['duty'] = 100;
                } else {
                    $pro[$key]['duty'] = $duty;
                }
            } else {
                $pro[$key]['duty'] = 0;
            }
        }
        /*echo M()->getlastsql();*/
        $page->setConfig('theme', '%FIRST% %UP_PAGE% %LINK_PAGE% %DOWN_PAGE% %END% %HEADER%');
        $this->assign('_page', $page->show());
        $this->assign('_list', $pro);
        $this->assign('actname', ACTION_NAME);
        $this->meta_title = '我参与的项目';

        $projectlog = $this->projectlog();

        $this->assign('projectlog', $projectlog);

        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => '我参与的项目-已关闭', 'url' => '');
        $this->assign('root_mbx', $root_mbx);

        Cookie('__from_route__', '我参与的项目');
        Cookie('__from_url__', U('ProjectNew/index'));
        $this->display('index');
    }

    function suc($message, $url1, $url2, $url3, $url4, $url5)
    {
        $this->assign('message', $message);// 提示信息
        // 成功操作后默认停留1秒
        $this->assign('waitSecond', '1');

        if (!empty($url1)) $this->assign('jumpUrl1', $url1);
        if (!empty($url2)) $this->assign('jumpUrl2', $url2);
        if (!empty($url3)) $this->assign('jumpUrl3', $url3);
        if (!empty($url4)) $this->assign('jumpUrl4', $url4);
        if (!empty($url5)) $this->assign('jumpUrl5', $url5);

        $this->display("suc");
    }

    /**
     * 合同生成项目
     */
    public function add()
    {
        if (IS_POST) {
            //获取表单数据
            $data = $_POST;
            // 获取报检编码并判断是不是唯一
            if (empty ($_POST ['name'])) {
                $this->error('请填写项目名称，不能为空');
            }
            /*$res = $this->db->where("name = '" . $data['name'] . "'")->find();
			if ($res) {
			$this->error('项目名称已存在！');
			}*/
            if (empty ($_POST ['type'])) {
                $this->error('请选择项目类型');
            }
            $type = M('dictionary')->where("d_code='project_type' and d_value ='{$data['type']}'")->find();
            $code = get_rand_code($this->db, $type['d_assist']);
            if (empty ($_POST ['orgid'])) {
                //$this->error('请选择项目部门');
            }
            if (empty ($_POST ['pmuid'])) {
                $this->error('请选择项目经理');
            }
            $pstime = strtotime($data['pstime']);
            $petime = strtotime($data['petime']);
            if (empty ($pstime)) {
                $this->error('计划开始时间不能为空');
            }
            if (empty ($_POST ['money'])) {
                $this->error('项目金额不能为空');
            }
            if (empty ($petime)) {
                $this->error('计划结束时间不能为空');
            }
            if ($petime < $pstime) {
                $this->error('结束时间必须大于开始时间');
            }
            $contract = $data['contract'];
            if (is_array($contract) && !empty($contract)) {
                $contract = implode(',', $contract);
            } else {
                $contract = '';
            }
            //治疗领域
            $therapy_area = $data['therapy_area'];
            if (is_array($therapy_area) && !empty($therapy_area)) {
                $therapy_area = implode(',', $therapy_area);
            } else {
                $therapy_area = '';
            }
            $oid = $_POST ['oid'];
            if ($oid) {
                $offer = M('offer')->where("oid ='{$oid}'")->find();
                if ($offer && $offer['pid']) {
                    $this->error('报价单已经关联到了其他项目,请重新选择。');
                }
            }
            $version = str_replace('，', ',', trim($data['version']));
            $cid = $data['cid'];
            $pmuid = $data['pmuid'];
            $sale = $data['sale'];
            $uid = UID;
            $pm = $data['pm'];
            $salename = $data['salename'];
            $livetime = strtotime($data['livetime']);
            $adviserid = $data['adviser'];
            $adviser = get_nickname($adviserid);

            $u = M('member')->where("uid ='{$pmuid}'")->find();
            $data['orgid'] = $u['dept'];

            $data1 = array(
                'name' => $data['name'],
                'code' => $code,
                'level' => $data['level'],
                'type' => $data['type'],
                'oid' => $oid,
                'cid' => $cid,
                'money' => $data['money'],
                'orgid' => $data['depts'],
                'pmuid' => $pmuid,
                'pm' => get_nickname($pmuid) ? get_nickname($pmuid) : get_username($pmuid),
                'contract' => $contract,
                'sale' => $sale,
                'adviser' => $adviser,
                'adviserid' => $adviserid,
                'pstime' => $pstime,
                'petime' => $petime,
                'description' => $data['description'],
                'feedback' => $data['feedback'],
                'risk' => $data['risk'],
                'chance' => empty($data['chance']) ? '' : $data['chance'],
                'promotion' => $data['promotion'],
                'livetime' => strtotime($data['livetime']),
                'addtime' => time(),
                'uid' => UID,
                'uname' => get_nickname(UID) ? get_nickname(UID) : get_username(UID),
                'therapy_area' => $therapy_area,
                'drug_name' => $data['drug_name'],
                'version' => $version
            );
            $Model = M(); // 实例化一个空对象
            $Model->startTrans(); // 开启事务

            $pid = $this->db->add($data1);
            $tmp1 = true;
            $tmp2 = true;
            $tmp3 = true;

            if ($pid) {
                action_log_new(array(
                    'outtype' => 'ot_project',
                    'outkey' => $pid,
                    'pid' => $pid,
                    'action' => 'create',
                    'comment' => ''
                ));
                $a = 1;
                if ($oid) {
                    //获取报价单详情并导入项目任务表
                    $sql = "insert into ot_project_service (quans,pcid,groupid,mid,sid,title,days,description,sort_order,osid,hours,amount,lastedituid,lastedituname,lastedittime,pid,delivery)
select os.quantity,os.pid,os.groupid,os.mid,os.sid,os.name,os.days,os.attention,os.osid,os.osid,s.hour*os.quantity,if(f.disoff>0,os.amount*f.disoff/100,os.amount) ," . UID . ",'" . get_nickname(UID) . "'," . time() . "," . $pid . "," . $a . " from
ot_offer_sub os left join  ot_offer f on f.oid = os.oid left join  ot_service s on s.sid = os.sid where os.oid = " . $oid;
                    $tmp3 = M()->execute($sql);

                    $data2 = array();
                    $data2['pid'] = $pid;

                    M('Offer')->where('oid = ' . $oid)->save($data2);
                }
                $accessories = array_filter($_FILES['files']['tmp_name']);
                if (!empty($accessories)) {
                    $file_ids = $this->file_uplode();
                    if (!empty($file_ids)) {
                        $sql = 'insert into ot_doc (pid,fileid,dtid,note,addtime,uid,uname,edittime,edituid,edituname) values ';
                        foreach ($file_ids as $key => $vo) {
                            $dtid = $_POST['dtid'][$key];
                            $note = $_POST['contents'][$key];
                            $addtime = time();
                            $uid = UID;
                            $uname = get_nickname(UID) ? get_nickname(UID) : get_username(UID);
                            $sql .= "($pid,$vo,$dtid,'" . $note . "',$addtime,$uid,'" . $uname . "',$addtime,$uid,'" . $uname . "'),";
                        }
                        $sql = substr($sql, 0, -1);
                        $tmp2 = $Model->execute($sql);
                    }
                }
                $uanme = get_nickname(UID) ? get_nickname(UID) : get_username(UID);
                $roleid1 = M('ProjectRole')->where("name='项目经理'")->getfield('prid');
                $roleid2 = M('ProjectRole')->where("name='销售'")->getfield('prid');
                $roleid3 = M('ProjectRole')->where("name='项目创建人'")->getfield('prid');
                $takep = array(
                    0 => array(
                        'pid' => $pid,
                        'uid' => $pmuid,
                        'uname' => $pm,
                        'addtime' => time(),
                        'adduid' => $uid,
                        'adduname' => $uanme,
                        'roleid' => $roleid1,
                    ),
                    1 => array(
                        'pid' => $pid,
                        'uid' => $sale,
                        'uname' => $salename,
                        'addtime' => time(),
                        'adduid' => $uid,
                        'adduname' => $uanme,
                        'roleid' => $roleid2,
                    ),
                    2 => array(
                        'pid' => $pid,
                        'uid' => $uid,
                        'uname' => $uanme,
                        'addtime' => time(),
                        'adduid' => $uid,
                        'adduname' => $uanme,
                        'roleid' => $roleid3,
                    )
                );
                if ($adviser) {
                    $roleid4 = M('ProjectRole')->where("name='咨询顾问'")->getfield('prid');
                    $takep[] = array(
                        'pid' => $pid, 'uid' => $adviserid, 'uname' => $adviser, 'addtime' => time(),
                        'adduid' => $uid, 'adduname' => $uanme, 'roleid' => $roleid4,
                    );
                }
                foreach ($takep as $vo) {
                    if (!empty($vo['uid']) && $vo != '') {
                        M('Takepart')->add($vo);
                    }
                }


                $milestione = array(
                    0 => array(
                        'name' => '项目开始',
                        'mtime' => $pstime,
                        'addtime' => time(),
                        'uid' => UID,
                        'uname' => $uanme,
                        'pid' => $pid,
                    ),
                    1 => array(
                        'name' => '项目完成',
                        'mtime' => $petime,
                        'addtime' => time(),
                        'uid' => UID,
                        'uname' => $uanme,
                        'pid' => $pid,
                    ),
                );
                if ($livetime) {
                    $milestione[] = array(
                        'name' => '项目上线',
                        'mtime' => $livetime,
                        'addtime' => time(),
                        'uid' => UID,
                        'uname' => $uanme,
                        'pid' => $pid,
                    );
                }
                foreach ($milestione as $vo) {
                    $nid = M('Milestone')->add($vo);
                    M()->execute("update ot_milestone set sort_order = mid  where mid = {$nid}");

                }
            }
            if (!empty($pid) && !empty($tmp1) && !empty($tmp2) && !empty($tmp3)) {
                //更新项目path字段
                changeProjectPath($pid);
                $Model->commit(); // 成功则提交事务
                $this->suc("项目创建成功，您现在可以进行以下操作：", U('ProjectNewFromMe/index'), U("ProjectNew/service?id=" . $pid), U("ProjectNew/takepart?id=" . $pid), U("ProjectNew/budget?id=" . $pid), U("ProjectNew/view?id=" . $pid));
            } else {
                $Model->rollback(); // 否则将事务回滚
                $this->error('添加失败！');
            }

        } else {
            $cost['email'] = get_email(UID);  //  LGW
            // 合同
            $contract = apiRead(Api::CONTRACT, Api::DXY_CRM, $cost);
            $contracts = [];
            if ($contract['success']) {
                foreach ($contract['data'] as $k => $v) {
                    $v['contract_no'] and $contracts[$k] = $v;
                }

            }
            $this->assign('contracts', $contracts);
            $this->assign('uid', UID);
            $uanme = get_nickname(UID) ? get_nickname(UID) : get_username(UID);
            $this->assign('uanme', $uanme);

            //项目类型
            $types = M('dictionary')->where("d_code = 'project_type'")->field(true)->select(array('order' => 'd_order asc'));
            $this->assign('types', $types);
            //优先级
            $levels = M('dictionary')->where("d_code = 'level'")->field(true)->select(array('order' => 'd_order asc'));
            $this->assign('levels', $levels);
            //报价单
            $offer = D('Offer')->alias('o')
                ->field('o.oid,o.code,o.chance,o.projectname,c.shortsign')
                ->join('ot_customer c on c.cid = o.cid ', 'left')
                ->where(' o.pid = 0 and static = 3')
                ->select();
            if (is_array($offer) && !empty($offer)) {
                foreach ($offer as $key => $vo) {
                    if ($vo['shortsign']) {
                        $offer[$key]['code'] = $vo['shortsign'] . '-' . $vo['code'] . '-' . $vo['projectname'];
                    } else {
                        $offer[$key]['code'] = $vo['code'] . '-' . $vo['projectname'];
                    }

                }
            }

            $this->assign('offer', $offer);
            //客户
            $customer = M('Customer')->field('cid,name')->where('enabled = 1')->select();
            $this->assign('customer', $customer);
            /*//项目状态
		 $states = M('dictionary')->where("d_code = 'project_state'")->field(true)->select();
		 $this->assign('states', $states);*/

            //项目部门
            $depts = M('Dept')->field(true)->select();
            $depts = D('Common/Tree')->toFormatTree1($depts);
            $this->assign('dept', $depts);
            //项目经理
            $pm = M('Member')->field('uid,nickname')->where('status = 1')->select();
            $this->assign('pm', $pm);
            //销售
            $sales = M('Member')->field('uid,nickname')->where('status = 1')->select();
            $this->assign('sales', $sales);
            //顾问
            $adviser = M('Member')->field('uid,nickname')->where('status = 1')->select();
            $this->assign('advisers', $adviser);
            //文档类型
            $doc_type = M('DocType')->field('dtid,name')->order('sort_order asc')->select();
            $this->assign('doc_type', $doc_type);
            $time = time_format(time(), 'Y/m/d');
            $this->assign('time', $time);
            //治疗领域
            $therapy_areas = M("Dictionary")->where("d_code='therapy_area'")->select(array('order' => 'd_order asc'));
            $this->assign('therapy_areas', $therapy_areas);
            $this->meta_title = '添加项目';

            $root_mbx = array();
            $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
            $root_mbx[] = array('title' => '我管理的项目', 'url' => U('ProjectNewFromMe/index'));
            $root_mbx[] = array('title' => '创建项目', 'url' => '');
            $this->assign('root_mbx', $root_mbx);

            $this->display();
        }
    }

    /**
     * 无合同生成项目
     */
    /*public function add1() {
	  if (IS_POST) {
	  //获取表单数据
	  $data = $this->db->create();

	  // 获取报检编码并判断是不是唯一
	  if (empty ($_POST ['name'])) {
	  $this->error('项目名称不能为空');
	  }
	  $res = $this->db->where("name = '" . $data['name'] . "'")->find();
	  if ($res) {
	  $this->error('项目名称已存在！');
	  }
	  $type = M('dictionary')->where('d_value ='.$data['type'])->find();
	  $code = get_rand_code($this->db,$type);

	  if (empty ($_POST ['type'])) {
	  $this->error('请选择项目类型');
	  }
	  if (empty ($_POST ['orgid'])) {
	  $this->error('请选择项目部门');
	  }
	  if (empty ($_POST ['pmuid'])) {
	  $this->error('请选择项目经理');
	  }
	  $pstime = strtotime($data['pstime']);
	  $petime = strtotime($data['petime']);
	  if (empty ($pstime)) {
	  $this->error('计划开始时间不能为空');
	  }
	  if (empty ($petime)) {
	  $this->error('计划结束时间不能为空');
	  }
	  if ($petime < $pstime) {
	  $this->error('结束时间必须大于开始时间');
	  }
	  $oid = $_POST ['oid'];
	  $cid = $data['cid'];
	  $pmuid = $data['pmuid'];
	  $sale = $data['sale'];
	  $uid = UID;
	  $pm = $data['pm'];
	  $salename = $data['salename'];
	  $livetime = strtotime($data['livetime']);
	  $adviserid= $data['adviser'];
	  $adviser = get_nickname($adviserid);

	  $data1 = array(
	  'name' => $data['name'],
	  'code' => $code,
	  'level' => $data['level'],
	  'type' => $data['type'],
	  'oid' => $oid,
	  'cid' => $cid,
	  'money' => $data['money'],
	  'orgid' => $data['orgid'],
	  'pmuid' => $pmuid,
	  'pm' => $data['pm'],
	  'sale' => $sale,
	  'adviser' => $adviser,
	  'adviserid' => $adviserid,
	  'name' => $data['name'],
	  'pstime' => $pstime,
	  'petime' => $petime,
	  'description' => $data['description'],
	  'feedback' => $data['feedback'],
	  'risk' => $data['risk'],
	  'chance' => $data['chance'],
	  'promotion' => $data['promotion'],
	  'livetime' => strtotime($data['livetime']),
	  'addtime' => time(),
	  'uid' => UID,
	  'uname' => get_nickname(UID) ? get_nickname(UID) : get_username(UID),
	  );



	  $Model = M(); // 实例化一个空对象
	  $Model->startTrans(); // 开启事务

	  $pid = $this->db->add($data1);


	  $tmp1 = true;
	  $tmp2 = true;
	  $tmp3 = true;
	  if ($pid) {
	  action_log_new(array(
	  'outtype' => 'ot_project',
	  'outkey' => $pid,
	  'pid' => $pid,
	  'action' => 'create',
	  'comment' => ''
	  ));
	  if ($oid) {
	  //获取报价单详情并导入项目任务表
	  $sql = "insert into ot_project_service (pcid,groupid,mid,sid,title,days,description,sort_order,hours,lastedituid,lastedituname,lastedittime,pid)
	  select os.pid,os.groupid,os.mid,os.sid,os.name,os.days,os.attention,s.sort_order,s.hour,".UID.",'".get_nickname(UID)."',".time().",".$pid." from ot_offer_sub os left join  ot_service s on s.sid = os.sid where oid = ".$oid;
	  $tmp3 = M()->execute($sql);
	  $data2 =array();
	  $data2['pid'] = $pid;
	  M('Offer')->where('oid = '.$oid)->save($data2);
	  }
	  if (!empty($_FILES['files']['tmp_name'][0])) {
	  $file_ids = $this->file_uplode();
	  if (!empty($file_ids)) {
	  $sql = 'insert into ot_doc (pid,fileid,dtid,note,addtime,uid,uname,edittime,edituid,edituname) values ';
	  foreach ($file_ids as $key => $vo) {
	  $dtid = $_POST['dtid'][$key];
	  $note = $_POST['contents'][$key];
	  $addtime = time();
	  $uid = UID;
	  $uname = get_username(is_login());
	  $sql .= "($pid,$vo,$dtid,'" . $note . "',$addtime,$uid,'" . $uname . "',$addtime,$uid,'" . $uname . "'),";
	  }
	  $sql = substr($sql, 0, -1);
	  $tmp2 = $Model->execute($sql);
	  }
	  }
	  $uanme = get_nickname(UID) ? get_nickname(UID) : get_username(UID);
	  $takep = array(
	  0 => array(
	  'pid' => $pid,
	  'uid' => $pmuid,
	  'uname' => $pm,
	  'addtime' => time(),
	  'adduid' => $uid,
	  'adduname' => $uanme,
	  'roleid' => 2,
	  ),
	  1 => array(
	  'pid' => $pid,
	  'uid' => $sale,
	  'uname' => $salename,
	  'addtime' => time(),
	  'adduid' => $uid,
	  'adduname' => $uanme,
	  'roleid' => 19,
	  ),
	  2 => array(
	  'pid' => $pid,
	  'uid' => $uid,
	  'uname' => $uanme,
	  'addtime' => time(),
	  'adduid' => $uid,
	  'adduname' => $uanme,
	  'roleid' => 20,
	  )
	  );
	  foreach ($takep as $vo) {
	  if (!empty($vo['uid']) && $vo != '') {
	  M('Takepart')->add($vo);
	  }
	  }
	  $milestione = array(
	  0 => array(
	  'name' => '项目开始',
	  'mtime' => $pstime,
	  'addtime' => time(),
	  'uid' => UID,
	  'uname' => $uanme,
	  'pid' => $pid,
	  ),
	  1 => array(
	  'name' => '项目完成',
	  'mtime' => $petime,
	  'addtime' => time(),
	  'uid' => UID,
	  'uname' => $uanme,
	  'pid' => $pid,
	  ),
	  );
	  if ($livetime) {
	  $milestione[2] = array(
	  'name' => '项目上线',
	  'mtime' => $livetime,
	  'addtime' => time(),
	  'uid' => UID,
	  'uname' => $uanme,
	  'pid' => $pid,
	  );
	  }
	  foreach ($milestione as $vo) {
	  M('Milestone')->add($vo);
	  }
	  }

	  if (!empty($pid) && !empty($tmp1) && !empty($tmp2) && !empty($tmp3)) {
	  $Model->commit(); // 成功则提交事务
	  $this->redirect ( 'ProjectNewFromMe/index' );
	  } else {
	  $Model->rollback(); // 否则将事务回滚
	  $this->error('添加失败！');
	  }

	  } else {
	  //合同号
	  $contract = array(
	  1 => 'QE123456',
	  2 => 'QR123456',
	  3 => 'QT123456',
	  4 => 'QV123456',
	  5 => 'QW123456'
	  );
	  $this->assign('contracts', $contract);
	  //项目类型
	  $types = M('dictionary')->where("d_code = 'project_type'")->field(true)->select(array('order' => 'd_order asc'));
	  $this->assign('types', $types);
	  //优先级
	  $levels = M('dictionary')->where("d_code = 'level'")->field(true)->select(array('order' => 'd_order asc'));
	  $this->assign('levels', $levels);
	  //报价单
	  $offer = D('Offer')->alias('o')
	  ->field('o.oid,o.code,o.chance,o.projectname,c.shortsign')
	  ->join('ot_customer c on c.cid = o.cid ', 'left')
	  ->where(' o.pid = 0 and static = 3')
	  ->select();
	  if (is_array($offer) && !empty($offer)) {
	  foreach ($offer as $key => $vo) {
	  $offer[$key]['code'] = $vo['shortsign'] . '-' . $vo['code'] . '-' . $vo['projectname'];
	  }
	  }

	  $this->assign('offer', $offer);
	  //客户
	  $customer = M('Customer')->field('cid,name')->where('enabled = 1')->select();
	  $this->assign('customer', $customer);
	  //项目部门
	  $depts = M('Dept')->field(true)->select();
	  $depts = D('Common/Tree')->toFormatTree1($depts);
	  $this->assign('dept', $depts);
	  //项目经理
	  $pm = M('Member')->field('uid,nickname')->select();
	  $this->assign('pm', $pm);
	  //销售
	  $sales = M('Member')->field('uid,nickname')->select();
	  $this->assign('sales', $sales);
	  //顾问
	  $adviser = M('Member')->field('uid,nickname')->select();
	  $this->assign('advisers', $adviser);
	  //文档类型
	  $doc_type = M('
    ')->field('dtid,name')->select();
	  $this->assign('doc_type', $doc_type);
	  $time = time_format(time(), 'Y/m/d');
	  $this->assign('time', $time);

	  $this->meta_title = '添加项目';
	  $this->display();
	  }
	  }*/

    // 验证计划开始时间和计划结束时间
    public function checkPtime()
    {
        $pid = I('get.pid');
        $map['pid'] = $pid;
        $pstime = I('get.pstime', 0);
        $petime = I('get.petime', 0);
        $task = M('task')->field('pstime,petime')
            ->where($map)
            ->select();
        $projectService = M('Project_service')->field('pstime,petime')
            ->where($map)
            ->select();
        // 合并任务和项目服务表里的数据
        $merge = array_merge($task, $projectService);

        $pstimes = array_column($merge, 'pstime');
        $petimes = array_column($merge, 'petime');
        $pstimeMin = min($pstimes);     // 最小的开始时间
        $petimeMax = max($petimes);     // 最大的结束时间
        $msg = '';
        // 如果存在(任务的最小开始时间) 则项目计划开始时间不能大于任务的最小开始时间
        if (!empty($pstimes) && $pstimeMin) {
            if (strtotime($pstime) > $pstimeMin) {
                $pstimeMin = date('Y/m/d', $pstimeMin);
                $msg['pstime'] = "任务清单的排期从" . $pstimeMin . "开始，" . $pstime . "已超出范围，请重新设置计划开始时间";
            }
        }
        // 如果存在(任务的最小结束时间) 则项目计划结束时间不能小于任务的最大结束时间
        if (!empty($petimes) && $petimeMax) {
            if (strtotime($petime) < $petimeMax) {
                $petimeMax = date('Y/m/d', $petimeMax);
                $msg['petime'] = '任务清单的排期至' . $petimeMax . '结束，' . $petime . '已超出范围，请重新设置计划结束时间';
            }
        }
        $msg ? $this->json_error($msg, false) : $this->json_result('', $msg, false);
    }

    /**
     *编辑
     */
    public function edit()
    {

        $id = I('get.id');
        if (!$id) {
            $this->error('请选择要操作的数据！');
        }
        $this->project_out($id);//判断项目是否可以操作
        $where = " and p.del = 0 and (p.pmuid=" . UID . " or p.uid=" . UID . ")";

        //项目
        $project = $this->db->alias('p')
            ->field('p.*,d1.d_key sname')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->where('pid=' . $id . $where)->find();
        if (empty($project)) {
            $this->error('项目不存在或无权操作！');
        }

        if (IS_POST) {
            $data = $this->db->create();

            // 判断是不是唯一
            if (empty ($_POST ['name'])) {
                $this->error('项目名称不能为空');
            }
            /*$res = $this->db->where("name = '" . $data['name'] . "' and pid !=" . $id)->find();
	 		 if ($res) {
	 		 $this->error('项目名称已存在！');
	 		 }*/

            if (empty ($_POST ['type'])) {
                $this->error('请选择项目类型');
            }
            if (empty ($_POST ['orgid'])) {
                $this->error('请选择项目部门');
            }
            if (empty ($_POST ['pmuid'])) {
                $this->error('请选择项目经理');
            }
            if (empty ($_POST ['pstime'])) {
                $this->error('计划开始时间不能为空');
            }
            if (empty ($_POST ['petime'])) {
                $this->error('计划结束时间不能为空');
            }
            if ($_POST ['petime'] < $_POST ['pstime']) {
                $this->error('结束时间必须大于开始时间');
            }

            // 开始时间不能大于任务的最小时间  结束时间不能小于任务的最大时间 : LGW
            /*if ($pstimes) {
                $pstimeMin = min($pstimes);
                if ($pstimeMin) {
                    if (strtotime($_POST ['pstime']) > $pstimeMin) {
                        $pstimeMin = date('Y/m/d', $pstimeMin);
                        $this->error("任务清单的排期从" . $pstimeMin . "开始，" . $_POST ['pstime'] . "已超出范围，请重新设置计划开始时间");
                    }
                }

            }
            if ($petimes) {
                $petimeMax = max($petimes);
                if ($petimeMax) {
                    if (strtotime($_POST['petime']) < $petimeMax) {
                        $petimeMax = date('Y/m/d', $petimeMax);
                        $this->error('任务清单的排期至' . $petimeMax . '结束，' . $_POST['petime'] . '已超出范围，请重新设置计划结束时间');
                    }
                }
            }*/

            //治疗领域
            $therapy_area = $data['therapy_area'];
            if (is_array($therapy_area) && !empty($therapy_area)) {
                $therapy_area = implode(',', $therapy_area);
            } else {
                $therapy_area = '';
            }
            $tmep = M('Project')->field(true)->find($id);
            $adviserid = $data['adviser'];
            $adviser = get_nickname($adviserid);
            $sale = $data['sale'];
            $saleName = get_nickname($sale);

//            $u = M('member')->where("uid ='{$_POST ['pmuid']}'")->find();
//            $data['orgid'] = $u['dept'];
            $version = str_replace('，', ',', trim($data['version']));
            $data1 = array(
                'name' => $data['name'],
                'level' => $data['level'],
                'type' => $data['type'],
                'cid' => $data['cid'],
                'money' => $data['money'],
                'orgid' => $data['orgid'],
                'pmuid' => $data['pmuid'],
                'pm' => get_nickname($data['pmuid']),
                'sale' => $sale,
                'adviser' => $adviser,
                'adviserid' => $adviserid,
                'pstime' => strtotime($data['pstime']),
                'petime' => strtotime($data['petime']),
                'description' => $data['description'],
                'feedback' => $data['feedback'],
                'risk' => $data['risk'],
                'chance' => $data['chance'],
                'promotion' => $data['promotion'],
                'livetime' => strtotime($data['livetime']),
                'therapy_area' => trim($therapy_area, ','),
                'drug_name' => $data['drug_name'],
                'version' => $version,
            );
            $history = array();
            foreach ($data1 as $key => $vo) {
                if ($vo != $tmep [$key]) {
                    $history [] = array(
                        'field' => $key,
                        'olddata' => $tmep [$key],
                        'newdata' => $vo
                    );
                }
            }
            $Model = M(); // 实例化一个空对象
            $Model->startTrans(); // 开启事务

            //$tmp = $this->db->where('pid = ' . $id)->save($data1);
            $tmp2 = true;
            // 添加参与人 咨询顾问 : LGW
            if ($adviser) {
                $roleid4 = M('ProjectRole')->where("name='咨询顾问'")->getfield('prid');
                // 顾问不存在则添加
                $map['roleid'] = $roleid4;
                $map['pid'] = $project['pid'];
                $takepart = M('Takepart')->where($map)->find();
                if ($takepart == null) {
                    $takep[] = array(
                        'pid' => $project['pid'], 'uid' => $adviserid, 'uname' => $adviser, 'addtime' => time(),
                        'adduid' => UID, 'adduname' => get_nickname(UID) ? get_nickname(UID) : get_username(UID), 'roleid' => $roleid4,
                    );
                    foreach ($takep as $vo) {
                        if (!empty($vo['uid']) && $vo != '') {
                            M('Takepart')->add($vo);
                        }
                    }
                }
            }
            // 添加参与人 销售 : LGW
            if ($saleName) {
                $roleid19 = M('ProjectRole')->where("name='销售'")->getfield('prid');

                $map2['roleid'] = $roleid19;
                $map2['pid'] = $project['pid'];
                $saleData = M('Takepart')->where($map2)->find();
                if ($saleData == null) {
                    $takes[] = array(
                        'pid' => $project['pid'], 'uid' => $adviserid, 'uname' => $saleName, 'addtime' => time(),
                        'adduid' => UID, 'adduname' => get_nickname(UID) ? get_nickname(UID) : get_username(UID), 'roleid' => $roleid19,
                    );
                    foreach ($takes as $vo) {
                        if (!empty($vo['uid']) && $vo != '') {
                            M('Takepart')->add($vo);
                        }
                    }
                }
            }
            action_log_new(array('history' => $history, 'outtype' => 'ot_project', 'outkey' => $id, 'pid' => $id, 'action' => 'edit', 'comment' => ''));
            $dtids = $_POST['dtid1'];
            $docids = $_POST['docid'];
            $fileids = $_POST['fileid'];
            $notes = $_POST['content1'];
            $labels = $_POST['labels1'];
            if (!empty($docids)) {
                foreach ($docids as $k => $v) {
                    $data['dtid'] = $dtids[$k];
                    $data['note'] = $notes[$k];
                    M('Doc')->where('docid=' . $v)->save($data);
                }
            }

            if (!empty($fileids)) {
                foreach ($fileids as $k => $v) {
                    $data['fileid'] = $v;
                    $data['name'] = $labels[$k];
                    M('File')->save($data);
                }
            }

            if (!empty($_FILES['files']['tmp_name'][0])) {
                $file_ids = $this->file_uplode();
                if (!empty($file_ids)) {
                    $sql = 'insert into ot_doc (pid,fileid,dtid,note,addtime,uid,uname,edittime,edituid,edituname) values ';
                    foreach ($file_ids as $key => $vo) {
                        $dtid = $_POST['dtid'][$key];
                        $note = $_POST['contents'][$key];
                        $addtime = time();
                        $uid = UID;
                        $uname = get_nickname(UID) ? get_nickname(UID) : get_username(UID);
                        $sql .= "($id,$vo,$dtid,'" . $note . "',$addtime,$uid,'" . $uname . "',$addtime,$uid,'" . $uname . "'),";
                    }
                    $sql = substr($sql, 0, -1);
                    $tmp2 = $Model->execute($sql);
                }
            }

            if (!empty($tmp2)) {
                $Model->commit(); // 成功则提交事务
                $this->redirect('ProjectNew/view?id=' . $id);
            } else {
                $Model->rollback(); // 否则将事务回滚
                $this->error('编辑失败！', U('ProjectNew/edit?id=' . $id));
            }
        } else {
            $cost['email'] = get_email(UID);  //  LGW
            // 合同
            $contract = apiRead(Api::CONTRACT, Api::DXY_CRM, $cost);
            $contracts = [];
            if ($contract['success']) {
                foreach ($contract['data'] as $k => $v) {
                    $v['contract_no'] and $contracts[$k] = $v;
                }

            }
            $this->assign('contracts', $contracts);
            //项目类型
            $types = M('dictionary')->where("d_code = 'project_type'")->field(true)->select(array('order' => 'd_order asc'));
            $this->assign('types', $types);
            //优先级
            $levels = M('dictionary')->where("d_code = 'level'")->field(true)->select(array('order' => 'd_order asc'));
            $this->assign('levels', $levels);
            //报价单
            $offer = D('Offer')->alias('o')
                ->field('o.oid,o.code,o.chance,o.projectname,c.shortsign')
                ->join('ot_customer c on c.cid = o.cid ', 'left')
                ->select();
            if (is_array($offer) && !empty($offer)) {
                foreach ($offer as $key => $vo) {
                    $offer[$key]['code'] = $vo['shortsign'] . '-' . $vo['code'] . '-' . $vo['projectname'];
                }
            }
            $this->assign('offer', $offer);
            //客户
            $customer = M('Customer')->field('cid,name')->where('enabled = 1')->select();
            $this->assign('customer', $customer);
            //顾问
            $adviser = M('Member')->field('uid,nickname')->where('status = 1')->select();
            $this->assign('advisers', $adviser);
            //项目部门
            $depts = M('Dept')->field(true)->select();
            $depts = D('Common/Tree')->toFormatTree1($depts);
            $this->assign('dept', $depts);
            //项目经理
            $pm = M('Member')->field('uid,nickname')->where('status = 1')->select();
            $this->assign('pm', $pm);
            //销售
            $sales = M('Member')->field('uid,nickname')->where('status = 1')->select();
            $this->assign('sales', $sales);
            //文档类型
            $doc_type = M('DocType')->field('dtid,name')->order('sort_order asc')->select();
            $this->assign('doc_type', $doc_type);

            $project['pstime'] = date('Y/m/d', $project['pstime']);
            $project['petime'] = date('Y/m/d', $project['petime']);
            if ($project['livetime']) {
                $project['livetime'] = date('Y/m/d', $project['livetime']);
            } else {
                $project['livetime'] = '';
            }
            if ($project['stime']) {
                $project['stime'] = date('Y/m/d', $project['stime']);
            } else {
                $project['stime'] = '';
            }
            if ($project['etime']) {
                $project['etime'] = date('Y/m/d', $project['etime']);
            } else {
                $project['etime'] = '';
            }
            $project['breakdown'] = $project['breakdown'] ? '是' : '否';

            $this->assign('project', $project);

            $con = $project['contract'];
            if ($con) {
                $this->assign('con', $con);
            }
            //治疗领域
            $therapy = $project['therapy_area'];
            if ($therapy) {
                $this->assign('therapy', $therapy);
            }
            $doc = M('Doc')->alias('d')
                ->field('dt.name dtname,f.savepath,f.ext,f.name fname,d.*')
                ->join('ot_file f on f.fileid = d.fileid', 'left')
                ->join('ot_doc_type dt on dt.dtid = d.fileid', 'left')
                ->where('pid = ' . $id)->select();
            $this->assign('doc', $doc);
            //治疗领域
            $therapy_areas = M("Dictionary")->where("d_code='therapy_area'")->select(array('order' => 'd_order asc'));
            $this->assign('therapy_areas', $therapy_areas);
            $this->assign('id', $id);

            $this->meta_title = '编辑项目';

            $root_mbx = array();
            $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
            $root_mbx[] = array('title' => '我管理的项目', 'url' => U('ProjectNewFromMe/index'));
            $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectNew/view?id=' . $project['pid']));
            $root_mbx[] = array('title' => '编辑项目', 'url' => '');
            $this->assign('root_mbx', $root_mbx);

            $this->display();

        }
    }

    //异步修改数据
    public function ajax_col()
    {
        $id = empty($_GET['id']) ? 0 : intval($_GET['id']);
        $column = empty($_GET['column']) ? '' : trim($_GET['column']);
        $value = isset($_GET['value']) ? trim($_GET['value']) : '';
        $data = array();

        if (in_array($column, array('sort_order'))) {
            $data[$column] = $value;
            $this->db->where('mid=' . $id)->save($data);
        } else {
            return;
        }
        return;
    }

    public function service_ajax_col()
    {
        $id = empty($_GET['id']) ? 0 : intval($_GET['id']);
        $column = empty($_GET['column']) ? '' : trim($_GET['column']);
        $value = isset($_GET['value']) ? trim($_GET['value']) : '';

        $s = M('ProjectService')->where("psid=" . $id)->find();
        if (!$s || $s['state'] == 2) {
            echo 'false';
            exit();
        }

        $project = $this->db->field('uid,pmuid')->where("pid = " . $s['pid'])->find();
        /*	if(is_administrator() || $project['uid'] == UID || $project['pmuid'] == UID){*/

        if (!cando1(array($project['uid'], $project['pmuid']))) {
            echo 'false';
            exit();
        }

        $data = array(
            $column => $value,
        );
        M('ProjectService')->where('psid=' . $id)->save($data);

        $this->updateMilestone($id); // 更新里程碑
        echo 'true';
        exit();
    }

    public function choose()
    {
        $key = I('key', '');
        $state = I('state', '');
        $channels = I('channels', '');
        $order = "";
        $map = array();
        if ($key) {
            $map ['_string'] = "(code like '%" . $key . "%' or name like '%" . $key . "%' or contact like '%" . $key . "%')";
        }
        if ($state) {
            $map['state'] = $state;
        }
        if ($channels) {
            $map['channels'] = $channels;
        }

        if (I('sort', '') && I('order', '')) {
            $order = I("sort") . " " . I("order");
        }

        $list = $this->lists('Customer', $map, $order);
        $this->assign('_list', $list);
        $this->meta_title = '客户管理';
        $this->display();
    }

    //提交
    public function present()
    {
        $id = $_POST['id'];
        $es_eid = $_POST['eid'];
        M('Exprocess')->where("exid =" . $id)->delete();
        $this->db->where("oid=" . $id)->save(array("static" => 2));
        $res = M('ExamineSub')->where('es_eid = ' . $es_eid)->select();
        foreach ($res as $vo) {
            $data2 = array(
                'exid' => $id,
                'type' => '报价单审核',
                'checkid' => $vo['uid'],
                'esid' => $vo['esid'],
                'order' => $vo['sort_order'],
                'checkname' => $vo['uname']
            );
            M('Exprocess')->add($data2);
        }
        return;
    }

    //查看
    public function view()
    {
        $id = I("get.id");
        if (empty($id)) {
            $this->error('项目不存在！');
        }

        $where = " and p.del = 0 and (EXISTS(select 1 from ot_takepart tp where tp.pid = p.pid and tp.uid=" . UID . ")
			or EXISTS(select 1 from ot_task t where t.pid = p.pid and t.assigneduid=" . UID . ") or p.pmuid=" . UID . " or p.uid=" . UID . ")";

        $project = $this->db
            ->field('p.*,o.code oname,o.chance_code,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d3.name dname,m.nickname mname')
            ->alias('p')
            ->join('ot_offer o on p.oid = o.oid', 'LEFT')
            ->join('ot_dept d3 on p.orgid = d3.did', 'LEFT')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
            ->join('ot_customer c on p.cid = c.cid', 'LEFT')
            ->join('ot_member m on p.sale = m.uid', 'LEFT')
            ->where('p.pid=' . $id . $where)
            ->find();

        if (empty($project)) {
            $this->error('项目不存在！');
        }
        //任务清单数量
        $count = M('projectService')->alias('s')->join('ot_module m ON m.mid = s.mid', 'LEFT')->join('ot_service s1 ON s1.sid = s.sid', 'LEFT')
            ->join('ot_group g ON s.groupid = g.groupid', 'LEFT')
            ->where('s.pid=' . $id)->count();
        $project['taskcount'] = $count;
        $project['description'] = htmlspecialchars_decode($project['description']);
        $project['risk'] = htmlspecialchars_decode($project['risk']);
        $project['feedback'] = htmlspecialchars_decode($project['feedback']);

        $this->assign('p', $project);

        $list = M("takepart")->alias('t')->where("t.pid={$id}")->join('ot_project_role pr on t.roleid=pr.prid', 'left')->join('ot_ucenter_member m on m.id=t.uid', 'left')->field(array(
            't.uname',
            't.addtime',
            't.adduname',
            'pr.name as  title',
            'm.mobile'
        ))->order('addtime desc')->select();

        $this->assign('tplist', $list);

        $doc = M("doc")->where("pid=$id")->join('ot_file f on d.fileid=f.fileid and f.delete=0', 'left')->join('ot_doc_type t on d.dtid=t.dtid', 'left')->
        field(array(
            't.name as tname',
            'f.name as dname',
            'savepath',
            'size', 'views', 'd.uname', 'd.url', 'd.urlname', 'd.addtime', 'note', 'f.fileid'
        ))->order('addtime desc')->select(array('alias' => 'd'));
        foreach ($doc as &$vo) {
            $vo['size'] = ceil(intval($vo['size']) / 1024);
            if ($vo['url']) {
                $vo['dname'] = $vo['urlname'] ?: $vo['url'];
            }
        }
        $this->assign('doc', $doc);

        $w1 = " 1=1 and pid =$id";
        $w2 = " and outtype !='ot_bug'";
        $condition ['_string'] = "(($w1 $w2))";
        $logs = M("Log")->where($condition)->order("addtime asc")->select();
        $olddata = [];
        $newdata = [];
        if ($logs) {
            foreach ($logs as $k => $v) {
                $hs = M("History")->where("logid='{$v['logid']}'")->select();
                if ($hs) {
                    foreach ($hs as $kk => $vv) {
                        $hs[$kk]['fname'] = tf_name('ot_project', $vv['field']);
                        switch ($vv['field']) {
                            case "cid":
                                $oldtemp = M("Customer")->where("cid='{$vv['olddata']}'")->find();
                                if ($oldtemp) {
                                    $olddata = $oldtemp['name'];
                                }
                                if ($olddata) {
                                    $hs[$kk]['olddata'] = $olddata;
                                }

                                $newtemp = M("Customer")->where("cid='{$vv['newdata']}'")->find();
                                if ($newtemp) {
                                    $newdata = $newtemp['name'];
                                }
                                if ($newdata) {
                                    $hs[$kk]['newdata'] = $newdata;
                                }

                                break;

                            case "pstime":
                            case "petime":
                            case "livetime":
                            case "addtime":
                            case "assignedtime":
                                $hs[$kk]['olddata'] = date('Y/m/d H:i', $hs[$kk]['olddata']);
                                $hs[$kk]['newdata'] = date('Y/m/d H:i', $hs[$kk]['newdata']);
                                break;
                            case "state":
                                $mod = M("Dictionary");
                                $orow = $mod->field("d_key")->where("d_code='project_state' and d_value='{$vv['olddata']}'")->find();
                                if ($orow) {
                                    $hs[$kk]['olddata'] = $orow["d_key"];
                                }
                                $nrow = $mod->field("d_key")->where("d_code='project_state' and d_value='{$vv['newdata']}'")->find();
                                if ($orow) {
                                    $hs[$kk]['newdata'] = $nrow["d_key"];
                                }
                                break;

                            default:
                                break;
                        }
                    }

                    $logs[$k]['hs'] = $hs;
                }
            }
        }

        $this->assign("logs", $logs);

        $list = M("projectbudget")->where("pid=$id")->field(array(
            'type',
            'outitem',
            'budget',
            'cost',
            'cost/budget*10000/100 as bl',
            'addtime',
            'updatetime'
        ))->order('updatetime desc')->select();

        $budgetlog = $this->budgetlog($id);
        if ($list) {
            foreach ($list as $k => $V) {
                if (empty($V['bl'])) {
                    $list[$k]['bl'] = 0;
                } elseif ($V['bl'] > 100) {
                    $list[$k]['bl'] = 100;
                }

            }
        }
        $this->assign('budgetlog', $budgetlog);

        $this->assign('blist', $list);

        $list = M("milestone")->where("m.pid=$id")->join("ot_task t on t.tid=m.tid", "left")->field(array(
            'm.name',
            'm.mtime',
            'm.addtime',
            'm.uname',
            'm.addtime',
            'm.addtime',
            't.tid',
            't.title',
            'm.completion'
        ))->order('m.sort_order asc')->select(array('alias' => 'm'));

        $this->assign('mlist', $list);

        $tlist = M("Task")->alias('t')
            ->field(array('t.*', 'm.name as o_name', 'g.name as gname', 'pc.name as pcname', 'd.d_key as str'))
            ->join('ot_service s ON s.sid = t.sid', 'LEFT')
            ->join('ot_project_config pc ON pc.pid = t.pcid', 'LEFT')
            ->join('ot_module m ON m.mid = s.mid', 'LEFT')
            ->join('ot_group g ON m.role = g.groupid', 'LEFT')
            ->join("ot_dictionary d ON d.d_value = t.state and d.d_code='taskstatus'", 'LEFT')
            ->where("t.pid='{$id}'  and  t.deleted=0")->select();
        //var_dump($tlist);
        $this->assign('tlist', $tlist);

        $where['_string'] = "  os.oid='{$project['oid']}'";
        $offer = M('Offer')->where("oid = '{$project['oid']}'")->find();
        $oamount = fomatprice($offer['oamount']);
        $oper_cost = fomatprice($offer['oper_cost']);
        //  $amount_notax = fomatprice($offer['amount_notax']);
        $oper_rate = $offer['oper_rate'] . '%';
        $rate = $offer['rate'] . '%';
        $amount_tax = fomatprice($offer['amount_tax']);
        $disoff = $offer['disoff'] . '%';
        $amount = fomatprice($offer['amount']);
        $days = $offer['days'];
        $man_haur = $offer['man_haur'];

        $offer_log = "<span>
				      基础报价 <span class='textr'>$oamount</span>&nbsp;
				      项目管理费<span  class='textr'>$oper_cost($oper_rate)</span>&nbsp;
					  含税<span  class='textr'>$amount_tax($rate)</span>&nbsp;
					  折扣<span  class='textr'>$disoff</span>&nbsp;
					  报价<span  class='textr'>$amount</span>&nbsp;
					  周期<span  class='textr'>$days</span>d&nbsp;
					  工时<span  class='textr'>$man_haur</span>h
					  </span> ";

        /*$offersub = M("OfferSub")->field (  array ('s.hour','os.*','m.name as o_name',
				'd.d_key as regroup_name',
				'g.name as ganme',
				'm1.name as remid_name','os.required as r1','p.name as pname','p.pid as pid'))->alias ( 'os' )
			->join ( 'ot_service s ON s.sid = os.sid', 'LEFT' )
			->join ( 'ot_module m ON m.mid = s.mid', 'LEFT' )
			->join ( 'ot_project_config p ON m.pid = p.pid', 'LEFT' )
			->join ( 'ot_group g ON m.role = g.groupid', 'LEFT' )
			->join ( 'ot_module m1 ON m1.mid = s.remid', 'LEFT' )
			->join ( "LEFT join ot_dictionary d ON d.d_value = s.regroup AND d.d_code='reqgroup'" )
			->where ( "  os.oid='{$project['oid']}'" )->order ("os.osid desc")->select ();*/
        $offersub = M("OfferSub")->field(array('os.*', 'm.name as o_name',
            'd.d_key as regroup_name',
            'g.name as ganme',
            'm1.name as remid_name', 'os.required as r1', 'p.name as pname', 'p.pid as pid'))->alias('os')->join('ot_service s ON s.sid = os.sid', 'LEFT')
            ->join('ot_module m ON m.mid = s.mid', 'LEFT')
            ->join('ot_project_config p ON m.pid = p.pid', 'LEFT')
            ->join('ot_group g ON m.role = g.groupid', 'LEFT')
            ->join('ot_module m1 ON m1.mid = s.remid', 'LEFT')
            ->join("LEFT join ot_dictionary d ON d.d_value = s.regroup AND d.d_code='reqgroup'")
            ->where("  os.oid='{$project['oid']}'")->order("os.osid desc")->select();

        $nlist = array();
        if ($offersub) {
            foreach ($offersub as $k => $v) {
                $nlist[$v['pid']]['mid'] = $v['pid'];
                $nlist[$v['pid']]['mname'] = $v['pname'];
                $nlist[$v['pid']]['list'][] = $v;
            }
        }

        $this->assign('offers', $nlist);

        $this->assign('offer_log', $offer_log);

        //报销单信息获取
        $result_expense = M('expense')
            ->field('e.type,e.code,e.uname,e.state,e.innum,e.amount,e.addtime,d.d_key,d1.d_key as states')
            ->alias('e')
            ->join('ot_dictionary d on d.d_value=e.type and d.d_code=\'expense_type\'')
            ->join('ot_dictionary d1 on d1.d_value=e.state and d1.d_code=\'Reimbursement_static\'')
            ->where(['pid' => $id])->select();
        $this->assign('expense', $result_expense);

        $budgetlog = $this->budgetlog($id);

        $this->assign('budgetlog', $budgetlog);

        //kpi
        $kpi = M('Project_kpi')->where('pid=' . $id)->order('kid desc')->select();

        $this->assign('kpi', $kpi);

        // 日期进度
        $dateSchedule = $this->dateSchedule($project['pstime'], $project['petime']);

        $this->assign('dschedule', $dateSchedule);

        $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
        $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');

        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
        $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectView/view?id=' . $project['pid']));
        $root_mbx[] = array('title' => '查看项目', 'url' => '');
        $this->assign('root_mbx', $root_mbx);

        $this->assign('from_url', $from_url);

        $this->display();
    }

    /**
     * 按照项目的开始时间和结束时间求出日期进度  : LGW
     *
     * @param $pstime // 项目开始时间
     * @param $petime // 项目结束时间
     *
     * @return mixed
     */
    public function dateSchedule($pstime, $petime)
    {

        // 如果还没到项目开始时间则进度为零
        if ($this->today < $pstime) {
            return 0;
        }

        // 如果已经超过了项目结束日期则进度为百分百
        if ($this->today > $petime) {
            return 100;
        }
        $timeGap = $petime - $pstime;
        // 如果开始和结束是同一天并且时间等于今天则进度为0
        if ($timeGap == 0 && $this->today == $pstime) {
            return 0;
        }
        $oneDay = 86400;
        $gapDay = $timeGap / $oneDay + 1;
        $schedule = $this->today - $pstime;
        $scheduleDay = $schedule / $oneDay + 1;

        $val = $scheduleDay / $gapDay * 100;
        return round($val);
    }

    public function gantt()
    {
        $id = I("get.id");
        if (empty($id)) {
            $this->error('项目不存在！');
        }

        $project = $this->db
            ->field('p.*,o.code oname,o.chance,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d3.name dname,m.nickname mname')
            ->alias('p')
            ->join('ot_offer o on p.oid = o.oid', 'LEFT')
            ->join('ot_dept d3 on p.orgid = d3.did', 'LEFT')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
            ->join('ot_customer c on p.cid = c.cid', 'LEFT')
            ->join('ot_member m on p.sale = m.uid', 'LEFT')
            ->where('p.pid=' . $id)
            ->find();

        $this->assign('p', $project);

        $map = [];
        $map['ps.pid'] = $id;
        //$map['ps.state'] = ProjectService::STARTED;     // 已启动
        $project_item = M("ProjectService")->alias('ps')
            ->field(array('ps.mid', 'ps.pcid', 'ps.sid', 'ps.prepsid', 'pc.name as p_name'))
            ->join("ot_project_config pc on ps.pcid = pc.pid")
            ->group('ps.pcid')
            ->where($map)
            ->select();

        $m_item = M("ProjectService")->alias('ps')
            ->field(array('ps.mid', 'ps.pcid', 'ps.sid', 'ps.psid', 'ps.prepsid', 'm.name as m_name', 'g.groupid', 'g.name as g_name'))
            ->join("ot_module m on ps.mid = m.mid")
            ->join('ot_group g ON m.role = g.groupid', 'LEFT')
            ->group('ps.mid')
            ->where($map)
            ->select();
        $s_item = M("ProjectService")->alias('ps')
            ->field(array('ps.mid', 'ps.pcid', 'ps.psid', 'ps.prepsid', 'ps.sid', 'ps.assignedname', 'ps.pstime', 'ps.petime', 'ps.days', 'ps.progress', 's.name as s_name'))
            ->join("ot_service s on ps.sid = s.sid")
            ->where($map)
            ->select();
        $data = array();
        $color_temp = array('836fff');
        $color_data = array();
        $new_pk = 0;
        foreach ($project_item as $key => $val) {
            $p = array();
            $pk = $key + 1;
            $p['id'] = $id;
            $p['pCid'] = $val['pcid'];
            $p['pID'] = $pk;
            $p['pName'] = $val['p_name'];
            $p['pStart'] = '';
            $p['pEnd'] = '';
            $p['pColor'] = "ffc125";
            $p['pLink'] = '';
            $p['pMile'] = 0;
            $p['pRes'] = '';
            $p['pComp'] = 0;
            $p['pParent'] = 0;
            $p['pOpen'] = 1;
//	 		$p['pDepend'] =;
            $data[$pk] = $p;
            foreach ($m_item as $ke => $va) {
                $m = array();
                $mk = $ke + 1;
                if ($va['pcid'] == $val['pcid']) {
                    if (!isset($color_data[$va['groupid']])) {
                        $color = $color_temp[array_rand($color_temp, 1)];
                        if (!in_array($color, $color_data)) {
                            $color_data[$va['groupid']] = $color;
                        }
                    } else {
                        $color = $color_data[$va['groupid']];
                    }
                    $m['id'] = $id;
                    $m['pMid'] = $va['mid'];
                    $m['pID'] = $pk . $mk;
                    $m['pName'] = $va['g_name'] . '-' . $va['m_name'];
                    $m['pStart'] = '';
                    $m['pEnd'] = '';
                    $m['pColor'] = "7ccd7c";
                    $m['pLink'] = '';
                    $m['pMile'] = 0;
                    $m['pRes'] = '';
                    $m['pComp'] = 0;
                    $m['pParent'] = $pk;
                    $m['pOpen'] = 1;
                    $data[$pk . $mk] = $m;
                    foreach ($s_item as $k => $v) {
                        $s = array();
                        $sk = $k + 1;
                        if ($va['mid'] == $v['mid']) {

                            $s['pID'] = $pk . $mk . $sk;

                            $temp_array[$v['psid']] = $s['pID'];
                            $s['pName'] = $v['s_name'];
                        	if($v['pstime']){
	                            $s['pStart'] = date('Y-m-d', $v['pstime']);
                            }else{
	                            $s['pStart'] = '';
                            }
                            if($v['petime']){
	                            $s['pEnd'] = date('Y-m-d', $v['petime']);
                            }else{
	                            $s['pEnd'] = '';
                            }
                            $today = strtotime(date('Y-m-d', time()));
                            $pe = strtotime(date('Y-m-d', $v['petime']));
                            if ($v['petime'] < time() && $pe != $today && $v['progress'] != 100) {
                                $s['pColor'] = 'ff0000';
                            } else {
                                $s['pColor'] = $color;
                            }
                            $s['pLink'] = '';
                            $s['pMile'] = 0;
                            $s['pRes'] = $v['assignedname'];
                            $s['pComp'] = intval($v['progress']);
                            $s['pParent'] = $pk . $mk;
                            $s['pGroup'] = 0;
                            $s['pOpen'] = 0;
                            $s['pDepend'] = $temp_array[$v['prepsid']];
                            $data[$pk . $mk . $sk] = $s;
                        }
                    }
                    $data[$pk . $mk]['pGroup'] = 1;
                }
            }
            $data[$pk]['pGroup'] = 1;
            $new_pk = $pk;
        }
        $pro_item = M("ProjectService")->alias('ps')
            ->field(array('ps.*'))
            ->where("ps.pid='" . $id . "' and ps.pcid=0")
            ->select();
        foreach ($pro_item as $kk => $vv) {
            $color = $color_temp[array_rand($color_temp, 1)];
            if (!in_array($color, $color_data)) {
                $color_data['no_' . $kk] = $color;
            }
            $p = array();
            $ok = $new_pk + $kk + 1;
            $p['pID'] = $ok;
            $temp_array[$vv['psid']] = $p['pID'];
            $p['pName'] = $vv['title'];
			if($vv['pstime']){
				$p['pStart'] = date('Y-m-d', $vv['pstime']);
			}else{
				$p['pStart']='';
			}
			if($vv['pEnd']){
				$p['pEnd'] = date('Y-m-d', $vv['pEnd']);
			}else{
				$p['pEnd']='';
			}
            $p['pColor'] = $color;
            $p['pLink'] = '';
            $p['pMile'] = 0;
            $p['pRes'] = $vv['assignedname'];
            $p['pComp'] = intval($vv['progress']);
            $p['pParent'] = 0;
            $p['pOpen'] = 1;
            $p['pGroup'] = 0;
            $p['customize'] = 1;
            $p['pDepend'] = $temp_array[$vv['prepsid']];
            $data[$ok] = $p;

        }
        $parent_pid = array();
        foreach ($parent_array as $p => $v) {
            $parent_pid[$temp_array[$p]] = $temp_array[$v];
        }
        $data = array_values($data);
        $this->assign('data', json_encode($data));
        foreach ($data as $k => $v) {
			if($v['pStart']){
            $days = $this->defaultDate($v['pStart']);
            $v['weekStart'] = $days['weekStart'];
            $v['weekEnd'] = $days['weekEnd'];
			}
            $data[$k] = $v;
        }

        // 导出甘特图Excel : LGW
        if (I("get.exportexcel", "") == 1) {
            $project = $this->getProject($id);
            $this->gantExport($project, $data);
        }
        $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
        $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');

        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
        $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectNew/view?id=' . $project['pid']));
        $root_mbx[] = array('title' => '甘特图', 'url' => '');
        $this->assign('root_mbx', $root_mbx);

        $this->assign('from_url', $from_url);

        $this->display();
    }


    public function service()
    {
        $id = I("get.id");
        if (empty($id)) {
            $this->error('项目不存在！');
        }
        $config = array(
            "actionURL" => "/Admin/ProjectNew/service",
            "operators" => array("=" => "=", "!=" => "!=", ">" => ">", ">=" => ">=", "<" => "<", "<=" => "<=", "include" => "包含"),
            "params" => array(
                0 => array('str' => '标准服务', 'fieldname' => 'g.name', 'operator' => 'include', 'control' => 'input', 'values' => "")
            , 1 => array('str' => '模块', 'fieldname' => 'm.name', 'operator' => 'include', 'control' => 'input', 'values' => '')
            , 2 => array('str' => '项目组', 'fieldname' => 'g.name', 'operator' => 'include', 'control' => 'select', 'values' => array())
            , 3 => array('str' => '任务', 'fieldname' => 's.title', 'operator' => 'include', 'control' => 'input', 'values' => '')
            , 4 => array('str' => '是否拆觖', 'fieldname' => 's.state', 'operator' => '=', 'control' => 'select', 'values' => array("" => "", "1" => "已启动", "0" => "未启动"))
            , 5 => array('str' => '开始时间', 'fieldname' => 's.pstime', 'operator' => '=', 'control' => 'input', 'values' => '', 'class' => 'date')
            , 6 => array('str' => '结束时间', 'fieldname' => 's.petime', 'operator' => '=', 'control' => 'input', 'values' => "", "class" => "date")
            , 7 => array('str' => '周期', 'fieldname' => 's.days', 'operator' => '=', 'control' => 'input', 'values' => '')
            , 8 => array('str' => '工时', 'fieldname' => 's.hours', 'operator' => '=', 'control' => 'input', 'values' => '')
            , 9 => array('str' => '执行人', 'fieldname' => 's.assigneduid', 'operator' => 'include', 'control' => 'select', 'values' => array())
            , 10 => array('str' => '审核人', 'fieldname' => 's.checkuid', 'operator' => 'include', 'control' => 'select', 'values' => array())
            , 11 => array('str' => '是否里程碑', 'fieldname' => 's.milestone', 'operator' => '=', 'control' => 'select', 'values' => array('' => '', "0" => '否', '1' => '是'))
            , 12 => array('str' => '是否交付清单', 'fieldname' => 's.delivery', 'operator' => '=', 'control' => 'select', 'values' => array('' => '', '0' => '否', '1' => '是'))
            )
        );
        if ($config && $config['params']) {
            //执行和审核人
            $assigned = M('Member')->field('uid,nickname')->where('status = 1')->select();
            $massign = array("" => "");
            if ($assigned) {
                foreach ($assigned as $v) {
                    $massign[$v['uid']] = $v['nickname'];
                }
            }
            //项目组
            $mgp = array("" => "");
            $group = M('Group')->field('groupid,name')->order('sort_order asc')->select();
            if ($group) {
                foreach ($group as $vo) {
                    $mgp[$vo['groupid']] = $vo['name'];
                }
            }
            $config['params'][2]['values'] = $mgp;
            $config['params'][9]['values'] = $massign;
            $config['params'][10]['values'] = $massign;
        }
        $this->setSearchConfig($config);
        $project = $this->db
            ->field('p.*,o.code oname,o.chance,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d3.name dname,m.nickname mname')
            ->alias('p')
            ->join('ot_offer o on p.oid = o.oid', 'LEFT')
            ->join('ot_dept d3 on p.orgid = d3.did', 'LEFT')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
            ->join('ot_customer c on p.cid = c.cid', 'LEFT')
            ->join('ot_member m on p.sale = m.uid', 'LEFT')
            ->where('p.pid=' . $id)
            ->find();
        $project['description'] = htmlspecialchars_decode($project['description']);
        $project['risk'] = htmlspecialchars_decode($project['risk']);
        $project['feedback'] = htmlspecialchars_decode($project['feedback']);

        $this->assign('p', $project);
        if (I('sort', '') && I('order', '')) {
            $order = I("sort") . " " . I("order");
        } else {
            $order = 's.sort_order asc';
            $this->assign('orderBy', $order);
        }
        $where = $this->getCondition();
        $Model = M('ProjectService');
        $where ['_string'] .= " and s.pid='{$id}'";
        $count = $Model->alias('s')->join('ot_module m ON m.mid = s.mid', 'LEFT')->join('ot_service s1 ON s1.sid = s.sid', 'LEFT')
            ->join('ot_group g ON s.groupid = g.groupid', 'LEFT')
            ->where($where)->count();
        $Page = new \Think\Page ($count, 20);

        $list = $Model->alias('s')->field(array(
            's.*', 'm.name as o_name', 'g.name as gname', 's1.name as sname',
            's1.description as s_description', 'p.name as pname', 'p.pid as pid',
            '(select count(1) from ot_service_doc sd where sd.sid = s.sid) as sdc'))
            ->join('ot_module m ON m.mid = s.mid', 'LEFT')
            ->join('ot_project_config p ON m.pid = p.pid', 'LEFT')
            ->join('ot_service s1 ON s1.sid = s.sid', 'LEFT')
            ->join('ot_group g ON s.groupid = g.groupid', 'LEFT')
            ->where($where)
            ->order($order)
            ->select();

        $nlist = array();
        if ($list) {
            foreach ($list as $k => $v) {
                if ($v['sid']) {
                    $stemp = M('Service')->field('description,mid')->where('sid = ' . $v['sid'])->find();
                    $sdescription = $stemp['description'];
                    $smid = $stemp['mid'];
                    $smh = M('ModuleHelp')->where('mid = ' . $smid)->count();
                    if ($sdescription || $smh) {
                        $list[$k]['bulb'] = 1;
                    }
                }
                if ($v['s_description']) {
                    $str = strip_tags(htmlspecialchars_decode($v['s_description']));
                    $list[$k]['title_show'] = $str;
                } else {
                    if ($v['gname']) {
                        $list[$k]['title_show'] = $v['gname'] . '-' . $v['o_name'] . '-' . $v['sname'];
                    } else {
                        if ($v['o_name'] || $v['sname']) {
                            $list[$k]['title_show'] = $v['o_name'] . '-' . $v['sname'];
                        } else {
                            $list[$k]['title_show'] = $v['title'];
                        }

                    }

                }
            }

            foreach ($list as $k => $v) {
                $listpid = $v['pid'] ?: 'xx';
                $nlist[$listpid]['mid'] = $listpid;
                $nlist[$listpid]['mname'] = $v['pname'];
                $nlist[$listpid]['list'][] = $v;
            }
        }

        if (I('get.exportexcel') == 1) {
            $list = $Model->alias('s')->field(array(
                's.*',
                'm.name as o_name',
                'g.name as gname',
                's1.name as sname',
                's1.description as s_description', 'p.name as pname', 'p.pid as pid',
                '(select count(1) from ot_service_doc sd where sd.sid = s.sid) as sdc'
            ))->join('ot_module m ON m.mid = s.mid', 'LEFT')
                ->join('ot_project_config p ON m.pid = p.pid', 'LEFT')
                ->join('ot_service s1 ON s1.sid = s.sid', 'LEFT')
                ->join('ot_group g ON s.groupid = g.groupid', 'LEFT')
                ->where($where)->order($order)->select();
            if ($list) {
                foreach ($list as $k => $v) {
                    if ($v['s_description']) {
                        $str = strip_tags(htmlspecialchars_decode($v['s_description']));
                        $list[$k]['title_show'] = $str;
                    } else {
                        if ($v['gname']) {
                            $list[$k]['title_show'] = $v['gname'] . '-' . $v['o_name'] . '-' . $v['sname'];
                        } else {
                            if ($v['o_name'] || $v['sname']) {
                                $list[$k]['title_show'] = $v['o_name'] . '-' . $v['sname'];
                            } else {
                                $list[$k]['title_show'] = $v['title'];
                            }

                        }

                    }
                }
            }
            $this->serviceExport($list, $project['name']);
        }
        $logs = M("Log")->where(array("pid" => $id, 'outtype' => 'ot_todo'))->order("addtime asc")->select();
        $this->assign("logs", $logs);
        if ($count == 0) {
            $this->assign('notList', 1);
        }
        $this->assign('_list', $nlist);
        //$Page->setConfig('theme', '%FIRST% %UP_PAGE% %LINK_PAGE% %DOWN_PAGE% %END% %HEADER%');
        //$show = $Page->show();
        //$this->assign('_page', $show);
        $this->meta_title = '内容清单';

        $this->rootMbx('项目范围', $project);
        $this->assign('actionName', 'projection');
        $this->assign('fourtitle', ACTION_NAME);

        $this->display();

    }

    // 资源计划
    public function resourcePlan()
    {
        $id = I("get.id");
        if (empty($id)) {
            $this->error('项目不存在！');
        }
        $config = array(
            "actionURL" => "/Admin/ProjectNew/service",
            "operators" => array("=" => "=", "!=" => "!=", ">" => ">", ">=" => ">=", "<" => "<", "<=" => "<=", "include" => "包含"),
            "params" => array(
                0 => array('str' => '标准服务', 'fieldname' => 'g.name', 'operator' => 'include', 'control' => 'input', 'values' => "")
            , 1 => array('str' => '模块', 'fieldname' => 'm.name', 'operator' => 'include', 'control' => 'input', 'values' => '')
            , 2 => array('str' => '项目组', 'fieldname' => 'g.name', 'operator' => 'include', 'control' => 'select', 'values' => array())
            , 3 => array('str' => '任务', 'fieldname' => 's.title', 'operator' => 'include', 'control' => 'input', 'values' => '')
            , 4 => array('str' => '是否拆觖', 'fieldname' => 's.state', 'operator' => '=', 'control' => 'select', 'values' => array("" => "", "1" => "已启动", "0" => "未启动"))
            , 5 => array('str' => '开始时间', 'fieldname' => 's.pstime', 'operator' => '=', 'control' => 'input', 'values' => '', 'class' => 'date')
            , 6 => array('str' => '结束时间', 'fieldname' => 's.petime', 'operator' => '=', 'control' => 'input', 'values' => "", "class" => "date")
            , 7 => array('str' => '周期', 'fieldname' => 's.days', 'operator' => '=', 'control' => 'input', 'values' => '')
            , 8 => array('str' => '工时', 'fieldname' => 's.hours', 'operator' => '=', 'control' => 'input', 'values' => '')
            , 9 => array('str' => '执行人', 'fieldname' => 's.assigneduid', 'operator' => 'include', 'control' => 'select', 'values' => array())
            , 10 => array('str' => '审核人', 'fieldname' => 's.checkuid', 'operator' => 'include', 'control' => 'select', 'values' => array())
            , 11 => array('str' => '是否里程碑', 'fieldname' => 's.milestone', 'operator' => '=', 'control' => 'select', 'values' => array('' => '', "0" => '否', '1' => '是'))
            , 12 => array('str' => '是否交付清单', 'fieldname' => 's.delivery', 'operator' => '=', 'control' => 'select', 'values' => array('' => '', '0' => '否', '1' => '是'))
            )
        );
        if ($config && $config['params']) {
            //执行和审核人
            $assigned = M('Member')->field('uid,nickname')->where('status = 1')->select();
            $massign = array("" => "");
            if ($assigned) {
                foreach ($assigned as $v) {
                    $massign[$v['uid']] = $v['nickname'];
                }
            }
            //项目组
            $mgp = array("" => "");
            $group = M('Group')->field('groupid,name')->order('sort_order asc')->select();
            if ($group) {
                foreach ($group as $vo) {
                    $mgp[$vo['groupid']] = $vo['name'];
                }
            }
            $config['params'][2]['values'] = $mgp;
            $config['params'][9]['values'] = $massign;
            $config['params'][10]['values'] = $massign;
        }
        $this->setSearchConfig($config);
        $project = $this->db
            ->field('p.*,o.code oname,o.chance,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d3.name dname,m.nickname mname')
            ->alias('p')
            ->join('ot_offer o on p.oid = o.oid', 'LEFT')
            ->join('ot_dept d3 on p.orgid = d3.did', 'LEFT')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
            ->join('ot_customer c on p.cid = c.cid', 'LEFT')
            ->join('ot_member m on p.sale = m.uid', 'LEFT')
            ->where('p.pid=' . $id)
            ->find();
        $project['description'] = htmlspecialchars_decode($project['description']);
        $project['risk'] = htmlspecialchars_decode($project['risk']);
        $project['feedback'] = htmlspecialchars_decode($project['feedback']);

        $this->assign('p', $project);
        if (I('sort', '') && I('order', '')) {
            $order = I("sort") . " " . I("order");
        } else {
            $order = 's.sort_order asc';
            $this->assign('orderBy', $order);
        }
        $where = $this->getCondition();
        $Model = M('ProjectService');
        $where ['_string'] .= " and s.pid='{$id}'  and ( s.paid = 0  or (s.paid>0 and s.pastate = 1))";
        $count = $Model->alias('s')->join('ot_module m ON m.mid = s.mid', 'LEFT')->join('ot_service s1 ON s1.sid = s.sid', 'LEFT')
            ->join('ot_group g ON s.groupid = g.groupid', 'LEFT')
            ->where($where)->count();
        $Page = new \Think\Page ($count, 20);

        $list = $Model->alias('s')->field(array(
            's.*', 'd.d_key as state',
            'm.name as o_name',
            'g.name as gname',
            's1.name as sname',
            's1.description as s_description', 'p.name as pname', 'p.pid as pid',
            '(select count(1) from ot_service_doc sd where sd.sid = s.sid) as sdc'
        ))->join('ot_module m ON m.mid = s.mid', 'LEFT')
            ->join('ot_project_config p ON m.pid = p.pid', 'LEFT')
            ->join('ot_service s1 ON s1.sid = s.sid', 'LEFT')
            ->join('ot_group g ON s.groupid = g.groupid', 'LEFT')
            ->join('ot_dictionary d ON d.d_value = s.state and d.d_code=\'project_service_state\'', 'LEFT')
            ->where($where)->order($order)->select();
        $startup = false;
        $nlist = array();
        if ($list) {
            foreach ($list as $k => $v) {
                if ($v['sid']) {
                    $stemp = M('Service')->field('description,mid')->where('sid = ' . $v['sid'])->find();
                    $sdescription = $stemp['description'];
                    $smid = $stemp['mid'];
                    $smh = M('ModuleHelp')->where('mid = ' . $smid)->count();
                    if ($sdescription || $smh) {
                        $list[$k]['bulb'] = 1;
                    }
                }
                if ($v['s_description']) {
                    $str = strip_tags(htmlspecialchars_decode($v['s_description']));
                    $list[$k]['title_show'] = $str;
                } else {
                    if ($v['gname']) {
                        $list[$k]['title_show'] = $v['gname'] . '-' . $v['o_name'] . '-' . $v['sname'];
                    } else {
                        if ($v['o_name'] || $v['sname']) {
                            $list[$k]['title_show'] = $v['o_name'] . '-' . $v['sname'];
                        } else {
                            $list[$k]['title_show'] = $v['title'];
                        }

                    }

                }
            }

            foreach ($list as $k => $v) {
                $listpid = $v['pid'] ?: 'xx';
                $nlist[$listpid]['mid'] = $listpid;
                $nlist[$listpid]['mname'] = $v['pname'];
                $nlist[$listpid]['list'][] = $v;
            }
        }

        if (I('get.exportexcel') == 1) {
            $list = $Model->alias('s')->field(array(
                's.*',
                'm.name as o_name',
                'g.name as gname',
                's1.name as sname',
                's1.description as s_description',
                '(select count(1) from ot_service_doc sd where sd.sid = s.sid) as sdc'
            ))->join('ot_module m ON m.mid = s.mid', 'LEFT')
                ->join('ot_service s1 ON s1.sid = s.sid', 'LEFT')
                ->join('ot_group g ON s.groupid = g.groupid', 'LEFT')
                ->where($where)->order($order)->select();
            if ($list) {
                foreach ($list as $k => $v) {
                    if ($v['s_description']) {
                        $str = strip_tags(htmlspecialchars_decode($v['s_description']));
                        $list[$k]['title_show'] = $str;
                    } else {
                        if ($v['gname']) {
                            $list[$k]['title_show'] = $v['gname'] . '-' . $v['o_name'] . '-' . $v['sname'];
                        } else {
                            if ($v['o_name'] || $v['sname']) {
                                $list[$k]['title_show'] = $v['o_name'] . '-' . $v['sname'];
                            } else {
                                $list[$k]['title_show'] = $v['title'];
                            }

                        }

                    }
                }
            }
            $this->serviceExport($list, $project['name']);
        }
        $logs = M("Log")->where(array("pid" => $id, 'outtype' => 'ot_todo'))->order("addtime asc")->select();
        $this->assign("logs", $logs);

        $this->assign('_list', $nlist);
        //$Page->setConfig('theme', '%FIRST% %UP_PAGE% %LINK_PAGE% %DOWN_PAGE% %END% %HEADER%');
        //$show = $Page->show();
        //$this->assign('_page', $show);
        $this->meta_title = '内容清单';
        if ($count == 0) {
            $this->assign('notList', 1);
        }
        $this->assign('startup', $startup);
        $this->rootMbx('项目范围', $project);
        $this->assign('actionName', 'projection');
        $this->assign('fourtitle', 'resourceplan');

        $this->display();
    }

    public function service1()
    {
        $id = I("get.id");
        if (empty($id)) {
            $this->error('项目不存在！');
        }
        $config = array(
            "actionURL" => "/Admin/ProjectNew/service1",
            "operators" => array("=" => "=", "!=" => "!=", ">" => ">", ">=" => ">=", "<" => "<", "<=" => "<=", "include" => "包含"),
            "params" => array(
                0 => array('str' => '标准服务', 'fieldname' => 'g.name', 'operator' => 'include', 'control' => 'input', 'values' => "")
            , 1 => array('str' => '模块', 'fieldname' => 'm.name', 'operator' => 'include', 'control' => 'input', 'values' => '')
            , 2 => array('str' => '项目组', 'fieldname' => 'g.name', 'operator' => 'include', 'control' => 'select', 'values' => array())
            , 3 => array('str' => '任务', 'fieldname' => 's.title', 'operator' => 'include', 'control' => 'input', 'values' => '')
            , 4 => array('str' => '是否拆觖', 'fieldname' => 's.state', 'operator' => '=', 'control' => 'select', 'values' => array("" => "", "1" => "已启动", "0" => "未启动"))
            , 5 => array('str' => '开始时间', 'fieldname' => 's.pstime', 'operator' => '=', 'control' => 'input', 'values' => '', 'class' => 'date')
            , 6 => array('str' => '结束时间', 'fieldname' => 's.petime', 'operator' => '=', 'control' => 'input', 'values' => "", "class" => "date")
            , 7 => array('str' => '周期', 'fieldname' => 's.days', 'operator' => '=', 'control' => 'input', 'values' => '')
            , 8 => array('str' => '工时', 'fieldname' => 's.hours', 'operator' => '=', 'control' => 'input', 'values' => '')
            , 9 => array('str' => '执行人', 'fieldname' => 's.assigneduid', 'operator' => 'include', 'control' => 'select', 'values' => array())
            , 10 => array('str' => '审核人', 'fieldname' => 's.checkuid', 'operator' => 'include', 'control' => 'select', 'values' => array())
            , 11 => array('str' => '是否里程碑', 'fieldname' => 's.milestone', 'operator' => '=', 'control' => 'select', 'values' => array('' => '', "0" => '否', '1' => '是'))
            , 12 => array('str' => '是否交付清单', 'fieldname' => 's.delivery', 'operator' => '=', 'control' => 'select', 'values' => array('' => '', '0' => '否', '1' => '是'))
            )
        );
        if ($config && $config['params']) {
            //执行和审核人
            $assigned = M('Member')->field('uid,nickname')->where('status = 1')->select();
            $massign = array("" => "");
            if ($assigned) {
                foreach ($assigned as $v) {
                    $massign[$v['uid']] = $v['nickname'];
                }
            }
            //项目组
            $mgp = array("" => "");
            $group = M('Group')->field('groupid,name')->order('sort_order asc')->select();
            if ($group) {
                foreach ($group as $vo) {
                    $mgp[$vo['groupid']] = $vo['name'];
                }
            }
            $config['params'][2]['values'] = $mgp;
            $config['params'][9]['values'] = $massign;
            $config['params'][10]['values'] = $massign;
        }
        $this->setSearchConfig($config);
        $project = $this->db
            ->field('p.*,o.code oname,o.chance,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d3.name dname,m.nickname mname')
            ->alias('p')
            ->join('ot_offer o on p.oid = o.oid', 'LEFT')
            ->join('ot_dept d3 on p.orgid = d3.did', 'LEFT')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
            ->join('ot_customer c on p.cid = c.cid', 'LEFT')
            ->join('ot_member m on p.sale = m.uid', 'LEFT')
            ->where('p.pid=' . $id)
            ->find();

        $project['description'] = htmlspecialchars_decode($project['description']);
        $project['risk'] = htmlspecialchars_decode($project['risk']);
        $project['feedback'] = htmlspecialchars_decode($project['feedback']);

        $this->assign('p', $project);
        if (I('sort', '') && I('order', '')) {
            $order = I("sort") . " " . I("order");
        } else {
            $order = 's.sort_order asc';
            $this->assign('orderBy', $order);
        }
        $where = $this->getCondition();
        $where['_string'] .= " and s.delivery='1'";
        $Model = M('ProjectService');
        $where ['_string'] .= " and s.pid='{$id}'";
        $count = $Model->alias('s')->join('ot_module m ON m.mid = s.mid', 'LEFT')->join('ot_service s1 ON s1.sid = s.sid', 'LEFT')
            ->join('ot_group g ON s.groupid = g.groupid', 'LEFT')
            ->where($where)->count();
        $Page = new \Think\Page ($count, 20);

        $list = $Model->alias('s')->field(array(
            's.*',
            'm.name as o_name',
            'g.name as gname',
            's1.name as sname',
            's1.description as s_description',
            '(select count(1) from ot_service_doc sd where sd.sid = s.sid) as sdc'
        ))->join('ot_module m ON m.mid = s.mid', 'LEFT')
            ->join('ot_service s1 ON s1.sid = s.sid', 'LEFT')
            ->join('ot_group g ON s.groupid = g.groupid', 'LEFT')
            ->where($where)->order($order)->limit($Page->firstRow . ',' . $Page->listRows)->select();
        $nlist = array();
        if ($list) {
            foreach ($list as $k => $v) {
                if ($v['s_description']) {
                    $str = strip_tags(htmlspecialchars_decode($v['s_description']));
                    $list[$k]['title_show'] = $str;
                } else {
                    if ($v['gname']) {
                        $list[$k]['title_show'] = $v['gname'] . '-' . $v['o_name'] . '-' . $v['sname'];
                    } else {
                        if ($v['o_name'] || $v['sname']) {
                            $list[$k]['title_show'] = $v['o_name'] . '-' . $v['sname'];
                        } else {
                            $list[$k]['title_show'] = $v['title'];
                        }

                    }

                }
            }

            foreach ($list as $k => $v) {
                $listpid = $v['pid'] ?: 'xx';
                $nlist[$listpid]['mid'] = $listpid;
                $nlist[$listpid]['mname'] = $v['pname'];
                $nlist[$listpid]['list'][] = $v;
            }
        }

        if (I('get.exportexcel') == 1) {
            $list = $Model->alias('s')->field(array(
                's.*',
                'm.name as o_name',
                'g.name as gname',
                's1.name as sname',
                's1.description as s_description',
                '(select count(1) from ot_service_doc sd where sd.sid = s.sid) as sdc'
            ))->join('ot_module m ON m.mid = s.mid', 'LEFT')
                ->join('ot_service s1 ON s1.sid = s.sid', 'LEFT')
                ->join('ot_group g ON s.groupid = g.groupid', 'LEFT')
                ->where($where)->order($order)->select();
            if ($list) {
                foreach ($list as $k => $v) {
                    if ($v['s_description']) {
                        $str = strip_tags(htmlspecialchars_decode($v['s_description']));
                        $list[$k]['title_show'] = $str;
                    } else {
                        if ($v['gname']) {
                            $list[$k]['title_show'] = $v['gname'] . '-' . $v['o_name'] . '-' . $v['sname'];
                        } else {
                            if ($v['o_name'] || $v['sname']) {
                                $list[$k]['title_show'] = $v['o_name'] . '-' . $v['sname'];
                            } else {
                                $list[$k]['title_show'] = $v['title'];
                            }

                        }

                    }
                }
            }
            $this->serviceExport($list);
        }
        $logs = M("Log")->where(array("pid" => $id, 'outtype' => 'ot_todo'))->order("addtime asc")->select();
        $this->assign("logs", $logs);
        $this->assign('_list', $nlist);
        $Page->setConfig('theme', '%FIRST% %UP_PAGE% %LINK_PAGE% %DOWN_PAGE% %END% %HEADER%');
        $show = $Page->show();
        $this->assign('_page', $show);
        $this->meta_title = '内容清单';

        $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
        $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');

        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
        $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectNew/view?id=' . $project['pid']));
        $root_mbx[] = array('title' => '内容清单', 'url' => '');
        $this->assign('root_mbx', $root_mbx);

        $this->assign('from_url', $from_url);
        $this->assign('actname', "service1");
        $this->display("service");

    }

    public function service2()
    {
        $id = I("get.id");
        if (empty($id)) {
            $this->error('项目不存在！');
        }
        $config = array(
            "actionURL" => "/Admin/ProjectNew/service2",
            "operators" => array("=" => "=", "!=" => "!=", ">" => ">", ">=" => ">=", "<" => "<", "<=" => "<=", "include" => "包含"),
            "params" => array(
                0 => array('str' => '标准服务', 'fieldname' => 'g.name', 'operator' => 'include', 'control' => 'input', 'values' => "")
            , 1 => array('str' => '模块', 'fieldname' => 'm.name', 'operator' => 'include', 'control' => 'input', 'values' => '')
            , 2 => array('str' => '项目组', 'fieldname' => 'g.name', 'operator' => 'include', 'control' => 'select', 'values' => array())
            , 3 => array('str' => '任务', 'fieldname' => 's.title', 'operator' => 'include', 'control' => 'input', 'values' => '')
            , 4 => array('str' => '是否拆觖', 'fieldname' => 's.state', 'operator' => '=', 'control' => 'select', 'values' => array("" => "", "1" => "已启动", "0" => "未启动"))
            , 5 => array('str' => '开始时间', 'fieldname' => 's.pstime', 'operator' => '=', 'control' => 'input', 'values' => '', 'class' => 'date')
            , 6 => array('str' => '结束时间', 'fieldname' => 's.petime', 'operator' => '=', 'control' => 'input', 'values' => "", "class" => "date")
            , 7 => array('str' => '周期', 'fieldname' => 's.days', 'operator' => '=', 'control' => 'input', 'values' => '')
            , 8 => array('str' => '工时', 'fieldname' => 's.hours', 'operator' => '=', 'control' => 'input', 'values' => '')
            , 9 => array('str' => '执行人', 'fieldname' => 's.assigneduid', 'operator' => 'include', 'control' => 'select', 'values' => array())
            , 10 => array('str' => '审核人', 'fieldname' => 's.checkuid', 'operator' => 'include', 'control' => 'select', 'values' => array())
            , 11 => array('str' => '是否里程碑', 'fieldname' => 's.milestone', 'operator' => '=', 'control' => 'select', 'values' => array('' => '', "0" => '否', '1' => '是'))
            , 12 => array('str' => '是否交付清单', 'fieldname' => 's.delivery', 'operator' => '=', 'control' => 'select', 'values' => array('' => '', '0' => '否', '1' => '是'))
            )
        );
        if ($config && $config['params']) {
            //执行和审核人
            $assigned = M('Member')->field('uid,nickname')->where('status = 1')->select();
            $massign = array("" => "");
            if ($assigned) {
                foreach ($assigned as $v) {
                    $massign[$v['uid']] = $v['nickname'];
                }
            }
            //项目组
            $mgp = array("" => "");
            $group = M('Group')->field('groupid,name')->order('sort_order asc')->select();
            if ($group) {
                foreach ($group as $vo) {
                    $mgp[$vo['groupid']] = $vo['name'];
                }
            }
            $config['params'][2]['values'] = $mgp;
            $config['params'][9]['values'] = $massign;
            $config['params'][10]['values'] = $massign;
        }
        $this->setSearchConfig($config);
        $project = $this->db
            ->field('p.*,o.code oname,o.chance,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d3.name dname,m.nickname mname')
            ->alias('p')
            ->join('ot_offer o on p.oid = o.oid', 'LEFT')
            ->join('ot_dept d3 on p.orgid = d3.did', 'LEFT')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
            ->join('ot_customer c on p.cid = c.cid', 'LEFT')
            ->join('ot_member m on p.sale = m.uid', 'LEFT')
            ->where('p.pid=' . $id)
            ->find();

        $project['description'] = htmlspecialchars_decode($project['description']);
        $project['risk'] = htmlspecialchars_decode($project['risk']);
        $project['feedback'] = htmlspecialchars_decode($project['feedback']);

        $this->assign('p', $project);
        if (I('sort', '') && I('order', '')) {
            $order = I("sort") . " " . I("order");
        } else {
            $order = 's.sort_order asc';
            $this->assign('orderBy', $order);
        }
        $where = $this->getCondition();
        $where['_string'] .= " and s.delivery='0'";
        $Model = M('ProjectService');
        $where ['_string'] .= " and s.pid='{$id}'";
        $count = $Model->alias('s')->join('ot_module m ON m.mid = s.mid', 'LEFT')->join('ot_service s1 ON s1.sid = s.sid', 'LEFT')
            ->join('ot_group g ON s.groupid = g.groupid', 'LEFT')
            ->where($where)->count();
        $Page = new \Think\Page ($count, 20);

        $list = $Model->alias('s')->field(array(
            's.*',
            'm.name as o_name',
            'g.name as gname',
            's1.name as sname',
            's1.description as s_description',
            '(select count(1) from ot_service_doc sd where sd.sid = s.sid) as sdc'
        ))->join('ot_module m ON m.mid = s.mid', 'LEFT')
            ->join('ot_service s1 ON s1.sid = s.sid', 'LEFT')
            ->join('ot_group g ON s.groupid = g.groupid', 'LEFT')
            ->where($where)->order($order)->limit($Page->firstRow . ',' . $Page->listRows)->select();

        $nlist = array();
        if ($list) {
            foreach ($list as $k => $v) {
                if ($v['s_description']) {
                    $str = strip_tags(htmlspecialchars_decode($v['s_description']));
                    $list[$k]['title_show'] = $str;
                } else {
                    if ($v['gname']) {
                        $list[$k]['title_show'] = $v['gname'] . '-' . $v['o_name'] . '-' . $v['sname'];
                    } else {
                        if ($v['o_name'] || $v['sname']) {
                            $list[$k]['title_show'] = $v['o_name'] . '-' . $v['sname'];
                        } else {
                            $list[$k]['title_show'] = $v['title'];
                        }

                    }

                }
            }

            foreach ($list as $k => $v) {
                $listpid = $v['pid'] ?: 'xx';
                $nlist[$listpid]['mid'] = $listpid;
                $nlist[$listpid]['mname'] = $v['pname'];
                $nlist[$listpid]['list'][] = $v;
            }
        }

        if (I('get.exportexcel') == 1) {
            $list = $Model->alias('s')->field(array(
                's.*',
                'm.name as o_name',
                'g.name as gname',
                's1.name as sname',
                's1.description as s_description',
                '(select count(1) from ot_service_doc sd where sd.sid = s.sid) as sdc'
            ))->join('ot_module m ON m.mid = s.mid', 'LEFT')
                ->join('ot_service s1 ON s1.sid = s.sid', 'LEFT')
                ->join('ot_group g ON s.groupid = g.groupid', 'LEFT')
                ->where($where)->order($order)->select();
            if ($list) {
                foreach ($list as $k => $v) {
                    if ($v['s_description']) {
                        $str = strip_tags(htmlspecialchars_decode($v['s_description']));
                        $list[$k]['title_show'] = $str;
                    } else {
                        if ($v['gname']) {
                            $list[$k]['title_show'] = $v['gname'] . '-' . $v['o_name'] . '-' . $v['sname'];
                        } else {
                            if ($v['o_name'] || $v['sname']) {
                                $list[$k]['title_show'] = $v['o_name'] . '-' . $v['sname'];
                            } else {
                                $list[$k]['title_show'] = $v['title'];
                            }

                        }

                    }
                }
            }
            $this->serviceExport($list);
        }
        $logs = M("Log")->where(array("pid" => $id, 'outtype' => 'ot_todo'))->order("addtime asc")->select();
        $this->assign("logs", $logs);
        $this->assign('_list', $nlist);
        $Page->setConfig('theme', '%FIRST% %UP_PAGE% %LINK_PAGE% %DOWN_PAGE% %END% %HEADER%');
        $show = $Page->show();
        $this->assign('_page', $show);
        $this->meta_title = '内容清单';

        $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
        $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');

        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
        $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectNew/view?id=' . $project['pid']));
        $root_mbx[] = array('title' => '内容清单', 'url' => '');
        $this->assign('root_mbx', $root_mbx);

        $this->assign('from_url', $from_url);

        $this->assign('actname', "service2");
        $this->display("service");

    }

    // 检查新建内容的计划时间是否超出项目周期 : LGW
    public function checkContenttime()
    {
        $pid = I('get.pid');
        $psid = I('post.psids') ?: I('get.psids');
        $pstime = I('get.pstime');
        $petime = I('get.petime');
        $title = I('get.title');
        $project = $this->db
            ->alias('p')
            ->field('p.pstime,p.petime')
            ->where('p.pid=' . $pid)
            ->find();
        $msg = '';
        $ptStime = $project['pstime'];    // 项目的计划开始日期
        $ptEtime = $project['petime'];    // 项目的计划结束日期
        $psids = [];    // 批量操作
        $pstimes = [];
        $petimes = [];
        $psid and $psids = explode(',', $psid);
        $pstime and $pstimes = explode(',', $pstime);
        $petime and $petimes = explode(',', $petime);
        $title and $title = explode(',', $title);
        $list = [];
        $map = [];
        $map['pid'] = $pid;
        if (!empty($psids) && is_array($psids)) {
            foreach ($psids as $k => $v) {
                $list[$k]['psid'] = $v;
                $list[$k]['pstime'] = $pstimes[$k];
                $list[$k]['petime'] = $petimes[$k];
                $list[$k]['title'] = $title[$k];
            }

        } else {
            $list[0]['pstime'] = $pstimes[0];
            $list[0]['petime'] = $petimes[0];
            $list[0]['title'] = $title[0];
        }
        if ($list) {
            foreach ($list as $key => $val) {
                $val['pstime'] ? $pstime = strtotime($val['pstime']) : $pstime = '';
                $val['petime'] ? $petime = strtotime($val['petime']) : $petime = '';
                $title = $val['title'];
                $v = array();
                if ($val['psid']) {
                    $map['psid'] = $psid;
                    $v = M('ProjectService')->field('psid,pid,title,days,state,pcid,hours')->where($map)->find();
                }

                if ($pstime && $pstime < $ptStime && $ptStime) {
                    $msg .= "<strong>『" . $title . "』</strong> <span class='textc'>开始时间</span> <strong>" . date('y.m.d', $pstime) . '</strong></br>';
                    if ($ptEtime) {
                        $msg .= "<span class='textr'>超出</span> <strong>『项目范围』</strong> <strong>" . date('y.m.d', $ptStime) . "~" . date('y.m.d', $ptEtime) . "</strong></br></br>";

                    } else {
                        $msg .= "<span class='textr'>超出</span> <strong>『项目范围』</strong> <strong>" . date('y.m.d', $ptStime) . "</strong></br></br>";

                    }
                }
                if ($petime && $petime > $ptEtime && $ptEtime) {
                    $msg .= "<strong>『" . $title . "』</strong> <span class='textc'>结束时间</span> <strong>" . date('y.m.d', $petime) . '</strong></br>';
                    if ($ptStime) {
                        $msg .= "<span class='textr'>超出</span> <strong>『项目范围』</strong> <strong>" . date('y.m.d', $ptStime) . "~" . date('y.m.d', $ptEtime) . "</strong></br></br>";
                    } else {
                        $msg .= "<span class='textr'>超出</span> <strong>『项目范围』</strong> <strong>" . date('y.m.d', $ptEtime) . "</strong></br></br>";
                    }
                }
                $v and $procon = M('Milestone')->alias('m')->field('m.mtime,pc.name')->join("ot_project_config pc on m.pcid = pc.pid")->where("m.pcid=" . $v['pcid'] . ' and m.pid = ' . $v['pid'])->find();
                if ($procon) {
                    $mtime = $procon['mtime'];
                    $mname = $procon['name'];
                    if ($petime && $petime > $mtime && $mtime) {
                        $msg .= "<strong>『" . $title . "』</strong> <span class='textc'>结束时间</span> <strong>" . date('y.m.d', $petime) . '</strong></br>';
                        $msg .= "<span class='textr'>超出</span> <strong>『里程碑{$mname}』</strong> <span class='textc'>时间点</span> <strong>" . date('y.m.d', $mtime) . "</strong></br></br>";
                    }
                }
            }
        }

        /*  if ($pstime) {
              // 内容的计划开始时间不能小于项目的计划开始时间
              if (strtotime($pstime) < $project['pstime']) {
                  $msg['pstime'] = '项目计划开始时间从' . date('Y/m/d', $project['pstime']) . '开始，' . $pstime . '已超出范围，请重新设置计划开始时间';
              }
          }*/
        /* if ($petime && $project['petime']) {
             // 内容的计划结束时间不能大于项目的计划结束时间
             if (strtotime($petime) > $project['petime']) {
                 $msg['petime'] = '项目计划结束时间至' . date('Y/m/d', $project['petime']) . '结束，' . $petime . '已超出范围，请重新设置计划结束时间';
             }
         }*/

        $msg ? $this->json_error($msg, false) : $this->json_success($msg, false);
    }

    /*添加项目任务*/
    public function serviceadd()
    {
        $pid = I('get.pid');
        $this->project_out($pid);//判断项目是否可以操作
        $project = $this->db
            ->field('p.name,p.code,p.state,progress,d1.d_key sname,p.pid')
            ->alias('p')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->where('p.pid=' . $pid)
            ->find();
        $this->assign('p', $project);

        if (IS_POST) {
            $fenjie = I('get.fenjie');
            $project = $this->db->field('pstime,petime,state')->where('pid=' . $pid)->find();
            if ($project['state'] == 2 || $project['state'] == -1) {
                $this->error("当前项目已结束，无法添加任务");
            }
            $title = I('post.title');
            $assigneduid = I('post.assigneduid');
            $checkuid = I('post.checkuid');
            $days = I('post.days');
            $sort_order = I('post.sort_order');
            $milestone = I('post.milestone');
            $delivery = I('post.delivery');
            $description = I('post.description');
            $quans = I('post.quans');
            $hours = I('post.hours');
            $groupid = I('post.groupid', 0);
            $prepsid = I('post.prepsid');
            $pstime = strtotime($_POST['pstime']);
            $petime = strtotime($_POST['petime']);
            if (empty($title)) {
                $this->error('任务标题不能为空');
            }

            if ($hours && (!is_numeric($hours) || $hours < 0)) {
                $this->error('工时填写有误');
            }
            /* if ($pstime < $project['pstime']) {
                 $this->error('项目计划开始时间从' . date('Y/m/d', $project['pstime']) . '开始，' . date('Y/m/d', $pstime) . '已超出范围，请重新设置计划开始时间');
             }
             if ($petime > $project['petime']) {
                 $this->error('项目计划结束时间至' . date('Y/m/d', $project['petime']) . '结束，' . date('Y/m/d', $petime) . '已超出范围，请重新设置计划结束时间');
             }*/
            $data = array(
                'title' => $title,
                'hours' => $hours,
                'quans' => $quans,
                'assignedname' => get_nickname($assigneduid) ? get_nickname($assigneduid) : get_username($assigneduid),
                'assigneduid' => $assigneduid,
                'checkuname' => get_nickname($checkuid) ? get_nickname($checkuid) : get_username($checkuid),
                'checkuid' => $checkuid,
                'groupid' => $groupid,
                'pstime' => $pstime,
                'petime' => $petime,
                'days' => $days,
                'sort_order' => $sort_order,
                'milestone' => $milestone,
                'delivery' => $delivery,
                'description' => $description,
                'pid' => $pid,
                'lastedituid' => UID,
                'lastedituname' => get_nickname(UID) ? get_nickname(UID) : get_username(UID),
                'lastedittime' => time(),
                'prepsid' => $prepsid
            );
            if ($fenjie) {
                $data['state'] = 1;
                if (empty($assigneduid)) {
                    $this->error("请选择执行人");
                }
                if (empty($pstime)) {
                    $this->error('计划开始时间不能为空');
                }
                if ($petime < $pstime) {
                    $this->error('计划结束时间不能小于计划开始时间');
                }
                if (!is_numeric($days) || $days < 0) {
                    $this->error('周期不能为空');
                }
                /* if (!is_numeric($hours) || $hours < 0) {
                   $this->error('工时不能为空');
               }*/
            }
            $psid = M('ProjectService')->add($data);
	        //重新排序
	        rearrangement($pid);

            //更新项目path字段
            changeProjectPath($pid);
            if ($psid) {
                $this->updateMilestone($psid); // 更新里程碑 : LGW
                /*action_log_new (array('outtype' => 'ot_project_service','outkey' => $psid,'pid' => $pid,'action' => 'create','comment' => '添加任务'));*/
                if ($fenjie) {
                    $addtime = time();
                    $uid = UID;
                    $a = 1;
                    $uname = get_nickname(is_login()) ? get_nickname(is_login()) : get_username(is_login());
                    $sql = "insert into ot_task(pid,psid,pcid,groupid,sid,mid,title,description,
							assigneduid,assignedname,pstime,petime,days,hours,checkuid,checkuname,delivery,amount,state,uid,uname,addtime,manageruid,manageruname,assignedtime) select pid,psid,pcid,groupid,sid,mid,title,description,
							assigneduid,assignedname,pstime,petime,days,hours,checkuid,checkuname,delivery,amount," . $a . "," . $uid . ",'" . $uname . "'," . $addtime . "," . $uid . ",'" . $uname . "'," . $addtime . " from ot_project_service where psid={$psid}";
                    M()->execute($sql);
                    $roleid = M('ProjectRole')->where("name='项目执行'")->getfield('prid');
                    if ($roleid) {
                        $tmp4 = M('Takepart')->field('tpid')->where('uid=' . $assigneduid . ' and pid = ' . $pid)->find();
                        if (empty($tmp4['tpid'])) {
                            $data4 = array(
                                'pid' => $_POST['pid'],
                                'uid' => $_POST['assigneduid'],
                                'uname' => get_nickname($_POST['assigneduid']) ? get_nickname($_POST['assigneduid']) : get_username($_POST['assigneduid']),
                                'addtime' => time(),
                                'adduname' => get_nickname(UID),
                                'adduid' => UID,
                                'roleid' => $roleid,
                                'psid' => $psid,
                            );
                            M('Takepart')->add($data4);
                        }
                    }
                    if (M('Milestone')->where(array('pid' => $pid, 'name' => '项目开始', 'etime' => 0, 'type' => 0))->find()) {
                        M('Milestone')->where(array('pid' => $pid, 'name' => '项目开始', 'etime' => 0, 'type' => 0))->save(array('completion' => 100, "etime" => time()));
                    }
                }
                upBudget($pid);//成本预算
                workbreak_alter(0, $psid);
                $tid = M('task')->where('pid=' . $pid)->getfield('tid');
                updateprocess($tid);
                $this->redirect('ProjectNew/service?id=' . $pid);

            } else {
                $this->error('添加失败！');
            }
        } else {
            //执行人
            $pm = M('Member')->field('uid,nickname')->select();
            $this->assign('pm', $pm);
            //审核人
            $sales = M('Member')->field('uid,nickname')->select();
            $this->assign('sales', $sales);
            // 服务角色
            $group = M('Group')->field('groupid,name')->order('sort_order asc')->select();
            $this->assign('group', $group);
            //排序
            $sort = M('ProjectService')->max('sort_order');
            $sort = $sort + 1;
            $this->assign('sort', $sort);
            $this->assign('pid', $pid);
            $this->assign('pstime', date('Y/m/d', time()));
            $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
            $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');

            $root_mbx = array();
            $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
            $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
            $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectNew/view?id=' . $project['pid']));
            $root_mbx[] = array('title' => '规划', 'url' => U('ProjectNew/service?id=' . $project['pid']));
            $root_mbx[] = array('title' => '项目范围', 'url' => U('ProjectNew/service?id=' . $project['pid']));
            $root_mbx[] = array('title' => '添加任务', 'url' => '');
            $this->assign('root_mbx', $root_mbx);
            $this->assign('actionName', 'projection');
            $this->assign('fourtitle', 'service');
            $this->assign('from_url', $from_url);

            $this->display();
        }

    }

    /*编辑任务*/
    public function servicedit()
    {
        $psid = I('get.psid');
        $state = M('ProjectService')->where('psid=' . $psid)->getfield('state');
        $this->assign('psid', $psid);
        $this->assign('state', $state);
        if (IS_POST) {
            $psid = I('post.psid');
            $pid = I('post.pid');
            $this->project_out($pid);//判断项目是否可以操作
            $fenjie = I('post.fenjie');
            if ($fenjie) {
                $ProjectService = M('ProjectService')->field('state,groupid')->where('psid=' . $psid)->find();
                if ($ProjectService['state']) {
                    $this->error("当前任务已启动，无法再次启动");
                }
            }

            $project = $this->db->field('pstime,petime,state')->where('pid=' . $pid)->find();
            if ($project['state'] == 2 || $project['state'] == -1) {
                $this->error("当前项目已结束，无法添加任务");
            }
            $title = I('post.title');
            $assigneduid = I('post.assigneduid');
            $checkuid = I('post.checkuid');
			$groupid = I('post.groupid', 0);
            $days = I('post.days');
            $milestone = I('post.milestone');
            $delivery = I('post.delivery');
            $description = I('post.description');
            $quans = I('post.quans');
            $hours = I('post.hours');
            $prepsid = I('post.prepsid');
            if (empty($title)) {
                $this->error('任务标题不能为空');
            }
            $pstime = strtotime($_POST['pstime']);
            $petime = strtotime($_POST['petime']);

            /* if ($pstime < $project['pstime']) {
                 $this->error('项目计划开始时间从' . date('Y/m/d', $project['pstime']) . '开始，' . date('Y/m/d', $pstime) . '已超出范围，请重新设置计划开始时间');
             }
             if ($petime > $project['petime']) {
                 $this->error('项目计划结束时间至' . date('Y/m/d', $project['petime']) . '结束，' . date('Y/m/d', $petime) . '已超出范围，请重新设置计划结束时间');
             }*/
            //计算挣值
	        $projectService = M('ProjectService')->alias('ps')->field('s.maxprice,ps.osid')->where('psid=' . $psid)->join('ot_service s on s.sid = ps.sid','left')->find();
	        if(empty($projectService['osid'])){
		        $amount = round($projectService['maxprice'] * $quans ,2);
	        }else{
		        $amount = 0;
	        }
            $data = array(
                'title' => $title,
                'quans' => $quans,
                'hours' => $hours,
                'assignedtime' => time(),
                'assignedname' => get_nickname($assigneduid) ? get_nickname($assigneduid) : get_username($assigneduid),
                'assigneduid' => $assigneduid,
                'checkuname' => get_nickname($checkuid) ? get_nickname($checkuid) : get_username($checkuid),
                'checkuid' => $checkuid,
				'groupid' => $groupid,
                'pstime' => $pstime,
                'petime' => $petime,
                'days' => $days,
                'milestone' => $milestone,
                'delivery' => $delivery,
                'description' => $description,
                'pid' => $pid,
                'lastedituid' => UID,
                'lastedituname' => get_nickname(UID) ? get_nickname(UID) : get_username(UID),
                'lastedittime' => time(),
                'prepsid' => $prepsid,
                'amount' => $amount,
            );
            if ($fenjie) {
                $data['state'] = 1;
                if (empty($assigneduid)) {
                    $this->error("请选择执行人");
                }
                if (empty($pstime) || $pstime == '-') {
                    $this->error('计划开始时间不能为空');
                }
                if ($petime < $pstime || $petime == '-') {
                    $this->error('计划结束时间不能小于计划开始时间');
                }
                if (!is_numeric($days) || $days < 0) {
                    $this->error('周期不能为空');
                }
                /* if (!is_numeric($hours) || $hours < 0) {
                     $this->error('工时不能为空');
                 }*/
            }
            $psid1 = M('ProjectService')->where('psid=' . $psid)->save($data);

            if ($psid1 !== false) {
                $this->updateMilestone($psid); // 更新里程碑 : LGW
                /*action_log_new (array('outtype' => 'ot_project_service','outkey' => $psid,'pid' => $pid,'action' => 'edit','comment' => '编辑任务'));*/
                if ($fenjie) {
                    $addtime = time();
                    $uid = UID;
                    $a = 1;
                    $uname = get_nickname(is_login()) ? get_nickname(is_login()) : get_username(is_login());
                    $sql = "insert into ot_task(pid,psid,pcid,groupid,sid,mid,title,description,
							assigneduid,assignedname,pstime,petime,days,hours,checkuid,checkuname,delivery,amount,state,uid,uname,addtime,manageruid,manageruname,assignedtime) select pid,psid,pcid,groupid,sid,mid,title,description,
							assigneduid,assignedname,pstime,petime,days,hours,checkuid,checkuname,delivery,amount," . $a . "," . $uid . ",'" . $uname . "'," . $addtime . "," . $uid . ",'" . $uname . "'," . $addtime . " from ot_project_service where psid={$psid}";
                    M()->execute($sql);
                    $roleid = M('ProjectRole')->where("name='项目执行'")->getfield('prid');
                    if ($roleid) {
                        $tmp4 = M('Takepart')->field('tpid')->where('uid=' . $assigneduid . ' and pidh = ' . $pid)->find();
                        if (empty($tmp4['tpid'])) {
                            $data4 = array(
                                'pid' => $_POST['pid'],
                                'uid' => $_POST['assigneduid'],
                                'uname' => get_nickname($_POST['assigneduid']) ? get_nickname($_POST['assigneduid']) : get_username($_POST['assigneduid']),
                                'addtime' => time(),
                                'adduname' => get_nickname(UID),
                                'adduid' => UID,
                                'roleid' => $roleid,
                            );
                            M('Takepart')->add($data4);
                        }
                    }

                    // 拆分完项目状态变为进行中 : LGW
                    $pt = M('Project')->where("pid=" . $pid)->find();
                    if ($pt['state'] == 0) {
                        $array = [];
                        $array['pid'] = $pid;
                        $array['state'] = Project::ONGOING;
                        $array['stime'] = time();
                        M('Project')->save($array);
                        $history = [];
                        $history[] = [
                            'field' => 'state',
                            'olddata' => Project::NOT_STARTED,
                            'newdata' => Project::ONGOING
                        ];
                        action_log_new(array('history' => $history, 'outtype' => 'ot_project', 'outkey' => $pid, 'pid' => $pid, 'action' => 'start', 'comment' => ''));
                    }
                    if (M('Milestone')->where(array('pid' => $pid, 'name' => '项目开始', 'etime' => 0, 'type' => 0))->find()) {
                        M('Milestone')->where(array('pid' => $pid, 'name' => '项目开始', 'etime' => 0, 'type' => 0))->save(array('completion' => 100, "etime" => time()));
                    }
                }
                upBudget($pid);//成本预算
                workbreak_alter(0, $psid);
                $tid = M('task')->where('pid=' . $pid)->getfield('tid');
                updateprocess($tid);
                $this->redirect('ProjectNew/service?id=' . $pid);
            } else {
                $this->error('编辑失败！');
            }
        } else {
            $this->assign('psids', $psid);
            //任务
            $service = M('ProjectService')->field(true)->where('psid=' . $psid)->order('sort_order desc')->find();
            //执行人
            // 标准服务求出服务模块下的服务角色 : LGW
            $module = M('module')->where('mid=' . $service['mid'])->getField('roles');
            $pm = '';
            if (empty($module)) {
                $did = M('Dept')->where('groupid=' . $service['groupid'])->getField('did');

                $dids = $this->get_son_ids($did);
                $pm = M('Member')->field('nickname,uid')->where('status=1 and dept in (' . $dids . ')')->select();
                if (empty($pm)) {
                    $pm = M('Member')->field('uid,nickname')->where('status = 1')->select();
                }
            } else {
                $modules = explode(',', $module);

                $didss = '';
                $where['_string'] = "1=1 and (";
                foreach ($modules as $k => $v) {
                    $k == 0 ? $con = '' : $con = 'or';
                    $where['_string'] .= $con . " CONCAT(',',d.groupids,',') like CONCAT('%,',$v,',%') ";
                }
                $where['_string'] .= ")";
                $did = M('Dept')->alias('d')->field('did')->where($where)->select();
                if (!empty($did)) {
                    foreach ($did as $k => $v) {
                        $didss .= $this->get_son_ids($v['did']) . ',';
                    }
                }
                $didss = trim($didss, ',');
                $didss = array_unique(explode(',', $didss));
                $didss = implode(',',$didss);
                $pm = M('Member')->field('nickname,uid')->where('status=1 and dept in (' . $didss . ')')->select();
                if (empty($pm)) {
                    $pm = M('Member')->field('uid,nickname')->where('status = 1')->select();
                }

            }

            $this->assign('pm', $pm);
            //项目组
            $group = M('Group')->field('groupid,name')->order('sort_order asc')->select();
            $this->assign('group', $group);

            $arr = array();
            foreach ($pm as $key => $vo) {
                $arr[] = $vo['nickname'];
            }
            if (!in_array($service['assignedname'], $arr)) {
                $service['canyuren'] = $service['assignedname'];
            }
            $this->assign('s', $service);
            //审核人
            $sales = M('Member')->field('uid,nickname')->where('status = 1')->select();
            $this->assign('sales', $sales);
            $this->assign('pid', $service['pid']);
            $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
            $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');
            $project = $this->db
                ->field('p.name,p.code,p.state,progress,d1.d_key sname,p.pid')
                ->alias('p')
                ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
                ->where('p.pid=' . $service['pid'])
                ->find();

            $this->assign('p', $project);
            $root_mbx = array();
            $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
            $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
            $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectNew/view?id=' . $project['pid']));
            $root_mbx[] = array('title' => '规划', 'url' => U('ProjectNew/service?id=' . $project['pid']));
            $root_mbx[] = array('title' => '项目范围', 'url' => U('ProjectNew/service?id=' . $project['pid']));
            $root_mbx[] = array('title' => '添加任务', 'url' => '');
            $this->assign('root_mbx', $root_mbx);
            $this->assign('actionName', 'projection');
            $this->assign('fourtitle', 'service');
            $this->assign('from_url', $from_url);

            $this->display();

        }
    }

    /*删除项目内容*/
    public function servicedelete()
    {
        $psid = (array)I('id');
        if (empty($psid[0])) {
            return $this->ajaxReturn(array('done' => '0', 'msg' => "请选择要操作的数据"));
        }
        $msg = '';
        $module = M('ProjectService');
        $pid = 0;
        foreach ($psid as $v) {
            $res = $module->where("psid = {$v}")->find();
            $pid = $res['pid'];
            $this->project_out($pid, 1);//判断项目是否可以操作
            if ($res['delivery'] == 0 && $res['state'] == 0 && $res['milestone'] == 0) {
                if (!$module->where("psid = {$v}")->delete()) {
                    $msg .= "『{$res['title']}』删除失败。\n";
                } else {
                    workbreak_alter($res['paid']);
                    $msg .= "『{$res['title']}』删除成功。\n";
                }
            } else {
                $msg .= "『{$res['title']}』删除失败，任务不可删除。\n";
            }
        }
        //更新项目path字段
        changeProjectPath($pid);
        upBudget($pid);//成本预算
        $tid = M('task')->where('pid=' . $pid)->getfield('tid');
        updateprocess($tid);
        return $this->ajaxReturn(array('done' => true, 'msg' => "{$msg}"));
    }

    /*引入报价单*/
	/**
	 *
	 */
	public function add_item()
    {

        $item_id = I("item_id", 0);//项目id
        $pid = I("pid", 0);//标准项目id
        $this->project_out($item_id);//判断项目是否可以操作
        $project = $this->db
            ->field('p.pid,p.name,p.code,p.state,progress,d1.d_key sname')
            ->alias('p')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->where('p.pid=' . $item_id)
            ->find();
        $this->assign('p', $project);

        // 获取所有的项目
        $ProjectConfig = M('ProjectConfig')->select();
        $ppid = I('get.ppid');
        if (!$ppid) {
            $ppid = $ProjectConfig [0] ['pid'];
            $this->assign('pname', $ProjectConfig [0] ['name']);
        } else {
            $p = M('ProjectConfig')->where(array('pid' => $ppid))->find();
            $this->assign('pname', $p ['name']);
        }
        $this->assign('ppid', $ppid);
        if (!IS_POST) {
            //更新排序
            if (isset($_GET['sort']) && isset($_GET['order'])) {
                $sort = strtolower(trim($_GET['sort']));
                $order = strtolower(trim($_GET['order']));
                if (!in_array($order, array('asc', 'desc'))) {
                    $sort = 'm.sort_order';
                    $order = 'asc';
                }
            } else {
                $sort = 's.sort_order';
                $order = 'asc';
            }
            $manme = I("manme", '');    // 服务模块
            $sname = I('sname', '');     // 服务内容

            if ($pid) {
                $pr01 = $this->pro_module->where('pid=' . $pid)->find();
                $where = 'p.pid = ' . $pid;
                $this->assign('module_name', $pr01['name']);
            } else {
                $pr01 = $this->pro_module->find();
                $pid = $pr01['pid'];
                $where = 'p.pid = ' . $pid;
                $this->assign('module_name', $pr01['name']);
            }
            $sidarr = M('ProjectService')->where('pid=' . $item_id . ' and sid !=0')->getField('sid', true);

            if ($sidarr) {
                $sids = implode(',', $sidarr);
                $sids and $where .= " and s.sid not in ($sids)";
            }

            if ($manme || $sname) {
                $where = [];
                $c1 = '1=1';
                if ($manme && $sname) {
                    $c2 = " and (m.name like '%{$manme}%' or s.name like '%{$sname}%')";
                    $c3 = '';
                } else {
                    $manme and $c2 = " and m.name like '%{$manme}%'";
                    $sname and $c3 = " and s.name like '%{$sname}%'";
                }
                $where['_string'] = "(($c1 $c2 $c3))";
                $sids and $where['_string'] .= " and s.sid not in ($sids)";
            }
            $this->assign('manme', $manme);
            $this->assign('sname', $sname);
            //项目
            /*private function getpro($item_id, $module, $id = 0, $ppid = 0) {*/
            $pro = $this->getpro($item_id, $this->pro_module, $ppid, $ppid);
            $pro = "<ul class='tree tree-lines'>" . substr($pro, 4);

            $this->assign('ProjectConfig', $pro);
            $count = M('Service')->alias('s')->join('ot_module m ON m.mid = s.mid', "left")
                ->join('ot_project_config p ON m.pid = p.pid', "left")
                ->join('ot_group ON s.groupid = ot_group.groupid', "left")
                ->join('ot_module m1 ON m1.mid = s.remid', 'left')
                ->join("ot_dictionary d ON d_code='reqgroup' and d.d_value = s.regroup", 'left')
                ->where($where)->count();

            $Page = new \Think\Page($count, 20);
            $list = M('Service')->alias('s')
                ->field(array('s.*', 'd.d_key as regroup_name', 'm1.name as remid_name', 'ot_group.name as g_name', 'm.name as o_name', 'ps.quans as sq', 'p.name as pname'))
                ->join('ot_project_service ps on ps.sid=s.sid and ps.pid=' . $item_id, 'left')
                ->join('ot_module m ON m.mid = s.mid', "left")
                ->join('ot_project_config p ON m.pid = p.pid', "left")
	            ->join('ot_group ON s.groupid = ot_group.groupid', "left")
                ->join('ot_module m1 ON m1.mid = s.remid', 'left')
                ->join("ot_dictionary d ON d_code='reqgroup' and d.d_value = s.regroup", 'left')
                ->where($where)
                ->order($sort . " " . $order, 's.sort_order asc', 's.mid asc')->select();
            $where1 = " and s.pid='" . $item_id . "'";
            $list_old = M('ProjectService')->alias('s')->field(array('s1.sid'))
                ->join('ot_module m ON m.mid = s.mid', 'LEFT')
                ->join('ot_project_config p ON m.pid = p.pid', "left")
                ->join('ot_service s1 ON s1.sid = s.sid', 'LEFT')
                ->join('ot_group g ON s.groupid = g.groupid', 'LEFT')
                ->where($where . $where1)->select();
            $nlist = array();
            if ($list) {
                foreach ($list as $k => $v) {
                    if ($v['sid']) {
                        $stemp = M('Service')->field('description,mid')->where('sid = ' . $v['sid'])->find();
                        $sdescription = $stemp['description'];
                        $smid = $stemp['mid'];
                        $smh = M('ModuleHelp')->where('mid = ' . $smid)->count();
                        if ($sdescription || $smh) {
                            $list[$k]['bulb'] = 1;
                        }
                    }
                    if ($list_old) {
                        foreach ($list_old as $k1 => $v1) {
                            if ($v['sid'] == $v1['sid']) {
                                $list[$k]['h'] = 1;
                            }
                        }
                    }
                    if ($v['sq']) {

                        $list[$k]['quantity'] = $v['sq'];
                    }

                    if (empty($v['minprice']) || $v['minprice'] == "0.00") {
                        $list[$k]['price'] = $v['maxprice'];
                        $list[$k]['canupdate'] = 0;
                    } else {
                        $list[$k]['price'] = $v['minprice'];
                        $list[$k]['canupdate'] = 1;
                    }

                    if ($v['osid']) {
                        //$list[$k]['h'] = 1;
                        if ($v['sprice']) {
                            $list[$k]['price'] = $v['sprice'];
                        }
                    }
                    if ($v['description']) {
                        $str = strip_tags(htmlspecialchars_decode($v['description']));
                        $list[$k]['title_show'] = $str;
                    } else {
                        if ($v['g_name']) {
                            $list[$k]['title_show'] = $v['g_name'] . '-' . $v['o_name'] . '-' . $v['name'];
                        } else {
                            $list[$k]['title_show'] = $v['o_name'] . '-' . $v['name'];
                        }
                    }
                }
//               var_dump($list);
                foreach ($list as $k => $v) {
                    $nlist[$v['mid']]['mid'] = $v['mid'];
                    $nlist[$v['mid']]['mname'] = $v['pname'] . '-' . $v['g_name'] . '-' . $v['o_name'];
                    $nlist[$v['mid']]['list'][] = $v;
                }
            }
           /* $offer = M('offer')->alias('o')->field(array('o.oid', 'o.projectname', 'o.code', 'c.shortsign'))->join('ot_customer c on c.cid = o.cid', 'LEFT')->where("o.oid = '" . $oid . "'")->find();
            $this->assign('offer', $offer);*/
            $this->assign('_list', $nlist);
            $Page->setConfig('theme', '%FIRST% %UP_PAGE% %LINK_PAGE% %DOWN_PAGE% %END% %HEADER%');
            $show = $Page->show();
            //$this->assign('_page',$show);
            $this->assign('item_id', $item_id);
            $this->assign('pid', $pid);

            $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
            $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');

            $root_mbx = array();
            $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
            $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
            $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectNew/view?id=' . $item_id));
            $root_mbx[] = array('title' => '规划', 'url' => U('ProjectNew/service?id=' . $item_id));
            $root_mbx[] = array('title' => '项目范围', 'url' => U('ProjectNew/service?id=' . $item_id));
            $root_mbx[] = array('title' => '引入标准服务', 'url' => '');
            $this->assign('root_mbx', $root_mbx);
            $actionURL = strstr(__ACTION__, '/Admin');
            $this->assign('actionURL', $actionURL);
            $this->assign('from_url', $from_url);
            $this->assign('actionName', 'projection');
            $this->assign('fourtitle', 'service');
            $this->display();
        } else {
            $ids = I("post.ids");
            $pid = I("post.pid");
            $qs = I("post.qs");
            //验证数据正确性
            if ($ids && is_array($ids)) {
                foreach ($ids as $v) {
                    if (!$qs || $qs[$v] <= 0 || ((floor($qs[$v]) - $qs[$v]) != 0)) {
                        $this->error("请填写正确的数量");
                    }
                }
            } else {
                $this->error("请选择要引入的服务内容");
            }

            $item_id = I("post.item_id");
            $project = $this->db->field(true)->where('pid=' . $item_id)->find();
            if ($project['state'] == 2 || $project['state'] == -1) {
                $this->error("当前项目已结束，无法添加任务");
            }

            //验证数据正确性
            if ($ids && is_array($ids)) {
                foreach ($ids as $v) {
                    $r = M("Service")->where(array("sid" => $v))->find();
                    if (empty($r)) {
                        $this->error("任务数据不存在，请重新操作");
                    }
                }
            } else {
                $this->error("请选择要引入的任务");
            }

            /* $service = M("Service")->where("pid='{$pid}'")->select();
                if (empty($service)) {
                    $this->error("任务数据已不存在");
                }*/


            $list_old = M('ProjectService')->alias('s')->field(array('s1.sid', 's.groupid'))
                ->join('ot_module m ON m.mid = s.mid', 'LEFT')
                ->join('ot_project_config p ON m.pid = p.pid', "left")
                ->join('ot_service s1 ON s1.sid = s.sid', 'LEFT')
                ->join('ot_group g ON s.groupid = g.groupid', 'LEFT')
                ->where("s.pid='" . $item_id . "'")->select();

            //多选一判断 以及 关联模块判断
            foreach ($ids as $k => $v) {
                /*  foreach ($service as $vv) {
                      if ($v == $vv['sid'] && $vv['required'] == 2) {
                          $groupid = $vv['regroup'];
                      }
                      $mid = $vv["mid"];
                  }
                  //多选一判断
                  if ($groupid) {
                      if ($list_old) {
                          foreach ($list_old as $vo) {
                              if ($vo['groupid'] == $groupid) {
                                  unset($ids[$k]);
                              }
                          }
                      }
                      foreach ($ids as $v1) {
                          $res = M("Service")->where(array("_string" => "and sid<>'{$v}'", "pid" => $pid, "required" => 2, "regroup" => $groupid, "sid" => $v1))->find();
                          if ($res) {
                              $this->error("存在多选一条件限制，请刷新后重新操作");
                          }
                      }
                  }*/
                /*  //关联模块判断
                  if ($mid) {
                      $ls = M("Service")->where(array("remid" => $mid, "required" => 3, "pid" => $pid))->select();
                      if ($ls) {
                          foreach ($ls as $v) {
                              if (!in_array($v['sid'], $ids)) {
                                  $this->error("存在关联模块任务未选中，请刷新后重新操作");
                              }
                          }
                      }
                  }*/

                if ($list_old) {
                    foreach ($list_old as $va) {
                        if ($va['sid'] == $v) {
                            unset($ids[$k]);
                        }
                    }
                }
            }


            foreach ($ids as $v) {
                $row = M("Service")
                    ->join("ot_module on ot_module.mid=ot_service.mid", "left")
                    ->field(array('ot_service.*', 'ot_module.mid', 'ot_module.pid as m_pid'))->where(array("sid" => $v))->find();
                if (empty($row)) {
                    $this->error("任务数据不存在，请重新操作");
                }
                $pid = $item_id;
                $pcid = $row['m_pid'];
                $groupid = $row['groupid'];
                $mid = $row['mid'];
                $sid = $row['sid'];
                $title = $row['name'];
                $pstime = 0;
                $petime = 0;
                $days = $row['days'] * $qs[$v];
                $description = $row['note'];
                $delivery = 0;
                $hours = $row['hour'] * $qs[$v];
                $sort_order = $row['sort_order'];
                $quantity = $qs[$v];
                $amount = $row['maxprice']*$quantity;

                $sql = 'insert into ot_project_service (pid,pcid,groupid,mid,sid,title,pstime,petime,days,sort_order,description,delivery,hours,quans,amount) values
                  ("' . $pid . '","' . $pcid . '","' . $groupid . '","' . $mid . '","' . $sid . '","' . $title . '","' . $pstime . '","' . $petime . '","' . $days . '","' . $sort_order . '","' . $description . '","' . $delivery . '","' . $hours . '","' . $quantity . '","' . $amount . '")';
                M('project_service')->execute($sql);
            }
	        //重新排序
	        rearrangement($pid);
            //更新项目path字段
            changeProjectPath($pid);
            $tid = M('task')->where('pid=' . $pid)->getfield('tid');
            updateprocess($tid);
            $this->redirect('ProjectNew/service?id=' . $item_id);
        }
    }


    /*function getpro($id = 0, $item_id, $pid = 0, $ppid) {
      global $lastMenu;
      $where = 'parentid = ' . $id;
      $ProjectConfig = $this->pro_module->where($where)->select();
      if ($ProjectConfig) {
            $lastMenu .= "<ul>";
            foreach ($ProjectConfig as $key => $value) {
            $class = "";
            if ($value['pid'] == $pid) {
            $class = "active";
            }
            $href = "";
            $href = U('ProjectNew/add_item?ppid=' . $ppid . '&item_id=' . $item_id . '&pid=' . $value['pid']);
            if ($this->pro_module->where('parentid=' . $value['pid'])->find()) {
            $lastMenu .= "<li> <i class='list-toggle icon'></i>" . "<a class='{$class}' href=" . $href . " >" . $value['name'] . " </a> ";
            $this->getpro($value['pid'], $item_id, $pid, $ppid);
            $lastMenu .= "</li>";
            } else {
            $lastMenu .= "<li>" . "<a class='{$class}' href=" . $href . ">" . $value['name'] . " </a> </li>";
            }
            }
            $lastMenu .= "</ul>";
            }
            return $lastMenu;
            }*/
    private function getpro($item_id, $module, $ppid = 0, $pppid = 0)
    {
        global $lastMenu;
        $where = 'parentid = ' . $ppid . " ";
        $data = $module->where($where)->order('sort_order asc')->select();
        if (is_array($data) && !empty ($data)) {
            $lastMenu .= "<ul>";
            if ($ppid) {
                $class = "open in";
            } else {
                $class = "";
            }
            $smod = M("Service");
            foreach ($data as $key => $value) {

                $r = $smod->where("pid='{$value ['pid']}'")->find();
                if ($r) {
                    $i = "<img src='/images/d.png' style='width:8px;float: left;margin-top: 5px;margin-right:2px'>";
                } else {
                    $i = "";
                }
                $href = U('ProjectNew/add_item?ppid=' . $pppid . '&item_id=' . $item_id . '&pid=' . $value['pid']);
                if ($module->where('parentid=' . $value ['pid'])->find()) {
                    $lastMenu .= "<li class='" . $class . "'> <i class='list-toggle icon'></i>" . "<a id='list" . $value ['pid'] . "' href=" . $href . " >{$i}" . $value ['name'] . " </a> ";
                    $this->getpro($item_id, $module, $value ['pid'], $pppid);
                    $lastMenu .= "</li>";
                } else {

                    if ($smod->where("pid='{$value ['pid']}'")->find()) {
                        $lastMenu .= "<li class='" . $class . "'>" . "<a id='list" . $value ['pid'] . "' href=" . $href . ">$i" . $value ['name'] . " </a></li>";
                    } else {
                        $lastMenu .= "<li class='" . $class . "'>" . "<a class='textc' id='list" . $value ['pid'] . "' href=" . $href . ">$i" . $value ['name'] . " </a></li>";
                    }

                }
            }
            $lastMenu .= "</ul>";
        }
        return $lastMenu;
    }

    /*里程碑*/
    public function milestone()
    {
        $id = I("get.id");
        $pid = I("get.pid");
        if ($pid) {
            $this->project_out($pid);//判断项目是否可以操作
            $newdata = array();
            $data = $_POST;
            foreach ($data as $key => $value) {
                foreach ($value as $k => $v) {
                    $newdata[$k][$key] = $v;
                }
            }
            $editdata = array();
            $adddata = array();
            foreach ($newdata as $key => $value) {
                if (empty($value['mid'])) {
                    if (!empty($value['name'])) {
                        $adddata[] = $value;
                    }
                } else {
                    $editdata[] = $value;
                }
            }
            if (is_array($editdata)) {
                foreach ($editdata as $key => $vo) {
                    $mid = $vo['mid'];
                    array_shift($vo);
                    $vo['mtime'] = strtotime($vo['mtime']);
                    if (empty($vo['tid']) && $vo['etime']) {
                        $vo['etime'] = strtotime($vo['etime']);
                        if (empty($vo['completion'])) {
                            $vo['completion'] = 100;
                        }
                    } else {
                        $vo['etime'] = 0;
                    }
                    M('Milestone')->where('mid=' . $mid)->save($vo);
                }
            }

            if (is_array($adddata)) {
                foreach ($adddata as $key => $vo) {
                    extract($vo);
                    $mtime = strtotime($mtime);
                    $addtime = time();
                    if ($etime) {
                        if (empty($completion)) {
                            $completion = 100;
                        }
                        $etime = strtotime($etime);
                    } else {
                        $etime = 0;
                        if ($tid) {
                            $state = M('Task')->where('tid=' . $tid)->getfield('state');
                            if ($state == 3) {
                                $completion = 100;
                                $etime = $addtime;
                            } else {
                                $etime = 0;
                            }
                        }
                    }
                    $uname = get_nickname(is_login()) ? get_nickname(is_login()) : get_username(is_login());
                    $redata = array(
                        'pid' => $pid,
                        'tid' => $tid,
                        'completion' => $completion,
                        'mtime' => $mtime,
                        'addtime' => $addtime,
                        'uid' => UID,
                        'uname' => $uname,
                        'etime' => $etime,
                        'name' => $name
                    );
                    if ($tid) {
                        $redata['type'] = 1;
                    } else {
                        $redata['type'] = 3;
                    }
                    $id = M('milestone')->add($redata);
                    M('milestone')->where(array('mid' => $id))->save(array('sort_order' => $id));
                }

            }
//	 		$this->success('编辑成功！', U('ProjectNew/milestone?id=' . $pid));
            $this->redirect('ProjectNew/milestoneindex', array('id' => $pid));

        } else {
            if (empty($id)) {
                $this->error('项目不存在！');
            }
            $project = $this->db
                ->field('p.*,o.code oname,o.chance,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d3.name dname,m.nickname mname')
                ->alias('p')
                ->join('ot_offer o on p.oid = o.oid', 'LEFT')
                ->join('ot_dept d3 on p.orgid = d3.did', 'LEFT')
                ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
                ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
                ->join('ot_customer c on p.cid = c.cid', 'LEFT')
                ->join('ot_member m on p.sale = m.uid', 'LEFT')
                ->where('p.pid=' . $id)
                ->find();

            $project['description'] = htmlspecialchars_decode($project['description']);
            $project['risk'] = htmlspecialchars_decode($project['risk']);
            $project['feedback'] = htmlspecialchars_decode($project['feedback']);
            $this->assign('p', $project);

            $task = M('ProjectService')->field('psid as tid,title')->where('pid=' . $id)->select();
            $this->assign('task', $task);
            $milestone = M('Milestone')->alias('m')->field('m.*,d1.d_key as type')->
            join('ot_dictionary d1 on m.type = d1.d_value and d1.d_code=\'milestone_type\'', 'LEFT')->where('m.pid=' . $id)->order('mtime asc')->select();
//            var_dump($milestone);
            $this->assign('milestone', $milestone);
            if (is_array($milestone) && !empty($milestone)) {
                $res = end($milestone);
                $sort = $res['sort_order'] + 1;
            } else {
                $sort = 1;
            }

            $this->assign('sort', $sort);
            $this->assign('pid', $id);

            $this->meta_title = '里程碑';

            $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
            $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');
            $root_mbx = array();
            $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
            $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
            $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectNew/view?id=' . $project['pid']));
            $root_mbx[] = array('title' => '规划', 'url' => U('ProjectNew/service?id=' . $project['pid']));
            $root_mbx[] = array('title' => '里程碑计划', 'url' => U('ProjectNew/milestoneindex?id=' . $project['pid']));
            $root_mbx[] = array('title' => '批量编辑', 'url' => '');
            $this->assign('root_mbx', $root_mbx);
            $this->assign('actionName', 'projection');
            $this->assign('fourtitle', 'milestoneindex');
            $this->assign('from_url', $from_url);
            $this->display();
        }
    }

    public function miledelete()
    {
        $mid = I('mid');
        if (!$mid) {
            $this->json_error('请选择要操作的数据!', false);
        }
        if (is_array($mid)) {
            $ids = implode(',', $mid);
        } else {
            $ids = $mid;
        }
        $where = array('mid' => array('in', $ids));
        $tmp = M('Milestone')->where($where)->delete();;
        if ($tmp) {
            $this->ajaxReturn(array('done' => true, 'msg' => '删除成功'));
        } else {
            $this->json_error('删除失败!', false);
        }
    }


    public function file_uplode($files = '')
    {
        $upload = new \Think\Upload(C('DOWNLOAD_UPLOAD'));// 实例化上传类
        // 上传文件
        $info = $upload->upload($files);
        if (!$info) {// 上传错误提示错误信息
            $this->error($upload->getError());
        } else {// 上传成功 获取上传文件信息
            $filelids = array();
            foreach ($info as $key => $value) {
                $a = explode('.', $value['name']);
                $name = $a[0];
                $file['name'] = $_POST['labels'][$key] ? $_POST['labels'][$key] : $name;
                $c = C('DOWNLOAD_UPLOAD');
                $file['savepath'] = $c['rootPath'] . $value['savepath'] . $value['savename'];
                $file['ext'] = $value['ext'];
                $file['size'] = $value['size'];
                $file['addtime'] = time();
                $file['uid'] = UID;
                $file['uname'] = get_nickname(is_login()) ? get_nickname(is_login()) : get_username(is_login());
                $filelid = M('File')->add($file);
                $filelids[$key] = $filelid;
            }
            return $filelids;
        }
    }

    public function takepart()
    {
        $id = I("get.id");
        $pid = I("get.pid");
        if ($pid) {
            $newdata = array();
            $data = $_POST;
            foreach ($data as $key => $value) {
                foreach ($value as $k => $v) {
                    $newdata[$k][$key] = $v;
                }
            }

            $editdata = array();
            $adddata = array();
            //去掉重复的数据
            $len = count($newdata);
            for ($i = 0; $i < $len - 1; $i++) {
                for ($j = $len - 1; $i < $j; $j--) {
                    if ($newdata[$i]['uid'] == $newdata[$j]['uid'] && $newdata[$i]['roleid'] == $newdata[$j]['roleid']) {
                        unset($newdata[$j]);
                    }
                }
            }

            $role_ids = array();
            foreach ($newdata as $k => $v) {
                if (!empty($v['uid']) || !empty($v['tpid'])) {
                    $role_ids[] = $v['roleid'];
                }
            }
            $unique_arr = array_unique($role_ids);
            $repeat_arr = array_diff_assoc($role_ids, $unique_arr);
            $res_pmid = M('project_role')->field('prid')->where(array('name' => '项目经理'))->find();
            if (!empty($repeat_arr)) {
                if (in_array($res_pmid['prid'], $repeat_arr)) {
                    $this->error("项目经理角色人员已存在,不可以重复添加");
                }
            }
            foreach ($newdata as $key => $value) {
                if (!empty($value['uid']) && !empty($value['roleid'])) {
                    //$tmp = M('Takepart')->field('tpid')->where('uid=' . $value['uid'] . ' and roleid=' . $value['roleid'] . ' and pid=' . $pid)->find();
                    if ($value['tpid']) {
                        $editdata[] = $value;
                    } else {
                        $adddata[] = $value;
                    }

                }
            }
            if (is_array($editdata)) {
                foreach ($editdata as $key => $vo) {
                    $tpid = $vo['tpid'];
                    $vo['uname'] =get_nickname($vo['uid']) ? get_nickname($vo['uid']) : get_username($vo['uid']);
                    //检测该用户是否有相同的角色
                    $res_relate_user = M('takepart')->field('uid,roleid')->where(array('tpid' => $tpid))->find();
                    $res_role = M('takepart')->where(array('uid' => $vo['uid'], 'roleid' => $vo['roleid'], 'pid' => $pid))->find();
                    if ($res_role) {
                        if ($res_relate_user['uid'] == $vo['uid'] && $res_relate_user['roleid'] == $vo['roleid']) {
                            M('Takepart')->where('tpid=' . $tpid)->save(array('description' => $vo['description'],'uname'=> $vo['uname']));
                        }
                        continue;
                    }
                    M('Takepart')->where('tpid=' . $tpid)->save($vo);
                    array_shift($vo);
                }
            }
            if (is_array($adddata)) {
                $sql = '';
                foreach ($adddata as $key => $vo) {
                    extract($vo);
                    $addtime = time();
                    $name1 = get_nickname($uid) ? get_nickname($uid) : get_username($uid);
                    $uid1 = UID;
                    $uname = get_nickname(is_login()) ? get_nickname(is_login()) : get_username(is_login());
                    $sql .= ",($pid,$uid,'" . $name1 . "',$roleid,'" . $description . "',$addtime,$uid1,'" . $uname . "')";
                }
                $sql = "insert into ot_takepart(pid,uid,uname,roleid,description,addtime,adduid,adduname) values " . substr($sql, 1);
                M('Takepart')->execute($sql);
            }
            $this->redirect('ProjectNew/takepartIndex', array('id' => $pid));

        } else {
            if (empty($id)) {
                $this->error('项目不存在！');
            }

            //参与人
            $sales = M('Member')->field('uid,nickname')->where('status=1')->select();
            $this->assign('sales', $sales);
            //角色
            $roles = M('ProjectRole')->field('prid,name')->select();
            $this->assign('roles', $roles);


            $project = $this->db
                ->field('p.*,o.code oname,o.chance,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d3.name dname,m.nickname mname')
                ->alias('p')
                ->join('ot_offer o on p.oid = o.oid', 'LEFT')
                ->join('ot_dept d3 on p.orgid = d3.did', 'LEFT')
                ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
                ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
                ->join('ot_customer c on p.cid = c.cid', 'LEFT')
                ->join('ot_member m on p.sale = m.uid', 'LEFT')
                ->where('p.pid=' . $id)
                ->find();
            $this->assign('p', $project);
            $list = M("takepart")->where('pid=' . $id)->order('addtime desc')->select();
            $roleids = array();
            foreach ($list as $key => $vo) {
                $roleids[] = $vo['roleid'];
            }
            $roleids1 = M('project_role')->where("',项目经理,项目执行,设计师,前端工程师,后端工程师,测试工程师,项目创建人,' like concat('%,',name,',%')")->getField('prid', true);
            $roleids2 = array_diff($roleids1, $roleids);
            //通过前端显示的角色找出相应的部门及部下所有成员
            $res_user = array();
            foreach ($roleids2 as $val) {
                $res_role_user = M('project_role')->alias('pr')->field('m.uid,m.nickname')->join('ot_role_dept rd on rd.prid=pr.prid')->join("ot_dept d on path like CONCAT('%,',rd.dtid,',%')")->join('ot_member m on m.dept=d.did')->where(array('pr.prid' => $val))->select();
                $res_user[$val] = $res_role_user;
                if (empty($res_role_user)) {
                    $res_user[$val] = $sales;
                }
            }
            $res_test = [];
            //前端角色参与人中有数据无数据显示全部
            foreach ($list as $vv) {
                $res_test[$vv['tpid']] = M('takepart')->alias('t')->field('m.uid,m.nickname,t.tpid')->join('ot_role_dept rd on rd.prid=t.roleid')->join("ot_dept d on path like CONCAT('%,',rd.dtid,',%')")->join('ot_member m on m.dept=d.did')->where(array('pid=' . $id, 'tpid' => $vv['tpid']))->order('addtime asc')->select();
                if (empty($res_test[$vv['tpid']])) {
                    $res_test[$vv['tpid']] = $sales;
                }
            }
            $arr = array();
            foreach ($res_test as $key => $vo) {
                foreach ($vo as $v) {
                    $arr[$key][] = $v['nickname'];
                }
            }
            foreach ($list as $key => $vo) {
                if (!in_array($vo['uname'], $arr[$vo['tpid']])) {
                    $list[$key]['canyuren'] = $vo['uname'];
                }
            }
            $this->assign('res_test', $res_test);
            $this->assign('roleUser', $res_user);
            $this->assign('roleids', $roleids2);
            $this->assign('tplist', $list);
            $this->assign('pid', $id);

            $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
            $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');

            $root_mbx = array();
            $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
            $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
            $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectNew/view?id=' . $project['pid']));
            $root_mbx[] = array('title' => '规划', 'url' => U('ProjectNew/service?id=' . $project['pid']));
            $root_mbx[] = array('title' => '成员', 'url' => U('ProjectNew/takepartIndex?id=' . $project['pid']));
            $root_mbx[] = array('title' => '批量编辑', 'url' => '');
            $this->assign('root_mbx', $root_mbx);
            $this->assign('actionName', 'projection');
            $this->assign('fourtitle', 'resourceplan');
            $this->assign('from_url', $from_url);
            $this->display();
        }
    }

    public function takedelete()
    {
        $tpid = I('id');
        if (!$tpid) {
            $this->json_error('请选择要操作的数据!', false);
        }

        if (is_array($tpid)) {
            $ids = implode(',', $tpid);
        } else {
            $ids = $tpid;
        }
        $where = array('tpid' => array('in', $ids));
        $tmp = M('Takepart')->where($where)->delete();;
        if ($tmp) {
            $this->ajaxReturn(array('done' => true, 'msg' => '删除成功'));
        } else {
            $this->json_error('删除失败!', false);
        }
    }

    public function budget()
    {
        $id = I("get.id");
        $pid = I("get.pid");
        if ($pid) {
            $this->project_out($pid);//判断项目是否可以操作
            $newdata = array();
            $data = $_POST;
            foreach ($data as $key => $value) {
                foreach ($value as $k => $v) {
                    $newdata[$k][$key] = $v;
                }
            }
            $editdata = array();
            $adddata = array();

            foreach ($newdata as $key => $value) {
                if ($value['price'] || $value['quantity']) {
                    if ($value['outitem1'] == '') {
                        $this->error('费用项目不能为空');
                    }
                }

                if (empty($value['pbid'])) {
                    if (!empty($value['outitem1'])) {
                        if ($value['price'] == '') {
                            $this->error('单价不能为空');
                        }
                        if (!is_numeric($value['price']) || $value['price'] <= 0) {
                            $this->error('单价必须是大于0的数字');
                        }
                        if ($value['quantity'] == '') {
                            $this->error('数量不可为空');
                        }
                        if (!is_numeric($value['quantity']) || $value['quantity'] <= 0) {
                            $this->error('数量必须是大于0的数字');
                        }
                        $value['type'] = '现金成本';
                        $adddata[] = $value;
                    }
                } else {
                    if ($value['price'] == '') {
                        $this->error('单价不能为空');
                    }
                    if (!is_numeric($value['price']) || $value['price'] <= 0) {
                        $this->error('单价必须是大于0的数字');
                    }
                    if ($value['quantity'] == '') {
                        $this->error('数量不可为空');
                    }
                    if (!is_numeric($value['quantity']) || $value['quantity'] <= 0) {
                        $this->error('数量必须是大于0的数字');
                    }
                    $editdata[] = $value;
                }
            }

            if (is_array($editdata)) {
                foreach ($editdata as $key => $vo) {
                    $tbid = $vo['pbid'];
                    $outid = 0;
                    $data = array(
                        'outid' => $outid,
                        'outitem' => $vo['outitem1'],
                        'budget' => $vo['budget'],
                        'price' => $vo['price'],
                        'quantity' => $vo['quantity'],
                        'explain' => $vo['explain'],
                    );
                    M('Projectbudget')->where('pbid=' . $tbid)->save($data);
                }
            }
            if (is_array($adddata)) {
                foreach ($adddata as $key => $vo) {
                    $type = '现金成本';
                    $outid = 0;
                    $outitem = $vo['outitem1'];
                    $budget = $vo['budget'];
                    $quantity = $vo['quantity'];
                    $price = $vo['price'];
                    $explain = $vo['explain'];
                    $uid = UID;

                    $uname = get_nickname(UID) ? get_nickname(UID) : get_username(UID);
                    $data = array(
                        'pid' => $pid,
                        'type' => $type,
                        'outid' => $outid,
                        'outitem' => $outitem,
                        'budget' => $budget,
                        'quantity' => $quantity,
                        'price' => $price,
                        'explain' => $explain,
                        'addtime' => time(),
                        'uname' => $uname,
                        'uid' => $uid);
                    $pbudgetmod = M("Projectbudget");
                    $row = $pbudgetmod->where(array("type" => $type, "outitem" => $outitem, "pid" => $pid))->find();
                    if (empty($row)) {
                        M('Projectbudget')->add($data);
                    }

                }
            }
            update_project($pid);
//	 		$this->success('编辑成功！', U('ProjectNew/budget?id=' . $pid));
            $this->redirect('ProjectNew/budgetindex', array('id' => $pid));
        } else {
            if (empty($id)) {
                $this->error('项目不存在！');
            }

            $project = $this->db
                ->field('p.*,o.code oname,o.chance,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d3.name dname,m.nickname mname')
                ->alias('p')
                ->join('ot_offer o on p.oid = o.oid', 'LEFT')
                ->join('ot_dept d3 on p.orgid = d3.did', 'LEFT')
                ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
                ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
                ->join('ot_customer c on p.cid = c.cid', 'LEFT')
                ->join('ot_member m on p.sale = m.uid', 'LEFT')
                ->where('p.pid=' . $id)
                ->find();
            $this->assign('p', $project);

            $list = M("projectbudget")->where('pid=' . $id . ' and type="现金成本"')
                ->field(array('price', 'quantity', 'explain', 'pbid', 'outid', 'type', 'outitem', 'budget', 'cost', 'FORMAT(cost/budget*10000/100,0) as bl', 'addtime', 'updatetime'))
                ->order('updatetime desc')
                ->select();
            // 人力成本
            $labours = M("projectbudget")->where('pid=' . $id . ' and type="人力成本"')
                ->field(array('type1', 'chours', 'finishours', 'price', 'quantity', 'explain', 'pbid', 'outid', 'type', 'outitem', 'cbudget', 'cost', 'addtime', 'updatetime'))
                ->order('updatetime desc')
                ->select();
            if ($list) {
                foreach ($list as $k => $V) {
                    if (empty($V['bl'])) {
                        $list[$k]['bl'] = 0;
                    } elseif ($V['bl'] > 100) {
                        $list[$k]['bl'] = 100;
                    }

                }
            }
            $labors = [];
            foreach ($labours as $k => $v) {
                $labors[$v['type1']]['list'][] = $v;
            }

            //类型
            $type = M('Dictionary')->where("d_code='budget_type' and d_del = 0")->select();
            $this->assign('types', $type);
            //项目组 人力成本
            /*  $ser = M('Group')->order('sort_order desc')->select();
            $addSer = Group::$newGroup;
            array_push($ser, $addSer); // 把项目质量追加进去 : LGW
            $this->assign('s', $ser);*/
            //费用项目 现金成本
            $costType = [];
            $costTypes = apiRead(Api::COST_TYPES, Api::DXY_OA);  // 费用类型信息 : LGW
            foreach ($costTypes['data'] as $value) {
                $costType[$value['id']] = $value['type'];
            }

            $this->assign('f', $costType);

            $this->assign('pid', $id);

            $map = [];
            $map['pid'] = $id;
            $map['type'] = '现金成本';
            $column = "sum(budget) as budget";
            $cashTotal = M('Projectbudget')->field($column)->where($map)->find();   // 预算金额

            $map['type'] = '人力成本';
            $column = "type1,sum(cbudget) as cbudget,sum(finishours) as finishours,sum(chours) as chours";
            $cbudgetTotal = M('Projectbudget')->field($column)->where($map)->group('type1')->select();   // 内容预算金额
            $cbudget = 0;
            foreach ($cbudgetTotal as $k => $v) {
                $labors[$v['type1']]['total'] = $v;
                if ($v['type1'] == '预算内') {
                    $cbudget += $v['cbudget'];
                }
            }

            $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
            $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');
            $root_mbx = array();
            $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
            $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
            $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectNew/view?id=' . $id));
            $root_mbx[] = array('title' => '规划', 'url' => U('ProjectNew/service?id=' . $id));
            $root_mbx[] = array('title' => '成本预算', 'url' => U('ProjectNew/budgetindex?id=' . $id));
            $root_mbx[] = array('title' => '批量编辑', 'url' => '');

            /* $this->assign('offbudget', $labors['预算外']);*/
            $this->assign('inbudget', $labors['预算内']);
            /* $this->assign('chbudget', $labors['变更']);*/
            $this->assign('budget', $list);
            $this->assign('root_mbx', $root_mbx);
            $this->assign('cashTotal', $cashTotal);
            $this->assign('total', $cbudget + $cashTotal['budget']);
            $this->assign('root_mbx', $root_mbx);
            $this->assign('actionName', 'projection');
            $this->assign('fourtitle', 'budgetindex');
            $this->assign('from_url', $from_url);
            $this->display();
        }
    }

    /*删除预算成本*/
    public function budgetdelete()
    {
        $id = I('id');
        $pid = I("get.pid");
        if (!$id) {
            $this->json_error('请选择要操作的数据!', false);
        }
        $budget = M('Projectbudget')->where("pbid = " . $id)->find();
        if ($budget['type'] == '人力成本' && ($budget['budget'] > 0 || $budget['cost'] > 0)) {
            $this->json_error('删除失败!人力成本已有预算金额或发生金额', false);
        } elseif ($budget['type'] == '现金成本' && $budget['cost'] > 0) {
            $this->json_error('删除失败!现金成本已有发生金额', false);
        }
        $tmp = M('Projectbudget')->where("pbid = " . $id)->delete();;
        if ($tmp) {
            update_project($pid);
            $this->ajaxReturn(array('done' => true, 'msg' => '删除成功'));
        } else {
            $this->json_error('删除失败!', false);
        }
    }

    /*删除附件*/
    public function filedelete()
    {
        $hfid = I('get.docid');
        $fileid = I('get.fileid');
        if (!$hfid) {
            $this->json_error('请选择要操作的数据!', false);
        }
        $data = M('File')->find($fileid);

        if (M('Doc')->where('docid=' . $hfid)->delete() === false) {
            $this->json_error('删除失败!', false);
        } else {
            @unlink($data['savepath']);
            M('File')->where('fileid=' . $fileid)->delete();
            action_log_new(array('outtype' => 'ot_file', 'outkey' => $fileid, 'action' => 'filedel', 'comment' => ''));
            $this->ajaxReturn(array('done' => true, 'msg' => '删除成功'));
        }
    }

    /*删除项目*/
    public function delete()
    {
        $id = (array)I('id');
        if (empty($id[0])) {
            return $this->ajaxReturn(array('done' => '0', 'msg' => "请选择要操作的数据"));
        }
        $msg = '';
        foreach ($id as $v) {
            $project = $this->db->field('name,uid,pmuid,ftasknum,oid')->where("pid = $v")->find();
            /*	if(is_administrator() || $project['uid'] == UID || $project['pmuid'] == UID){*/
            if (cando1(array($project['uid'], $project['pmuid']))) {
                $data = array();
                $data['del'] = 1;
                if ($project['ftasknum'] == 0 && $project['oid'] == 0) {
                    if ($this->db->where('pid=' . $v)->save($data) === false) {
                        $msg .= "『{$project['name']}』删除失败。\n";
                    } else {
                        M('Task')->where('pid=' . $v)->save(array("deleted" => 1));
                        action_log_new(array('outtype' => 'ot_project', 'outkey' => $v, 'pid' => $v, 'action' => 'delete', 'comment' => ''));
                        $msg .= "『{$project['name']}』删除成功。\n";
                    }
                } else {
                    $msg .= "『{$project['name']}』删除失败，项目不可删除。\n";
                }

            } else {
                $msg .= "『{$project['name']}』删除成功,没有权限\n";
            }
        }
        $this->ajaxReturn(array('done' => true, 'msg' => "{$msg}"));
    }

    /*批量编辑*/
    public function bulk_edit()
    {
        $pid = I('get.pid');
        if (!$pid) {
            $id = I('post.pid');
            $data = $_POST;
            if (is_array($data)) {
                $new_data = array();
                foreach ($data as $key => $vo) {
                    if ($key == 'pstime' || $key == 'petime') {
                        foreach ($vo as $K => $v) {
                            $new_data[$K][$key] = strtotime($v);
                        }
                    } else {
                        foreach ($vo as $K => $v) {
                            $new_data[$K][$key] = $v;
                        }
                    }

                }
            }
            foreach ($new_data as $vo) {
                $vo['assignedname'] = get_nickname($vo['assigneduid']) ? get_nickname($vo['assigneduid']) : get_username($vo['assigneduid']);
                $vo['checkuname'] = get_nickname($vo['checkuid']) ? get_nickname($vo['checkuid']) : get_username($vo['checkuid']);
                M('ProjectService')->save($vo);
            }

            /*$url = U('ProjectNew/bulk_edit?pid=' . $id);
              $ids =  $data['psid'];
              echo "<script>bulk_1($url,$ids);</script>";*/

            /*header("Location:".U('ProjectNew/bulk_edit?pid=' . $id));*/
            upBudget($pid);//成本预算
            $this->redirect('ProjectNew/service?id=' . $id);

        } else {
            $id = I('post.id');
            $psids = array();
            if (!$id) {
                $where = 'pid =' . $pid . ' and state = 0';
                $psId = M('project_service')->field('psid')->where(['pid' => $pid])->select();
                foreach ($psId as $vo) {
                    array_push($psids, $vo['psid']);
                }

            } else {
                $psids = $id;
                $id = implode(',', $id);
                $where = ' state = 0 and pid =' . $pid . ' and psid in (' . $id . ')';
            }

            //项目内容psid
            $dept_list = array();
            //执行人搜索相关部门的执行人
            foreach ($psids as $psid) {
                //查找相关的groupid
                $groupid = M('project_service')->field('groupid')->where(['psid' => $psid])->find();
                //查找相关部门
                $deptids = M('dept')->field('did')->where(['groupid' => $groupid['groupid']])->select();
                //                var_dump($deptids);
                if (empty($deptids)) {
                    $dept_list[$psid]['dept'][] = '';
                }
                foreach ($deptids as $deptid) {
                    $deptss = M('dept')->field('did')->where(['parent' => $deptid['did']])->select();
                    $dept_list[$psid]['dept'][] = $deptid['did'];
                    foreach ($deptss as $vo) {
                        $dept_list[$psid]['dept'][] = $vo['did'];
                    }
                }
            }
            foreach ($dept_list as $k => &$vo) {
                foreach ($vo as &$v) {
                    $v = array_unique($v);
                }
            }

            //            查找部门成员
            $sales = M('Member')
                ->field('uid,nickname')
                ->where('status = 1')
                ->select();
            $m = array();
            foreach ($dept_list as $key => $value) {
                $deptDid = implode(',', $value['dept']);
                $m[$key] = M('member')->field('nickname,uid')->where('status=1 and dept in (' . $deptDid . ')')->select();
                if (empty($m[$key])) {
                    $m[$key] = $sales;
                }
            }
            $this->assign('sale', $m);
            //审核人
            $auditor = M('member')->field('nickname,uid')->where('status=1')->select();
            $this->assign('sales', $auditor);
            //项目
            $project = $this->db
                ->field('p.*,o.code oname,o.chance,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d3.name dname,m.nickname mname')
                ->alias('p')
                ->join('ot_offer o on p.oid = o.oid', 'LEFT')
                ->join('ot_dept d3 on p.orgid = d3.did', 'LEFT')
                ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
                ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
                ->join('ot_customer c on p.cid = c.cid', 'LEFT')
                ->join('ot_member m on p.sale = m.uid', 'LEFT')
                ->where('p.pid=' . $pid)
                ->find();
            $this->assign('p', $project);


            $service = M('ProjectService')->where($where)->select();
            $arr = array();
            foreach ($m as $key => $vo) {
                foreach ($vo as $v) {
                    $arr[$key][] = $v['nickname'];
                }
            }
            foreach ($service as $key => $vo) {
                if (!in_array($vo['assignedname'], $arr[$vo['psid']])) {
                    $service[$key]['canyuren'] = $vo['assignedname'];
                }
            }
            $this->assign("_list", $service);
            $this->assign("pid", $pid);

            $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
            $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');

            $root_mbx = array();
            $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
            $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
            $root_mbx[] = array('title' => '查看项目', 'url' => U('ProjectNew/view?id=' . $pid));
            $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectNew/view?id=' . $pid));
            $root_mbx[] = array('title' => '内容清单', 'url' => U('ProjectNew/service?id=' . $pid));
            $root_mbx[] = array('title' => '批量编辑任务', 'url' => '');
            $this->assign('root_mbx', $root_mbx);
            $this->assign('actionName', 'projection');
            $this->assign('fourtitle', 'resourceplan');
            $this->assign('from_url', $from_url);
            $this->display();
        }
    }

    /*项目开始*/
    public function start()
    {
        $id = I('id');
        $pid = $_POST['pid'];
        if ($pid) {
            $this->project_out($pid, 1);
            $tmep = M('Project')->field('state')->find($pid);
            if ($tmep['state'] == 1) {
                $this->json_error('项目已开始!', false);
            }
            $content = $_POST['content'];
            $pid = $_POST['pid'];
            $data = array();
            $data['pid'] = $pid;
            $data['state'] = 1;
            $data['stime'] = time();
            $temp = M('Project')->save($data);
            $history = array();
            $history [0] = array(
                'field' => 'state',
                'olddata' => $tmep['state'],
                'newdata' => 1
            );
            action_log_new(array('history' => $history, 'outtype' => 'ot_project', 'outkey' => $pid, 'pid' => $pid, 'action' => 'start', 'comment' => $content, 'ext1' => ''));
            if ($temp === false) {
                $this->json_error('操作失败!', false);
            } else {
                if (M('Milestone')->where(array('pid' => $pid, 'name' => '项目开始', 'etime' => 0, 'type' => 0))->find()) {
                    M('Milestone')->where(array('pid' => $pid, 'name' => '项目开始', 'etime' => 0, 'type' => 0))->save(array('completion' => 100, "etime" => time()));
                }
                $this->ajaxReturn(array('done' => true, 'msg' => '成功'));
            }
        } else {
            if (!$id) {
                $this->error('请选择要操作的数据！', 'javascript:window.parent.choose();');
            }
            $this->assign('pid', $id);
            $this->display();
        }
    }

    /*项目延期*/
    public function postpone()
    {
        $id = I('id');
        if (I('post.pid')) {
            $pid = $_POST['pid'];
            $this->project_out($pid, 1);
            $content = $_POST['content'];
            $pstime = $_POST['pstime'];
            $petime = $_POST['petime'];
            $days = $_POST['days'];
            if (empty($pstime)) {
                $this->error('计划开始时间不能为空！');
            }
            if (empty($petime)) {
                $this->error('计划结束时间不能为空！');
            }
            $data = array();
            $data['pstime'] = strtotime($pstime);
            $data['petime'] = strtotime($petime);
            $data['days'] = $days;
            $data['pid'] = $pid;
            $data['state'] = Project::DELAY;
            $tmep = M('Project')->field(true)->find($pid);
            $history = array();
            foreach ($data as $key => $vo) {
                if ($vo != $tmep [$key]) {
                    $history [] = array(
                        'field' => $key,
                        'olddata' => $tmep [$key],
                        'newdata' => $vo
                    );
                }
            }
            $temp = M('Project')->save($data);

            if ($temp === false) {
                $this->json_error('操作失败!', false);
            } else {
                action_log_new(array('history' => $history, 'outtype' => 'ot_project', 'outkey' => $pid, 'pid' => $pid, 'action' => 'delay', 'comment' => $content, 'ext1' => ''));
                $this->ajaxReturn(array('done' => true, 'msg' => '成功'));
            }
        } else {
            if (!$id) {
                $this->error('请选择要操作的数据！', 'javascript:window.parent.choose();');
            }
            $pro = $this->db->field('pstime,petime,days')->where('pid=' . $id)->find();
            if (empty($pro['pstime'])) {
                $pro['pstime'] = '';
            } else {
                $pro['pstime'] = date('Y/m/d', $pro['pstime']);
            }
            if (empty($pro['petime'])) {
                $pro['petime'] = '';
            } else {
                $pro['petime'] = date('Y/m/d', $pro['petime']);
            }
            $this->assign('pro', $pro);
            $this->assign('pid', $id);
            $this->display();
        }

    }

    /*项目启动*/
    public function workbreak()
    {
        $id = I('id');
        $pid = $_POST['pid'];
        if ($pid) {
            $this->project_out($pid, 1);//判断项目是否可以操作
            $psids = $_POST['psids'];
            /*$tmep = M('Project')->field('breakdown')->find($pid);
              if ($tmep['breakdown'] == 1) {
              $this->json_error('项目已启动!', false);
              }*/
            if ($psids) {
                $where = " and psid in (" . $psids . ") ";
            } else {
                $where = " and 1=1";
            }
            $tmep1 = M('ProjectService')->where('pid=' . $pid . ' and state =0 ' . $where)->select();
            if (empty($tmep1)) {
                $this->json_error('项目没有未启动的任务!', false);
            }
            foreach ($tmep1 as $item) {
                if ($item['assigneduid'] == 0) {
                    $this->json_error('批量启动需保证所有任务都分配执行人!', false);
                } elseif ($item['petime'] == 0 || $item['pstime'] == 0) {
                    $this->json_error('批量启动需保证所有任务都分配计划开始和结束时间!', false);
                } elseif ($item['petime'] < $item['pstime']) {
                    $this->json_error('批量启动需保证所有任务计划结束时间不能大于计划开始时间!', false);
                }
                if (!is_numeric($item['days']) || $item['days'] <= 0) {
                    $this->json_error('有任务没有填写周期', false);
                }
                /* if (!is_numeric($item['hours']) || $item['hours'] <= 0) {
                   $this->json_error('有任务没有填写工时', false);
               }*/
            }
            $Model = M(); // 实例化一个空对象
            $Model->startTrans(); // 开启事务

            $content = $_POST['content'];
            $pid = $_POST['pid'];
            $data = array();
            $data['pid'] = $pid;
            $data['breakdown'] = 1;
            $tmp = M('Project')->save($data);

            M('ProjectService')->where('pid=' . $pid . ' and state =0 ' . $where)->save(array('op_text' => ''));

            /*Insert into Table2(a, c, d) select a,c,5 from Table1*/
            $addtime = time();
            $uid = UID;
            $a = 1;
            $uname = get_nickname(is_login()) ? get_nickname(is_login()) : get_username(is_login());
            $sql = "insert into ot_task(pid,psid,pcid,groupid,sid,mid,title,description,
assigneduid,assignedname,pstime,petime,days,hours,checkuid,checkuname,delivery,amount,state,uid,uname,addtime,manageruid,manageruname,assignedtime) select pid,psid,pcid,groupid,sid,mid,title,description,
assigneduid,assignedname,pstime,petime,days,hours,checkuid,checkuname,delivery,amount," . $a . "," . $uid . ",'" . $uname . "'," . $addtime . "," . $uid . ",'" . $uname . "'," . $addtime . " from ot_project_service where state=0 and pid = " . $pid . $where;
            $tmp2 = M()->execute($sql);
            $tmp1 = M('ProjectService')->where('pid=' . $pid . $where)->setField('state', 1);
            update_project($pid);
            /*$history = array();
              $history [0] = array(
              'field' => 'breakdown',
              'olddata' => $tmep['state'],
              'newdata' => 1
              );*/
            /*'history' => $history,*/
            action_log_new(array('outtype' => 'ot_project', 'outkey' => $pid, 'pid' => $pid, 'action' => 'break', 'comment' => $content));
            // 拆分完项目状态变为进行中 : LGW
            $pt = M('Project')->where("pid=" . $pid)->find();
            if ($pt['state'] == 0) {
                $array = [];
                $array['pid'] = $pid;
                $array['state'] = Project::ONGOING;
                $array['stime'] = time();
                M('Project')->save($array);
                $history = [];
                $history[] = [
                    'field' => 'state',
                    'olddata' => Project::NOT_STARTED,
                    'newdata' => Project::ONGOING
                ];
                action_log_new(array('history' => $history, 'outtype' => 'ot_project', 'outkey' => $pid, 'pid' => $pid, 'action' => 'start', 'comment' => $content));
            }

            $task = M('Task')->alias('t')
                ->field('t.*,s.milestone,m.mid mmid')
                ->join('ot_project_service s on t.psid=s.psid')
                ->join('ot_milestone m on m.tid=t.tid', 'left')
                ->where('t.pid=' . $pid . ' and sign=0')->select();
            $groupid = array();
            foreach ($task as $k => $vo) {
                $groupid[] = $vo['groupid'];
                action_log_new(array('outtype' => 'ot_task', 'outkey' => $vo['tid'], 'action' => 'create', 'comment' => ''));
	            M('Task')->save(array('tid'=>$vo['tid'],'sign'=>1));
                /*   if ($vo['milestone'] && empty($vo['mmid'])) {
                       $data = array(
                           'name' => $vo['title'],
                           'mtime' => $vo['petime'],
                           'addtime' => time(),
                           'uid' => UID,
                           'uname' => get_nickname(UID),
                           'pid' => $pid,
                           'tid' => $vo['tid']
                       );
                       $mid = M('Milestone')->add($data);
                       M('milestone')->where(array('mid' => $mid))->save(array('sort_order' => $mid));
                   }*/
                /*  $price = 0;
                  $res = M('member')->alias('m')->field('r.price')
                      ->join('ot_auth_group_access a on m.uid=a.uid')
                      ->join('ot_role_level r on a.rlid=r.rlid')
                      ->where("m.uid=" . $vo['assigneduid'])->find();
                  if ($res && $res['price'] > 0) {
                      $price = $res['price'];
                  }
                  $budget = $price * $vo['hours'];
                  $budgets[] = array(
                      'b' => $budget,
                      'g' => $vo['groupid'],
                  );

                  $pbudgetmod=M("Projectbudget");
                   $row=$pbudgetmod->where(array("type"=>"人力成本","outid"=>$vo['psid'],"pid"=>$vo["pid"]))->find();

                   if($row){
                        $data=array("type"=>"人力成本","outitem"=>$vo['title'],"outid"=>$vo['psid'],"budget"=>($row['budget']+$budget),"updateuid"=>UID,"updateuname"=>get_nickname(UID)?get_nickname(UID):get_username(UID),"pid"=>$vo['pid']);
                        if($pbudgetmod->save($data)===false){
                        }
                   }else{
                       $data=array("type"=>"人力成本","outitem"=>$vo['title'],"outid"=>$vo['psid'],"budget"=>$budget,"addtime"=>time(),"uid"=>UID,"uname"=>get_nickname(UID)?get_nickname(UID):get_username(UID),"pid"=>$vo['pid'],"updateuid"=>UID,"updateuname"=>get_nickname(UID)?get_nickname(UID):get_username(UID));
                       if($pbudgetmod->add($data)===false){
                       }
                   }
                   update_project($vo['pid']);*/
                updateprocess($vo['tid']);
            }
            /* if ($groupid) {
                 $groupids = array_unique($groupid);
                 foreach ($groupids as $vo) {
                     $group_name = M('Group')->where("groupid='{$vo}'")->getField('name');
                     $budget = 0;
                     if ($budgets) {
                         foreach ($budgets as $k => $v) {
                             if ($vo == $v['g']) {
                                 $budget += (float)$v['b'];
                             }
                         }
                     }
                     $pbudgetmod = M("Projectbudget");
                     $row = $pbudgetmod->where(array("type" => "人力成本", "outid" => $vo, "pid" => $pid))->find();

                     if ($row) {
                       // $data=array("pbid"=>$row['pbid'],"budget"=>($row['budget']+$budget),"updatetime"=>time(),"updateuid"=>UID,"updateuname"=>get_nickname(UID)?get_nickname(UID):get_username(UID));
                         //if($pbudgetmod->save($data)===false){
                        // }
                     } else {
                         $data = array("type" => "人力成本", "outitem" => $group_name, "outid" => $vo, "budget" => $budget, "addtime" => time(), "uid" => UID, "uname" => get_nickname(UID) ? get_nickname(UID) : get_username(UID), "pid" => $pid, "updateuid" => UID, "updateuname" => get_nickname(UID) ? get_nickname(UID) : get_username(UID));
                         if ($pbudgetmod->add($data) === false) {
                         }
                     }
                     update_project($pid);
                 }
             }*/
            upBudget($pid);//成本预算
            //去掉重复的数据
            $len = count($task);
            for ($i = 0; $i < $len - 1; $i++) {
                for ($j = 0; $j < $len - 1 - $i; $j++) {
                    if ($task[$j]['assigneduid'] == $task[$j + 1]['assigneduid']) {
                        unset($task[$j]);
                    }
                }
            }
            foreach ($task as $k => $vo) {
                $roleid = M('ProjectRole')->where("name='项目执行'")->getfield('prid');
                if ($roleid) {
                    $tmp4 = M('Takepart')->field('tpid')->where('uid=' . $vo['assigneduid'] . ' and roleid = ' . $roleid . ' and pid = ' . $pid)->find();
                    if (empty($tmp4['tpid'])) {
                        if ($vo['assigneduid'] && $vo['assignedname']) {
                            $data4 = array(
                                'pid' => $pid,
                                'uid' => $vo['assigneduid'],
                                'uname' => $vo['assignedname'],
                                'addtime' => time(),
                                'adduname' => get_nickname(UID),
                                'adduid' => UID,
                                'roleid' => $roleid,
                            );
                            M('Takepart')->add($data4);
                        }
                    }
                }
            }
            if (M('Milestone')->where(array('pid' => $pid, 'name' => '项目开始', 'etime' => 0, 'type' => 0))->find()) {
                M('Milestone')->where(array('pid' => $pid, 'name' => '项目开始', 'etime' => 0, 'type' => 0))->save(array('completion' => 100, "etime" => time()));
            }
            if ($tmp !== false && $tmp1 !== false && $tmp2) {
                $Model->commit(); // 成功则提交事务
                $this->ajaxReturn(array('done' => true, 'msg' => '成功'));
            } else {
                $Model->rollback(); // 否则将事务回滚
                $this->json_error('操作失败!', false);
            }

        } else {
            if (!$id) {
                $this->error('请选择要操作的数据！', 'javascript:window.parent.choose();');
            }
            $this->assign('pid', $id);
            $this->display();
        }
    }

    /*项目完成*/
    public function finish()
    {
        $id = I('id');
        $pid = $_POST['pid'];
        $this->assign('time', date('Y-m-d'));
        if ($pid) {
            $this->project_out($pid, 1);
            $tmep = M('Project')->field('state')->find($pid);
            if ($tmep['state'] == 2) {
                $this->json_error('项目已完成!', false);
            }
            $etime = $_POST['etime'];
            if (!$etime) $this->json_error('完成时间不能为空!', false);
            $taskwhere = "pid = {$pid} and state != 3 and state != -1 and deleted = 0 ";
            $taskcount = M('ProjectService')->where($taskwhere)->count();
            $taskcount and $this->json_error('项目还有任务没有关闭或完成!', false);
            $docwhere = "pid = {$pid}";
            $doccount = M('Doc')->where($docwhere)->count();
            $doccount == 0 and $this->json_error('请上传至少一个项目文档!', false);
            $expewhere = "state !=3 and pid = {$pid} and 'delete' !=1";
            $expecount = M('Expense')->where($expewhere)->count();
            $expecount and $this->json_error('项目还有报销单没有未生效!', false);
            $content = $_POST['content'];
            $acceptfile = M('ProjectAcceptFile')->where(array('pid' => $pid))->count();
            $acceptfile == 0 and $this->json_error('请上传客户验证凭证!', false);
            $accept = M('ProjectAccept')->where(array('pid' => $pid))->find();
            empty($accept) and $this->json_error('结项前检查未保存!', false);
            $accept['taskcheck'] == 0 and $this->json_error('结项前检查任务完成情况未勾选!', false);
            $accept['doccheck'] == 0 and $this->json_error('结项前检查文档上传情况未勾选!', false);
            $accept['expensecheck'] == 0 and $this->json_error('结项前检查报销情况未勾选!', false);
            $accept['voucher'] == 0 and $this->json_error('结项前检查客户验证凭证上传未勾选!', false);
            $pid = $_POST['pid'];
            $data = array();
            $data['pid'] = $pid;
            $data['state'] = 2;
            $data['etime'] = strtotime($etime);
            $temp = M('Project')->save($data);
            $history = array();
            $history [0] = array(
                'field' => 'state',
                'olddata' => $tmep['state'],
                'newdata' => 2
            );
            action_log_new(array('history' => $history, 'outtype' => 'ot_project', 'outkey' => $pid, 'pid' => $pid, 'action' => 'finish', 'comment' => $content, 'ext1' => ''));
            if ($temp === false) {
                $this->json_error('操作失败!', false);
            } else {
                if (M('Milestone')->where(array('pid' => $pid, 'name' => '项目完成', 'etime' => 0, 'type' => 0))->find()) {
                    M('Milestone')->where(array('pid' => $pid, 'name' => '项目完成', 'etime' => 0, 'type' => 0))->save(array('completion' => 100, "etime" => time()));
                }
                $this->ajaxReturn(array('done' => true, 'msg' => '成功'));
            }
        } else {
            if (!$id) {
                $this->error('请选择要操作的数据！', 'javascript:window.parent.choose();');
            }
            $this->assign('pid', $id);
            $this->display();
        }
    }

    /*项目关闭*/
    public function close()
    {
        $id = I('id');
        $pid = $_POST['pid'];
        if ($pid) {
            $this->project_out($pid, 1);
            $tmep = M('Project')->field('state')->find($pid);
            if ($tmep['state'] == -1) {
                $this->json_error('项目已关闭!', false);
            }
            $content = $_POST['content'];
            $pid = $_POST['pid'];
            $data = array();
            $data['pid'] = $pid;
            $data['state'] = -1;
            $data['closetime'] = time();
            $temp = M('Project')->save($data);
            $history = array();
            $history [0] = array(
                'field' => 'state',
                'olddata' => $tmep['state'],
                'newdata' => -1
            );
            action_log_new(array('history' => $history, 'outtype' => 'ot_project', 'outkey' => $pid, 'pid' => $pid, 'action' => 'close', 'comment' => $content, 'ext1' => ''));
            if ($temp === false) {
                $this->json_error('操作失败!', false);
            } else {
                if (M('Milestone')->where(array('pid' => $pid, 'name' => '项目完成', 'etime' => 0, 'type' => 0))->find()) {
                    M('Milestone')->where(array('pid' => $pid, 'name' => '项目完成', 'etime' => 0, 'type' => 0))->save(array('completion' => 100, "etime" => time()));
                }
                $this->ajaxReturn(array('done' => true, 'msg' => '成功'));
            }
        } else {
            if (!$id) {
                $this->error('请选择要操作的数据！');
            }
            $this->assign('pid', $id);
            $this->display();
        }
    }

    /*文档*/
    public function servicedoc()
    {
        $sid = I('get.sid');
        if (!$sid) {
            $this->error('请选择要操作的数据');
        } else {
            $module = M('ServiceDoc')->alias('sd')->join('ot_doc_type dt on dt.dtid = sd.dtid', 'left');
            $list = $this->lists($module, 'sid=' . $sid, '', null, 'sd.*,dt.name');
            $this->assign('_list', $list);
            $this->display();
        }

    }

    public function servicearr()
    {
        $pid = I('get.pid');
        if (IS_POST) {
            $pid = I('post.pid');
            $this->project_out($pid, 1);//判断项目是否可以操作
            $pstime = I('post.pstime');
            $psids = I('post.psids');
            if ($psids) {
                $where = " and psid in (" . trim($psids, '\'') . ") ";
            } else {
                $where = " and 1=1 ";
            }
            $proser = M('ProjectService')->field('assigneduid')->where('pid=' . $pid . $where . '  and state = 0')->select();
            if (empty($proser)) {
                $this->json_error('项目没有可以排期任务!', false);
            }
            foreach ($proser as $item) {
                if ($item['assigneduid'] == 0) {
                    $this->json_error('自动排期请确保所选任务都指派执行人!', false);
                }
            }
	        $pstime = strtotime(date('Ymd',strtotime($pstime)));

            $protime = M('Project')->field('pstime')->where('pid=' . $pid)->find();
            if (empty($protime) && empty($pstime)) {
                $this->json_error('开始时间不能为空!', false);
            }
	        $pstime1 = $pstime ? $pstime : $protime;
            $proser = M('ProjectService')->alias('ps')->field('ps.assigneduid,p.pstime')->join('ot_project p on p.pid = ps.pid')->where('ps.pid=' . $pid . $where . ' and ps.state = 0')->group('ps.assigneduid')->select();
            // 如果排期超过项目开始和结束时间则不能排期 : LGW
            $pt = M('Project')->field('pstime,petime')->where("pid=" . $pid)->find();
            $ptStime = $pt['pstime'];    // 项目的计划开始日期
            $ptEtime = $pt['petime'];    // 项目的计划结束日期
            if ($pstime) {
                foreach ($proser as $key => $vo) {
                    $proser[$key]['pstime'] = $pstime;
                }
            }

            foreach ($proser as $vo) {
                $data = M('ProjectService')->field('psid,days,state')->where('assigneduid=' . $vo['assigneduid'] . ' and pid=' . $pid . $where)->select();
                $temp = [];
	            $pstime = strtotime(date('Ymd',$vo['pstime']));
                foreach ($data as $k => $v) {
                    static $petime;
                    $psid = $v['psid'];
                    $days = $v['days'];
                    if (empty($days) && $v['state'] != 1) {
                        $this->json_error('自动排期请确保所选任务的周期不能为空!', false);
                    }
                    if ($k != 0) {
		                $pstime = (int)$petime +1;
	                }
	                (int)$petime = (int)$pstime + (int)$days * 86400 -1;
                    if ($pstime < $ptStime || $petime > $ptEtime) {
                        $this->json_error('计算出的排期不在项目周期内', false);
                    }
                    $temp[] = array(
                        'pstime' => $pstime,
                        'petime' => $petime,
                        'psid' => $psid,
                        'state' => $v['state'],
                    );


                    foreach ($temp as $key => $val) {
                        M('ProjectService')->save($val);
                    }
                }
            }
            $this->ajaxReturn(array('done' => true, 'msg' => '成功'));
        } else {
            if (!$pid) {
                $this->json_error('请选择要操作的数据!', false);
            }
            $this->assign('pid', $pid);
            $this->display();
        }
    }

    public function get_offer()
    {
        $oid = I("post.oid");
        $offer = M('offer')
            ->alias('o')
            ->field(array('o.*'))
            ->where("o.oid = '" . $oid . "'")
            ->find();
        $offer['pstime'] = time_formatnew($offer['starttime'], 'Y/m/d');
        $days = $offer['days'];

        if ($days) {
            $petime = $offer['starttime'] + (int)$days * 86400;
        } else {
            $petime = '';
        }
        $offer['petime'] = time_formatnew($petime, 'Y/m/d');
        $this->json_result($offer, '', false);
    }

// 获取信息
    public function getProject($pid)
    {
        $map = [];
        $map['pid'] = $pid;
        $project = M('Project')->alias('p')
            ->field('p.name,p.pm,p.stime,d1.d_key sname,d3.name dname,p.tasknum,p.ftasknum,p.pstime,p.petime,p.etime')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dept d3 on p.orgid = d3.did', 'LEFT')
            ->where($map)
            ->find();
        return $project;
    }

    // 导出甘特图 : LGW
    public function gantExport($project, $gant)
    {
        if (empty($gant) || !is_array($gant) || count($gant) < 1) {
            $this->error('没有可导出的数据');
        }
        $x = 7;
        $y = 6;
        // 求出顶级的时间
        foreach ($gant as $k => $v) {
            $map = [];
            if ($v['pCid']) {
                $map['pcid'] = $v['pCid'];
                $map['pid'] = $v['id'];
                //$map['state'] = ProjectService::STARTED;
                $service = M('Project_service')->alias('ps')
                    ->field('max(ps.petime) as endTime,min(ps.pstime) as startTime')
                    ->where($map)
                    ->find();
                $data = M('Project_service')->alias('ps')
                    ->field('sum(progress) as progress,COUNT(*) as sum')
                    ->where($map)
                    ->find();
                $sum = $data['sum'] * 100;
                $result = $data['progress'] / $sum;
                $v['pComp'] = round($result * 100);

				if($service['startTime']){
					$v['pStart'] = date("Y-m-d", $service['startTime']);
				}else{
					$v['pStart']='';
				}
				if($service['endTime']){
					$v['pEnd'] = date("Y-m-d", $service['endTime']);
				}else{
					$v['pEnd']='';
				}

                $gant[$k] = $v;
            }
            $map = [];
            if ($v['pMid']) {
                $map['ps.mid'] = $v['pMid'];
                $map['pid'] = $v['id'];
                //$map['state'] = ProjectService::STARTED;
                $service = M('Project_service')->alias('ps')
                    ->field('max(ps.petime) as endTime,min(ps.pstime) as startTime')
                    ->where($map)
                    ->find();
                $data = M('Project_service')->alias('ps')
                    ->field('sum(progress) as progress,COUNT(*) as sum')
                    ->where($map)
                    ->find();
                $sum = $data['sum'] * 100;
                $result = $data['progress'] / $sum;
                $v['pComp'] = round($result * 100);

               if($service['startTime']){
					$v['pStart'] = date("Y-m-d", $service['startTime']);
				}else{
					$v['pStart']='';
				}
				if($service['endTime']){
					$v['pEnd'] = date("Y-m-d", $service['endTime']);
				}else{
					$v['pEnd']='';
				}
                $gant[$k] = $v;
            }

            //  计算出1级标题
            $v['pParent'] > 0 ? $v['pGrade'] = 1 : $v['pGrade'] = 0;
            $gant[$k] = $v;
            //  计算出2级标题
            ($v['pParent'] > 10 && $v['pGrade'] == 1) and $v['pGrade'] = 2;
            $gant[$k] = $v;
        }
        $pEndMax = 0;               // 最大结束时间
        foreach ($gant as $k1 => $v1) {
            if (strtotime($v1['pEnd']) > strtotime($pEndMax)) {
                $pEndMax = $v1['pEnd'];
            }

        }
        $pStartMin = $pEndMax;      // 最小的开始时间
        foreach ($gant as $k => $v) {
            if (strtotime($v['pStart']) > 0 && strtotime($v['pStart']) < strtotime($pStartMin)) {
                $pStartMin = $v['pStart'];
            }
        }
        $pEndMaxWeek = date('w', strtotime($pEndMax));
        $pStartMinWeek = date('w', strtotime($pStartMin));
        $endWeek = 6 - $pEndMaxWeek;
        $pEndMax = date('Y-m-d', strtotime("$pEndMax +$endWeek day"));

        $pStartMin = date('Y-m-d', strtotime("$pStartMin -$pStartMinWeek day"));


        $min = date('d', strtotime($pStartMin));
        $differDate = floor((strtotime($pEndMax) - strtotime($pStartMin)) / 86400); // 相差多少天
        $datas = [];
        foreach ($gant as $k => $v) {
			if($v['pStart']&&$v['pEnd']){
				$startDays = floor((strtotime($v['pStart']) - strtotime($pStartMin)) / 86400); // 相差多少天
				$endDays = floor((strtotime($v['pEnd']) - strtotime($pStartMin)) / 86400); // 相差多少天
				$startBit = $y + $startDays; // 起始位
				$endBit = $y + $endDays;   // 结束位
				$v['startBit'] = $startBit;
				$v['endBit'] = $endBit;
			}else{
				$v['startBit'] = 0;
				$v['endBit'] = 0;
			}
            $gant[$k] = $v;
			if($v['pStart']&&$v['pEnd']){
				$gantDays = floor((strtotime($v['pEnd']) - strtotime($v['pStart'])) / 86400); // 相差多少天
			}else{
				$gantDays=-1;
			}
            $name = $v['pName'];
            $v['pGrade'] == 1 and $name = "    " . $v['pName'];
            $v['pGrade'] == 2 and $name = "        " . $v['pName'];
            $arr['0'] = $name;   //任务
            $arr['1'] = $v['pRes'];    // 指派给
			if($gantDays + 1>0){
				$arr['2'] = $gantDays + 1;    // 时长
				$arr['3'] = $v['pComp'] . "%";
			}else{
				$arr['2']='-';
				$arr['3']='-';
			}
                   // 进度
			if($v['pStart']){
				$arr['4'] = $v['pStart'];  // 开始
			}else{
				$arr['4'] = '-';
			}
			if($v['pEnd']){
				$arr['5'] = $v['pEnd'];    // 结束
			}else{
				$arr['5'] = '-';
			}
            $datas[] = $arr;
        }

        $data = $datas;
        import("IOFactory", "../excel/toexcel/PHPExcel", ".php");
        import("Excel2007", "../excel/toexcel/PHPExcel/Reader", ".php");
        import("PHPExcel", "../excel/toexcel", ".php");

        $filename = $project['name'] . '-甘特图-' . date('YmdHis');
        $filename .= ".xlsx";
        //header("Content-type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet; charset=utf-8");
        //header("Content-Disposition: attachment; filename=$filename");
		
        $excel = new \PHPExcel();
        $cacheMethod = \PHPExcel_CachedObjectStorageFactory::cache_in_memory_gzip;
        $excelAssistant = new \Vendor\ExcelAssistant;

        $letter = $excelAssistant->GetExcelTit($differDate + 10);

        //表头数组
		if($differDate){
			$tableheader = ['任务', '指派给', '时长', '进度', '开始时间', '结束时间', "$min"];
			$excel->getActiveSheet()->getStyle("$letter[6]4")->getFill()->setFillType(\PHPExcel_Style_Fill::FILL_SOLID);
			$excel->getActiveSheet()->getStyle("$letter[6]4")->getFill()->getStartColor()->setRGB("AAAAAA");
		}else{
			$tableheader = ['任务', '指派给', '时长', '进度', '开始时间', '结束时间'];
		}

        $tableheadertop = [];   // 按照天分出日期
        // 添加的表头 : 日期
        
        for ($i = 0; $i <= $differDate; $i++) {
            $d = $pStartMin;
            $w = strftime("%w", strtotime("$d"));
            $tableheadertop[$w][] = $pStartMin;
            $nextDay = date('Y-m-d', strtotime("$d +1 day"));
            if ($i != $differDate) {
                $tableheader[$x] = date('d', strtotime("$nextDay"));;
                $excel->setActiveSheetIndex();
                $excel->getActiveSheet()->getDefaultColumnDimension("$letter[$x]4")->setWidth(3);
                // 把周六和周日的背景设置成灰色
                $week = date('w', strtotime($d));
                if ($week == 5 || $week == 6) {
                    $excel->getActiveSheet()->getStyle("$letter[$x]4")->getFill()->setFillType(\PHPExcel_Style_Fill::FILL_SOLID);
                    $excel->getActiveSheet()->getStyle("$letter[$x]4")->getFill()->getStartColor()->setRGB("AAAAAA");
                }
            }    // 设置周六和周日的背景色
            $pStartMin = $nextDay;
            $x++;
        }

        $excel->getActiveSheet()->getColumnDimension('A')->setAutoSize(true);
        $excel->getActiveSheet()->getColumnDimension('B')->setAutoSize(true);
        $excel->getActiveSheet()->getColumnDimension('C')->setAutoSize(true);
        $excel->getActiveSheet()->getColumnDimension('D')->setAutoSize(true);
        $excel->getActiveSheet()->getColumnDimension('E')->setAutoSize(true);
        $excel->getActiveSheet()->getColumnDimension('F')->setAutoSize(true);

        // 给Excel添加背景色
        foreach ($gant as $k => $v) {
			if(!$v['startBit']||!$v['endBit']){
				continue;
			}
            $k = $k + 5;
            $startBit = $v['startBit'];
            $endBit = $v['endBit'];
            $startBitNext = $startBit;
            $cells = $endBit - $startBit + 1; // 一共的格子数
            if ($v['pColor'] == 'ff0000') {
                $color = 'ff0000';
            } else {
                if ($v['customize']) {
                    $color = '836fff';

                } else {
                    if ($v['pGrade'] == 1 || $v['pGrade'] == 0) {
                        $color = '000000';
                    } else {
                        $color = '836fff';
                    }
                }
            }

            $array = array(
                'style' => \PHPExcel_Style_Border::BORDER_THICK, //设置border样式
                'color' => array('rgb' => 'ffffff'), //设置border颜色
            );

            $split = 0;
            if ($v['pComp'] == 100) {
                $color1 = 'AAAAAA';
                $borders = array(
                    'outline' => $array
                );
            } else if ($v['pComp'] > 0 && $v['pComp'] < 100) {
                $progressCell = ceil((($v['pComp'] / 100) * $cells));  // 进度要站的格子数
                $progressEnd = $startBit + $progressCell - 1;
                $startBitNext = $progressEnd + 1;
                $color2 = 'AAAAAA';
                $color1 = $color;
                $borders2 = array(
                    'top' => $array,
                    'left' => $array,
                    'bottom' => $array,
                );
                $borders = array(
                    'top' => $array,
                    'right' => $array,
                    'bottom' => $array,
                );
                $split = 1;
            } else {
                $color1 = $color;
                $borders = array(
                    'outline' => $array
                );
            }
            if ($split) {
                $p1 = "$letter[$startBit]$k";
                $p2 = "$letter[$progressEnd]$k";
                $merge = "$p1" . ':' . "$p2";

                $excel->getActiveSheet()->mergeCells($merge);      //合并

                for ($i = $startBit; $i <= $progressEnd; $i++) {
                    $pCellCoordinate = "$letter[$i]$k";
                    $excel->getActiveSheet()->getStyle($pCellCoordinate)->getFill()->setFillType(\PHPExcel_Style_Fill::FILL_SOLID);
                    $excel->getActiveSheet()->getStyle($pCellCoordinate)->getFill()->getStartColor()->setRGB($color2);
                    $styleThinBlackBorderOutline = array(
                        'borders' => $borders2);
                    $excel->getActiveSheet()->getStyle($pCellCoordinate)->applyFromArray($styleThinBlackBorderOutline);

                }
            }

            $p3 = "$letter[$startBitNext]$k";
            $p4 = "$letter[$endBit]$k";
            $merge = "$p3" . ':' . "$p4";
            $excel->getActiveSheet()->mergeCells($merge);      //合并
            for ($i = $startBitNext; $i <= $endBit; $i++) {
                $pCellCoordinate = "$letter[$i]$k";
                $excel->getActiveSheet()->getStyle($pCellCoordinate)->getFill()->setFillType(\PHPExcel_Style_Fill::FILL_SOLID);
                $excel->getActiveSheet()->getStyle($pCellCoordinate)->getFill()->getStartColor()->setRGB($color1);
                $styleThinBlackBorderOutline = array(
                    'borders' => $borders
                );
                $excel->getActiveSheet()->getStyle($pCellCoordinate)->applyFromArray($styleThinBlackBorderOutline);

            }


        }

        // 周期
        $z = 6;
        $s = $z;
        $weekStart = $tableheadertop[0];    // 从周日开始
        $saturdayEnd = $tableheadertop[6];  // 至周六结束
        foreach ($weekStart as $k => $v) {
            $note = date('m/d', strtotime("$v")) . ' - ' . $saturdayEnd[$k];
            $excel->getActiveSheet()->setCellValue("$letter[$z]3", "$note");
            $z += 7;
        }
        $peCell = "$letter[$s]3" . ':' . "$letter[$z]3";
        $excel->getActiveSheet()->getStyle("$peCell")->applyFromArray(
            array(
                'font' => array(
                    'bold' => true
                ),
                'alignment' => array(
                    'vertical' => \PHPExcel_Style_Alignment::VERTICAL_CENTER
                )
            )
        );

		
		if($differDate>0){	
			for ($j = 0; $j <= $differDate / 7; $j++) {
				$x = ($j + 1) * 7 - 1;
				$y = (($j + 1) * 7 + 6) - 1;
				$start = "$letter[$x]3";
				$end = "$letter[$y]3";
				$merge = $start . ":" . $end;
				$excel->getActiveSheet()->mergeCells($merge);
				$excel->getActiveSheet()->getStyle($merge)->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
				$styleThinBlackBorderOutline = array(
					'borders' => array(
						'outline' => array(
							'style' => \PHPExcel_Style_Border::BORDER_THIN, //设置border样式
							'color' => array('rgb' => '333333'), //设置border颜色
						),
					),);
				$excel->getActiveSheet()->getStyle($merge)->applyFromArray($styleThinBlackBorderOutline);
			}
		}

        // 添加表头前面固定的
        for ($i = 0; $i < count($tableheader); $i++) {

            $excel->getActiveSheet()->setCellValue("$letter[$i]4", "$tableheader[$i]");
        }
        // 添加任务和项目经理
        $project['stime'] ? $project['stime'] = date('Y-m-d', $project['stime']) : $project['stime'] = "-";
        $project['etime'] ? $project['etime'] = '/' . date('Y-m-d', $project['etime']) : $project['etime'] = "/-";
        $project['pstime']? $project['pstime'] = date('Y-m-d', $project['pstime']) : $project['pstime'] = "-";
        $project['petime'] ? $project['petime'] = date('Y-m-d', $project['petime']) : $project['petime'] = "-";

        for ($i = 1; $i <= 2; $i++) {
            if ($i == 1) $note = $project['name'];
            if ($i == 2) {
                $note = "项目经理:" . $project['pm'] . "    所属部门:" . $project['dname'] . "    项目状态:" . $project['sname'] . "    计划开始/结束日期:" . $project['pstime'] . "/" . $project['petime'] . "      实际开始/结束时间:" . $project['stime'] . $project['etime'];

            }
            $j = 0;
            $excel->getActiveSheet()->setTitle('甘特图');
            $excel->getActiveSheet()->setCellValue("$letter[$j]$i", " " . "$note");
            $x = $i + 6;
        }


        $excel->getActiveSheet()->mergeCells("A1:IV1");
        $excel->getActiveSheet()->mergeCells("A2:IV2");
        $excel->getActiveSheet()->getRowDimension("1")->setRowHeight(30);
        $excel->getActiveSheet()->getRowDimension("2")->setRowHeight(30);
        $excel->getActiveSheet()->getStyle('A1:IV1')->getFont()->setSize(15);
        $excel->getActiveSheet()->getStyle('A2:IV2')->getFont()->setSize(10);
        $excel->getActiveSheet()->getStyle('A1:IV1')->applyFromArray(
            array(
                'font' => array(
                    'bold' => true
                ),
                'alignment' => array(
                    'vertical' => \PHPExcel_Style_Alignment::VERTICAL_CENTER
                )
            )
        );
        $excel->getActiveSheet()->getStyle('A2:AA2')->applyFromArray(
            array(
                'font' => array(
                    'bold' => true
                ),
                'alignment' => array(
                    'vertical' => \PHPExcel_Style_Alignment::VERTICAL_CENTER
                )
            )
        );

        $excel->getActiveSheet()->getStyle('A4:F4')->applyFromArray(
            array(
                'font' => array(
                    'bold' => true
                ),
                'alignment' => array(
                    'vertical' => \PHPExcel_Style_Alignment::VERTICAL_CENTER
                )
            )
        );
        //表格数组
        //填充表格信息
        for ($i = 5; $i <= count($data) + 4; $i++) {
            $j = 0;
            if ($i <= count($data) + 4) {
                foreach ($data[$i - 5] as $key => $value) {
                    $excel->getActiveSheet()->setTitle('甘特图');
                    $excel->getActiveSheet()->setCellValue("$letter[$j]$i", " " . "$value");
                    $j++;
                }
            }

        }

        //创建Excel输入对象
        ob_clean();
        ob_end_clean();
        ob_end_flush();

        $write = new \PHPExcel_Writer_Excel2007($excel);
        header("Pragma: public");
        header("Expires: 0");
        header("Cache-Control:must-revalidate, post-check=0, pre-check=0");
        header("Content-Type:application/force-download");
        header("Content-Type:application/vnd.ms-execl");
        header("Content-Type:application/octet-stream");
        header("Content-Type:application/download");;
        header('Content-Disposition:attachment;filename=' . $filename . '');
        header("Content-Transfer-Encoding:binary");
        $write->save('php://output');

    }

    public function defaultDate($date)
    {
        //当前日期
        $sdefaultDate = date("Y-m-d", strtotime($date));
        //$first =1 表示每周星期一为开始日期 0表示每周日为开始日期
        $first = 1;
        //获取当前周的第几天 周日是 0 周一到周六是 1 - 6
        $w = date('w', strtotime($sdefaultDate));
        //获取本周开始日期，如果$w是0，则表示周日，减去 6 天
        $week_start = date('m/d', strtotime("$sdefaultDate -" . ($w ? $w - $first : 6) . ' days'));
        //本周结束日期
        $week_end = date('Y-m-d', strtotime("$week_start +6 days"));
        $array['weekStart'] = $week_start;
        $array['weekEnd'] = $week_end;
        return $array;
    }


    public function export($pro)
    {
        if (empty($pro) || !is_array($pro) || count($pro) < 1) {
            $pro = array();
        }

        //获取想应的数据并排序
        foreach ($pro as $key => $val) {
            if ($val['name']) {
                $project_name = $val['name'];
            } else {
                $project_name = $val['p_name'] . '-' . $val['o_name'];
            }
            $arr['0'] = $project_name;
            $arr['1'] = $val['contract'];
            $arr['2'] = $val['sname'];
            $arr['3'] = $val['cname'];
            $arr['4'] = $val['pm'];
            $arr['5'] = $val['type'];//项目类型
            $arr['6'] = $val['levelc'];//优先级
            $arr['7'] = $val['petime'] ? date('Y-m-d', $val['petime']) : '';//计划 结束
            $arr['8'] = $val['tasknum'] . "/" . $val['ftasknum'];//任务完成
            $arr['9'] = $val['money'] . "/" . $val['amount'];// 金额/挣值
            $arr['10'] = $val['cost'] . '/' . $val['costh'];//成本发生
            $arr['11'] = $val['progress'] . "%";//进度
            $arr['12'] = $val['code'];//编号
            $datas[] = $arr;
        }
        $data = $datas;
        import("IOFactory", "../excel/toexcel/PHPExcel", ".php");
        import("Excel5", "../excel/toexcel/PHPExcel/Reader", ".php");
        import("PHPExcel", "../excel/toexcel", ".php");

        $today = strtotime(date('Y-m-d H:i:s'));   //本地时间
        $filename = '我参与的项目' . date('YmdHis');
        $filename .= ".xls";
        header("Content-type: application/vnd.ms-excel; charset=utf-8");
        header("Content-Disposition: attachment; filename=$filename");

        $excel = new \PHPExcel();

        //Excel表格式,这里简略写了8列
        $letter = array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M');
        //表头数组
        $tableheader = array('项目名称', '合同号', '状态', '客户', '项目经理', '项目类型', '优先级', '计划结束', '任务/完成', '金额/挣值', '成本/发生', '进度', '编号');
        //填充表头信息
        //        $excel->getActiveSheet()->getColumnDimension('A1:L1')->setWidth('13');
        for ($i = 0; $i < count($tableheader); $i++) {
            $excel->getActiveSheet()->setCellValue("$letter[$i]1", "$tableheader[$i]");
        }
        //表格数组
        //填充表格信息
        for ($i = 2; $i <= count($data) + 1; $i++) {
            $j = 0;
            if ($i <= count($data) + 1) {
                foreach ($data[$i - 2] as $key => $value) {
                    $excel->getActiveSheet()->setTitle('参与项目');
                    $excel->getActiveSheet()->setCellValue("$letter[$j]$i", " " . "$value");
                    $j++;
                }
            }

        }
        //创建Excel输入对象
        $write = new \PHPExcel_Writer_Excel5($excel);
        header("Pragma: public");
        header("Expires: 0");
        header("Cache-Control:must-revalidate, post-check=0, pre-check=0");
        header("Content-Type:application/force-download");
        header("Content-Type:application/vnd.ms-execl");
        header("Content-Type:application/octet-stream");
        header("Content-Type:application/download");;
        header('Content-Disposition:attachment;filename=' . $filename . '');
        header("Content-Transfer-Encoding:binary");
        $write->save('php://output');

    }

    public function projectlog()
    {
        $pro1 = M('Project')->alias('p')->where("(exists (select pid from ot_takepart where uid='" . UID . "' and pid=p.pid) or EXISTS(select 1 from ot_task t where t.pid = p.pid and t.uid=" . UID . ")) and p.del=0 ")->count();

        $pro2 = M('Project')->alias('p')->where("(exists (select pid from ot_takepart where uid='" . UID . "' and pid=p.pid) or EXISTS(select 1 from ot_task t where t.pid = p.pid and t.uid=" . UID . ")) and p.del=0 and p.state =2")->count();
        $pro3 = M('Project')->alias('p')->where("(exists (select pid from ot_takepart where uid='" . UID . "' and pid=p.pid) or EXISTS(select 1 from ot_task t where t.pid = p.pid and t.uid=" . UID . ")) and p.del=0 and p.state =1")->count();

        $projectlog = "<span>参与 <span class='textr'>$pro1</span><span>个项目</span>
                       &nbsp;已完成<span class='textr'>$pro2</span><span>个项目</span>
                       &nbsp;进行中<span class='textr'>$pro3</span><span>个项目</span></span>  
                      ";
        return $projectlog;
    }

    public function serviceExport($pro, $pname = '')
    {
        if (empty($pro) || !is_array($pro) || count($pro) < 1) {
            $pro = array();
        }
        //获取想应的数据并排序
        foreach ($pro as $key => $val) {
            $arr['0'] = $val['o_name'];
            $arr['1'] = $val['title'];
            $arr['2'] = $val['type'];
            if ($val['state'] == 1) {
                $arr['3'] = '已启动';
            } elseif ($val['state'] == 0 && empty($val['assignedname'])) {
                $arr['3'] = '未分配';
            } else {
                $arr['3'] = '已分配';
            }
            $arr['4'] = $val['pstime'] ? date('Y-m-d H:i:s', $val['pstime']) : $val['pstime'];
            $arr['5'] = $val['petime'] ? date('Y-m-d H:i:s', $val['petime']) : $val['petime'];
            $arr['6'] = $val['quans'];
            $arr['7'] = $val['days'];
            $arr['8'] = $val['hours'];
            $arr['9'] = $val['assignedname'];
            $arr['10'] = $val['executee_name'];
            if ($val['milestone']) {
                $val['milestone'] = '是';
            } else {
                $val['milestone'] = '否';
            }
            $arr['11'] = $val['milestone'];
            if ($val['delivery']) {
                $val['delivery'] = '是';
            } else {
                $val['delivery'] = '否';
            }
            $arr['12'] = $val['delivery'];
            if ($val['sdc']) {
                $module = M('ServiceDoc')->alias('sd')->join('ot_doc_type dt on dt.dtid = sd.dtid', 'left');
                $list = $this->lists($module, 'sid=' . $val['sid'], '', null, 'sd.*,dt.name');
                if ($list) {
                    foreach ($list as $vo) {
                        $val['sdc'] = $vo['name'];
                    }
                } else {
                    $val['sdc'] = '';
                };
                $sdc = '是';
            } else {
                $sdc = '否';
            }
            $arr['13'] = $sdc;
            $datas[] = $arr;
        }
        $data = $datas;
        import("IOFactory", "../excel/toexcel/PHPExcel", ".php");
        import("Excel5", "../excel/toexcel/PHPExcel/Reader", ".php");
        import("PHPExcel", "../excel/toexcel", ".php");

        $today = strtotime(date('Y-m-d H:i:s'));   //本地时间
        $filename = $pname . '-项目范围-内容清单' . date('YmdHis');
        $filename .= ".xls";
        header("Content-type: application/vnd.ms-excel; charset=utf-8");
        header("Content-Disposition: attachment; filename=$filename.xls");

        $excel = new \PHPExcel();

        //Excel表格式,这里简略写了8列
        $letter = array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N');
        //表头数组
        $tableheader = array('标准服务', '任务', '类型', '状态', '开始时间', '结束时间', '数量', '预周期', '预工时', '执行人', '负责人', '里程碑', '交付', '文档');
        //填充表头信息
        //        $excel->getActiveSheet()->getColumnDimension('A1:L1')->setWidth('13');
        for ($i = 0; $i < count($tableheader); $i++) {
            $excel->getActiveSheet()->setCellValue("$letter[$i]1", "$tableheader[$i]");
        }
        //表格数组
        //填充表格信息
        for ($i = 2; $i <= count($data) + 1; $i++) {
            $j = 0;
            if ($i <= count($data) + 1) {
                foreach ($data[$i - 2] as $key => $value) {
                    $excel->getActiveSheet()->setTitle('参与项目');
                    $excel->getActiveSheet()->setCellValue("$letter[$j]$i", " " . "$value");
                    $j++;
                }
            }

        }
        //创建Excel输入对象
        $write = new \PHPExcel_Writer_Excel5($excel);
        header("Pragma: public");
        header("Expires: 0");
        header("Cache-Control:must-revalidate, post-check=0, pre-check=0");
        header("Content-Type:application/force-download");
        header("Content-Type:application/vnd.ms-execl");
        header("Content-Type:application/octet-stream");
        header("Content-Type:application/download");;
        header('Content-Disposition:attachment;filename=' . $filename . '');
        header("Content-Transfer-Encoding:binary");
        $write->save('php://output');

    }

    public function updateOrder()
    {

        $idList1 = trim(I('post.psid'), ',');
        $orderBy = I('post.orderBy');
        $temp = false;

        $idList = explode(",", $idList1);
        $arr = array();
        foreach ($idList as $k => $v) {
            if (strrpos($v, 'xxxx') !== false) {
                $pid = explode('.', $v);
                $aa = $pid[1];
                $arr[] = $aa;
                unset($idList[$k]);
            }
        }
        /* echo $idList1;die;*/
        $map['s.psid'] = array('in', $idList);
        if ($arr) {
            $list = M('ProjectService')->alias('s')->field(array(
                's.*',
                'm.name as o_name',
                'g.name as gname',
                's1.name as sname',
                's1.description as s_description', 'p.name as pname', 'p.pid as pid',
                '(select count(1) from ot_service_doc sd where sd.sid = s.sid) as sdc'
            ))->join('ot_module m ON m.mid = s.mid', 'LEFT')
                ->join('ot_project_config p ON m.pid = p.pid', 'LEFT')
                ->join('ot_service s1 ON s1.sid = s.sid', 'LEFT')
                ->join('ot_group g ON s.groupid = g.groupid', 'LEFT')
                ->where($map)->order($orderBy)->select();
            $nlist = array();
            foreach ($list as $k => $v) {
                $pid = $v['pid'] ?: 'xx';
                $nlist[$pid]['mid'] = $pid;
                $nlist[$pid]['list'][] = $v;
            }
            $nlist1 = $nlist;
            foreach ($nlist as $k => $v) {
                $vo = array_shift($arr);
                if ($v['mid'] != $vo) {
                    $nlist1[$k]['list'] = $nlist[$vo]['list'];
                    $temp = true;
                }
            }
        }
        if ($temp) {
            $idlist4 = '';
            foreach ($nlist1 as $item) {
                foreach ($item['list'] as $v) {
                    $idlist4 .= $v['psid'] . ',';
                }
            }
            $idlist4 = trim($idlist4, ',');
            $psids = M('ProjectService')->where("psid in (" . $idlist4 . ")")->order("sort_order asc")->getField('sort_order,psid');
            $idlist5 = explode(',', $idlist4);
            foreach ($psids as $order => $id) {
                $newID = array_shift($idlist5);
                if ($id == $newID) continue;
                M('ProjectService')->where("psid = {$newID}")->save(array('sort_order' => $order));
            }
        } else {
            $list = M('ProjectService')->alias('s')->field(array(
                's.*',
                'm.name as o_name',
                'g.name as gname',
                's1.name as sname',
                's1.description as s_description', 'p.name as pname', 'p.pid as pid',
                '(select count(1) from ot_service_doc sd where sd.sid = s.sid) as sdc'
            ))->join('ot_module m ON m.mid = s.mid', 'LEFT')
                ->join('ot_project_config p ON m.pid = p.pid', 'LEFT')
                ->join('ot_service s1 ON s1.sid = s.sid', 'LEFT')
                ->join('ot_group g ON s.groupid = g.groupid', 'LEFT')
                ->where($map)->order($orderBy)->select();
            $nlist = array();
            foreach ($list as $k => $v) {
                $pid = $v['pid'] ?: 'xx';
                $nlist[$pid]['mid'] = $pid;
                $nlist[$pid]['list'][] = $v;
            }
            $idList3 = array();
            foreach ($nlist as $item) {
                foreach ($item['list'] as $v) {
                    $sort_order = $v['sort_order'];
                    $idList3[$sort_order] = $v['psid'];
                }
            }
            foreach ($idList3 as $order => $id) {
                $newID = array_shift($idList);
                if ($id == $newID) continue;
                M('ProjectService')->alias('s')->where("s.psid = {$newID}")->save(array('sort_order' => $order));
            }
        }

    }

    public function ajaxGetDropMenu()
    {
        if (I('paid')) {
            $url = I('get.module') . '/' . I('get.index') . '?item_id=' . I('get.item_id') . '&paid=' . I('get.paid') . '&ppid=';
        } else {
            $url = I('get.module') . '/' . I('get.index') . '?item_id=' . I('get.item_id') . '&ppid=';
        }
        $m = M("ProjectConfig");

        $pro = $m->where("parentid=0")->field('pid,name')->select();
        $list1 = "<input type='text' class='form-control' id='search' value='' placeholder='搜索'/>
		<div id='searchResult'><div id='defaultMenu' class='search-list'>
    	<ul>";
        $list2 = '';
        foreach ($pro as $vo) {
            $list2 .= " <li data-id=" . $vo ['pid'] . " data-key='" . str_replace(' ', '', pinyin($vo ['name'], 'all', '--')) . "' ><a href='" . U($url . $vo ['pid']) . "' ><i class='icon-folder-close-alt'></i> " . $vo ['name'] . "</a></li>";
        }
        $list3 = "</ul>";

        echo $list1 . $list2 . $list3;
    }

    public function budgetlog($pid)
    {
        $but1 = M('Projectbudget')->field("sum(budget) as budget,sum(cost) as cost")->where("pid = {$pid}")->select();
        $wfs = (float)$but1[0]['budget'] - (float)$but1[0]['cost'];
        if ($wfs < 0) {
            $wfs = 0;
        }
        $but2 = M('Projectbudget')->field("sum(budget) as budget,sum(cost) as cost")->where("pid = {$pid} and type ='人力成本'")->find();
        $but3 = M('Projectbudget')->field("sum(budget) as budget,sum(cost) as cost")->where("pid = {$pid} and type ='现金成本'")->find();
        $but4 = M('Projectbudget')->field("sum(budget) as budget,sum(cost) as cost")->where("pid = {$pid} and type ='第三方成本'")->find();

        if ($but1[0]['budget'] < $but1[0]['cost']) {
            $budgetlog = "<span>预算 <span class='textg'>" . fomatprice($but1[0]['budget']) . "</span>
	 		              &nbsp;未发生 <span class='textg'>" . fomatprice($wfs) . "</span>
                          &nbsp;已发生 <span class='textr'>" . fomatprice($but1[0]['cost']) . "</span>
                          &nbsp;其中 人力成本 <span class='textg'>" . $but2['cost'] . "</span>
                          &nbsp;现金成本 <span class='textg'>" . $but3['cost'] . "</span>
                          &nbsp;第三方成本 <span class='textg'>" . $but4['cost'] . "</span> 
                          ";
        } else {
            $budgetlog = "<span>预算 <span class='textg'>" . fomatprice($but1[0]['budget']) . "</span>
                          &nbsp;未发生<span class='textg'>" . fomatprice($wfs) . "</span>
                          &nbsp;已发生 <span class='textg'>" . fomatprice($but1[0]['cost']) . "</span>
                          &nbsp;其中 人力成本 <span class='textg'>" . $but2['cost'] . "</span>
                          &nbsp;现金成本 <span class='textg'>" . $but3['cost'] . "</span>
                          &nbsp;第三方成本 <span class='textg'>" . $but4['cost'] . "</span> 
                         ";
        }
        return $budgetlog;
    }

    /*	 参与人列表列表页*/
    public function takepartindex()
    {
        $id = I('get.id');
        $order = I('get.order');
        $sort = I('get.sort');
        if ($order && $sort) {
            $order_sort = $sort . ' ' . $order;
        } else {
            $order_sort = 'addtime desc';
        }
        $page = new \Think\Page(M('takepart')->alias('tp')->where(array('tp.pid=' . $id))->count(), 20);
        $list = M("takepart")->alias('tp')->field('tp.uname,tp.tpid,tp.description,pr.name,m.nickname')
            ->join('ot_project_role pr on pr.prid=tp.roleid')
            ->join('ot_member m on m.uid=tp.uid')
            ->where('tp.pid=' . $id)->order($order_sort)->limit($page->firstRow . ',' . $page->listRows)->select();
        $page->setConfig('theme', '%FIRST% %UP_PAGE% %LINK_PAGE% %DOWN_PAGE% %END% %HEADER%');
        $this->assign('_page', $page->show());
        $project = $this->db
            ->field('p.*,o.code oname,o.chance,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d3.name dname,m.nickname mname')
            ->alias('p')
            ->join('ot_offer o on p.oid = o.oid', 'LEFT')
            ->join('ot_dept d3 on p.orgid = d3.did', 'LEFT')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
            ->join('ot_customer c on p.cid = c.cid', 'LEFT')
            ->join('ot_member m on p.sale = m.uid', 'LEFT')
            ->where('p.pid=' . $id)
            ->find();
        $this->assign('p', $project);
        $this->assign('list', $list);
        $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
        $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');
        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
        $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectNew/view?id=' . $project['pid']));
        $root_mbx[] = array('title' => '规划', 'url' => U('ProjectNew/service?id=' . $project['pid']));
        $root_mbx[] = array('title' => '成员', 'url' => '');
        $this->assign('root_mbx', $root_mbx);
        $this->assign('actionName', 'projection');
        $this->assign('fourtitle', 'resourceplan');
        $this->display();
    }

    /* 里程碑列表页*/
    public function milestoneindex()
    {
        $id = I('get.id');
        $order = I('get.order');
        $sort = I('get.sort');
        if ($order && $sort) {
            $order_sort = $sort . ' ' . $order;
        } else {
            $order_sort = 'm.mtime asc';
            $this->assign('orderBy', $order_sort);
        }
        $project = $this->db
            ->field('p.*,o.code oname,o.chance,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d3.name dname,m.nickname mname')
            ->alias('p')
            ->join('ot_offer o on p.oid = o.oid', 'LEFT')
            ->join('ot_dept d3 on p.orgid = d3.did', 'LEFT')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
            ->join('ot_customer c on p.cid = c.cid', 'LEFT')
            ->join('ot_member m on p.sale = m.uid', 'LEFT')
            ->where('p.pid=' . $id)
            ->find();
        $this->rootMbx('里程碑计划', $project);
        $this->assign('p', $project);
        $page = new \Think\Page(M('milestone')->alias('m')->where(array('m.pid=' . $id))->count(), 20);
        $list = M('milestone')->alias('m')->field('m.name,m.mid,m.mtime,m.completion,m.sort_order,m.etime,ps.title,d1.d_key as type')
            ->join('ot_project_service ps on ps.psid=m.tid', 'left')
            ->join('ot_dictionary d1 on m.type = d1.d_value and d1.d_code=\'milestone_type\'', 'LEFT')
            ->where(array('m.pid' => $id))->order($order_sort)->limit($page->firstRow . ',' . $page->listRows)->select();
        $this->assign('list', $list);
        $page->setConfig('theme', '%FIRST% %UP_PAGE% %LINK_PAGE% %DOWN_PAGE% %END% %HEADER%');
        $this->assign('_page', $page->show());

        $this->assign('actionName', 'projection');
        $this->assign('fourtitle', 'milestoneindex');
        $this->display('milestoneindex');
    }

// kpi列表 : LGW
    public function kpiindex()
    {
        $id = I('get.id');

        $order = I('get.order');
        $sort = I('get.sort');
        if ($order && $sort) {
            $order_sort = $sort . ' ' . $order;
        } else {
            $order_sort = 'k.kid desc';
        }
        empty($id) and $this->error('项目不存在！');
        $project = $this->db
            ->field('p.*,o.code oname,o.chance,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d3.name dname,m.nickname mname')
            ->alias('p')
            ->join('ot_offer o on p.oid = o.oid', 'LEFT')
            ->join('ot_dept d3 on p.orgid = d3.did', 'LEFT')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
            ->join('ot_customer c on p.cid = c.cid', 'LEFT')
            ->join('ot_member m on p.sale = m.uid', 'LEFT')
            ->where('p.pid=' . $id)
            ->find();
        $this->assign('p', $project);

        $page = new \Think\Page(M('Project_kpi')->alias('k')->where(array('k.pid=' . $id))->count(), 20);
        $list = M('Project_kpi')
            ->alias('k')
            ->field('k.*,m.nickname')
            ->join('ot_member m on k.uid = m.uid', 'LEFT')
            ->where(array('k.pid' => $id))
            ->order($order_sort)
            ->limit($page->firstRow . ',' . $page->listRows)
            ->select();
        $this->assign('list', $list);
        $page->setConfig('theme', '%FIRST% %UP_PAGE% %LINK_PAGE% %DOWN_PAGE% %END% %HEADER%');
        $this->assign('_page', $page->show());
        $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
        $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');
        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
        $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectNew/view?id=' . $project['pid']));
        $root_mbx[] = array('title' => 'KPI', 'url' => '');
        $this->assign('root_mbx', $root_mbx);
        $this->display();
    }

// kpi批量编辑 : LGW
    public function kpi()
    {
        $id = I("get.id");    // 主键
        $pid = I("get.pid"); // 任务id

        if ($pid) {
            $newData = [];
            $data = $_POST;
            foreach ($data as $key => $value) {
                foreach ($value as $k => $v) {
                    $newData[$k][$key] = $v;
                }
            }
            $editData = [];
            $addData = [];

            foreach ($newData as $key => $value) {
                if (empty($value['kid'])) {
                    if (!empty($value['name'])) {
                        $addData[] = $value;
                    }
                } else {
                    $editData[] = $value;
                }
            }
            //  编辑
            if (is_array($editData)) {
                foreach ($editData as $key => $vo) {
                    $kid = $vo['kid'];
                    array_shift($vo);
                    $vo['edittime'] = time();
                    M('Project_kpi')->where('kid=' . $kid)->save($vo);
                }
            }
            // 新增
            if (is_array($addData)) {
                $sql = '';
                foreach ($addData as $key => $vo) {
                    extract($vo);
                    $addtime = time();
                    $uid = UID;
                    $comrate = $vo['comrate'];
                    $sql .= ",($pid,'" . $vo['name'] . "','" . $vo['value1'] . "','" . $vo['value2'] . "',$comrate,'" . $vo['note'] . "',$uid,$addtime)";
                }
                $sql = "insert into ot_project_kpi(pid,name,value1,value2,comrate,note,uid,addtime) values " . substr($sql, 1);
                M()->execute($sql);
            }
            $this->redirect('ProjectNew/kpiindex', array('id' => $pid));
        } else {
            empty($id) and $this->error('项目不存在！');
            $project = $this->db
                ->field('p.*,o.code oname,o.chance,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d3.name dname,m.nickname mname')
                ->alias('p')
                ->join('ot_offer o on p.oid = o.oid', 'LEFT')
                ->join('ot_dept d3 on p.orgid = d3.did', 'LEFT')
                ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
                ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
                ->join('ot_customer c on p.cid = c.cid', 'LEFT')
                ->join('ot_member m on p.sale = m.uid', 'LEFT')
                ->where('p.pid=' . $id)
                ->find();
            empty($project) and $this->error('项目不存在！');
            $project['description'] = htmlspecialchars_decode($project['description']);
            $project['risk'] = htmlspecialchars_decode($project['risk']);
            $project['feedback'] = htmlspecialchars_decode($project['feedback']);
            $this->assign('p', $project);

            $kpi = M('Project_kpi')->where('pid=' . $id)->order('kid desc')->select();

            $this->assign('kpi', $kpi);
            if (is_array($kpi) && !empty($kpi)) {
                $res = end($kpi);
                $sort = $res['sort_order'] + 1;
            } else {
                $sort = 1;
            }

            $this->assign('sort', $sort);
            $this->assign('pid', $id);

            $this->meta_title = 'KPI';

            $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
            $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');

            $root_mbx = array();
            $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
            $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
            $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectNew/view?id=' . $project['pid']));
            $root_mbx[] = array('title' => 'KPI', 'url' => U('ProjectNew/kpiindex?id=' . $project['pid']));
            $root_mbx[] = array('title' => '批量编辑', 'url' => '');
            $this->assign('root_mbx', $root_mbx);

            $this->assign('from_url', $from_url);
            $this->display();
        }

    }

// KPI删除 : LGW
    public function kpiDelete()
    {
        $kid = I('kid');
        !$kid and $this->json_error('请选择要操作的数据!', false);
        // 多条还是单条
        is_array($kid) ? $ids = implode(',', $kid) : $ids = $kid;

        $where = array('kid' => array('in', $ids));
        $kpis = M('Project_kpi')->where($where)->delete();
        if (!$kpis) {
            $this->json_error('删除失败!', false);
        }
        $this->ajaxReturn(['done' => true, 'msg' => '删除成功']);

    }

    /**
     *  沟通计划  : LGW
     *
     */
    public function commplan()
    {
        $map = [];
        $pid = I('get.id');    // 项目id
        $order = I('get.order');
        $sort = I('get.sort');
        if ($order && $sort) {
            $orderSort = $sort . ' ' . $order;
        } else {
            $orderSort = 'pc.addtime desc';
            $this->assign('orderBy', $orderSort);
        }
        $map['pc.pid'] = $pid;
        $project = $this->db->getProject($pid);    // 获取项目信息

        $count = M('pcp')->alias('pc')->where($map)->count();    // 分页
        $page = new \Think\Page($count, 20);
        $list = M("pcp")->alias('pc')
            ->field('pc.frequency,pc.type,pc.person1,pc.person2,pc.note')
            ->where($map)
            ->order($orderSort)
            ->limit($page->firstRow . ',' . $page->listRows)
            ->select();
        $page->setConfig('theme', '%FIRST% %UP_PAGE% %LINK_PAGE% %DOWN_PAGE% %END% %HEADER%');

        $this->rootMbx('沟通计划', $project);
        $this->assign('list', $list);
        $this->assign('_page', $page->show());
        $this->assign('p', $project);
        $this->assign('actionName', 'projection');
        $this->assign('fourtitle', 'commplan');
        $this->display();
    }


// 沟通计划批量编辑  : LGW
    public function commplanedit()
    {
        $pid = I('get.id');
        if (IS_POST) {
            $this->project_out($pid, 1);//判断项目是否可以操作
            $newData = [];
            $data = $_POST;
            foreach ($data as $key => $value) {

                foreach ($value as $k => $v) {
                    $newData[$k][$key] = $v;
                }

            }
            $editData = [];
            $addData = [];
            foreach ($newData as $key => $value) {
                if (empty($value['person1']) && (!isset($value['person2']) || empty($value['person2']))) {
                    continue;
                }
                $person2 = $value['person2'];
                if (is_array($person2) && !empty($person2)) {
                    $value['person2'] = implode(',', $person2);
                } else {
                    $value['person2'] = '';
                }
                if (empty($value['pcpid'])) {
                    $value['pid'] = $pid;
                    $addData[] = $value;
                } else {

                    $editData[] = $value;
                }

            }
            if (is_array($editData)) {
                foreach ($editData as $key => $vo) {
                    $pcpid = $vo['pcpid'];
                    M('pcp')->where('pcpid=' . $pcpid)->save($vo);
                }
            }
            if (is_array($addData)) {
                foreach ($addData as $key => $vo) {
                    M('pcp')->add($vo);
                }
            }
            $this->redirect('admin/ProjectNew/commplan', array('id' => $pid));
        } else {
            $project = $this->db->getProject($pid);    // 项目
            $pcps = M('pcp')->where('pid=' . $pid)->order('addtime asc')->select();    // 沟通计划
            $person2 = [];
            foreach ($pcps as $k => $v) {
                $person2[] = $v['person2'];
            }
            $frequencys = D('Pcp')->getFrequency();    // 沟通频率
            $types = D('Pcp')->getType();    // 沟通评论
            $players = M('Member')->field('uid,nickname')->select();    // DXY参与人员
            $action = [];
            $action['url'] = U('ProjectNew/commplan?id=' . $pid);
            $action['msg'] = '批量编辑';
            $this->rootMbx('沟通计划', $project, $action);    // 底部导航;

            $this->assign('person2', json_encode($person2));
            $this->assign('players', $players);
            $this->assign('frequencys', $frequencys);
            $this->assign('types', $types);
            $this->assign('pcps', $pcps);
            $this->assign('p', $project);
            $count = D('Pcp')->where("pid=" . $pid)->count();
            $this->assign('count', $count);
            $this->assign('actionName', 'projection');
            $this->assign('fourtitle', 'commplan');
            $this->display();
        }

    }


// 沟通计划批量删除  : LGW
    public function commplaneDrop()
    {
        $id = array_unique(( array )I('id', 0));
        $id = is_array($id) ? implode(',', $id) : $id;
        if (empty ($id)) {
            $this->ajaxReturn(array('done' => false, 'msg' => "请选择要操作的数据"));
        }
        $map ['pcpid'] = array('in', $id);
        if (M('pcp')->where($map)->delete() !== false) {
            $this->ajaxReturn(array('done' => true, 'msg' => "删除成功"));
        } else {
            $this->ajaxReturn(array('done' => false, 'msg' => "删除失败"));
        };
    }

    /*预算成本列表*/
    public function budgetindex()
    {
        $id = I('get.id');
        $order = I('get.order');
        $sort = I('get.sort');
        if ($order && $sort) {
            $sort == 'pb.b1' and $sort = "FORMAT(pb.cost/pb.budget*10000/100,0)";
            $sort == 'pb.b2' and $sort = "FORMAT(pb.cost/pb.cbudget*10000/100,0)";
            $order_sort = $sort . ' ' . $order;
        } else {
            $order_sort = 'pb.updatetime desc';
        }
        $project = $this->db
            ->field('p.*,o.code oname,o.chance,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d3.name dname,m.nickname mname')
            ->alias('p')
            ->join('ot_offer o on p.oid = o.oid', 'LEFT')
            ->join('ot_dept d3 on p.orgid = d3.did', 'LEFT')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
            ->join('ot_customer c on p.cid = c.cid', 'LEFT')
            ->join('ot_member m on p.sale = m.uid', 'LEFT')
            ->where('p.pid=' . $id)
            ->find();
        $this->assign('p', $project);

        $list = M("projectbudget")->alias('pb')
            ->field(array('pb.type1', 'pb.cbudget', 'pb.chours', 'pb.explain', 'pb.quantity', 'pb.price', 'pb.pid', 'pb.finishours',
                'pb.hours', 'pb.outid', 'pb.hours', 'pb.finishours', 'pb.pbid', 'pb.type', 'pb.budget', 'pb.cost',
                'pb.cost/pb.budget*10000/100 as bl', 'pb.cost/pb.cbudget*10000/100 as b2', 'pb.addtime',
                'pb.updatetime', 'pb.outitem'))
            ->where('pb.pid=' . $id)
            ->order($order_sort)
            ->select();

            
        foreach ($list as $k => $v) {
            if ($v['hours'] == 0.00) {
                $list[$k]['hours'] = '';
            } else {
                $list[$k]['hours'] = $v['hours'] . 'h';
            }
            if ($v['finishours'] == 0.00) {
                $list[$k]['finishours'] = '';
            } else {
                $list[$k]['finishours'] = $v['finishours'] . 'h';
            }
        }
        if ($list) {
            foreach ($list as $k => $V) {
            	$list[$k]['bl']=round($list[$k]['bl'],2);
            	$list[$k]['b2']=round($list[$k]['b2'],2);
                if (empty($V['bl'])) {
                    $list[$k]['bl'] = 0;
                } elseif ($V['bl'] > 100) {
                    $list[$k]['bl'] = 100;
                }
                if (empty($V['b2'])) {
                    $list[$k]['b2'] = 0;
                } elseif ($V['b2'] > 100) {
                    $list[$k]['b2'] = 100;
                }

            }
        }
        $cateList = [];
        foreach ($list as $k => $v) {
            $cateList[$v['type']][] = $v;
        }
        $map = [];
        $map['pid'] = $id;
        $map['type'] = '现金成本';
        $column = "sum(budget) as budget,sum(cost) as cost";
        $cashTotal = M('Projectbudget')->field($column)->where($map)->find();
        $map['type'] = '人力成本';
        $column = "type1,sum(cbudget) as cbudget,sum(cost) as cost,sum(chours) as chours,sum(finishours) as finishours";
        $laborTotal = M('Projectbudget')->field($column)->where($map)->group('type1')->select();

        $this->rootMbx('成本预算', $project);

        // 把人力成本分成 预算内 预算外（包含测试） 变更
        $labors = [];
        foreach ($cateList['人力成本'] as $k => $v) {
            $labors[$v['type1']]['list'][] = $v;

        }
        $cbudget = 0;
        $ccost = 0;
        foreach ($laborTotal as $k => $v) {
            $labors[$v['type1']]['total'] = $v;
            if ($v['type1'] == '预算内') {
                $cbudget += $v['cbudget'];
                $ccost += $v['cost'];
            }

        }
        $this->assign('cashs', $cateList['现金成本']);
        $this->assign('cashTotal', $cashTotal);
        /*  $this->assign('offbudget', $labors['预算外']);*/
        $this->assign('inbudget', $labors['预算内']);
        /*  $this->assign('chbudget', $labors['变更']);*/
        $this->assign('laborTotal', $laborTotal);
        $this->assign('list', $list);
        $this->assign('total', $cashTotal['budget']);
        $this->assign('costtotal', $cashTotal['cost']);
        $this->assign('actionName', 'projection');
        $this->assign('fourtitle', 'budgetindex');
        $this->display();
    }

    // 更新预算 : LGW
    public function updateBudget()
    {
        $pid = I('get.id');
        upBudget($pid); // 更新预算
        $this->json_success('更新成功', false);
    }

    /*获取项目下所有的任务*/
    public function get_task()
    {
        $id = I('post.pid');
        $psid = I('post.psid');
        if ($psid) {
            $res = M('ProjectService')->field('prepsid,sort_order')->where('psid=' . $psid)->find();
        }
        if ($id) {
            if (empty($res)) {
                $where = 'pid=' . $id;
            } else {
                $where = 'pid=' . $id . ' and sort_order <' . $res['sort_order'];
            }
            $data['info'] = M('ProjectService')->field('psid,title,assignedname,prepsid')->where($where)->select();
            if ($data['info']) {
                foreach ($data['info'] as $k => $vo) {
                    if ($vo['psid'] == $psid) {
                        unset($data['info'][$k]);
                    }
                }
                if ($res) {
                    $data['prepsid'] = $res['prepsid'];
                }
                echo json_encode($data);
            }

        }
    }

    // 获取人力成本下项目质量的详情 : LGW
    public function bug_cost()
    {
        $pid = I('get.pid');
        $map['b.pid'] = $pid;
        $files = M('Bug_hours')
            ->alias('h')
            ->field('h.*,t.title as task,b.title,b.finishuname,l.price,b.finishtime,b.hours as predicthours,l.price,h.hours')
            ->join('ot_bug b on b.bugid = h.bugid', 'INNER')
            ->join('ot_task t on t.tid = b.tid', 'LEFT')
            ->join('ot_auth_group_access a on a.uid = b.finishuid', 'LEFT')
            ->join('ot_role_level l on l.rlid = a.rlid', 'LEFT')
            ->where($map)
            ->select();
        $amountTotal = 0;
        $hours = 0;
        $finishhours = 0;

        foreach ($files as $k => $val) {
            $val['amount'] = round($val['price'] * $val['hours'], 2);
            $amountTotal += $val['amount'];
            $hours += $val['predicthours'];
            $finishhours += $val['hours'];

            $files[$k] = $val;
        }


        $this->assign('amountTotal', $amountTotal);
        $this->assign('hours', $hours);
        $this->assign('finishhours', $finishhours);
        $this->assign('files', $files);
        $this->display();
    }

    //获取人力成本下的任务
    public function human_cost()
    {
        $id = I('id');
        $pid = I('pid');
        $type = I('type');
        $files = M('ProjectService')->alias('ps')
            ->field('r.price  as price1 ,ps.title,ps.assignedname,ts.finishuname,r2.price * ifnull(ts.finishours,0) as amount,r.price * ifnull(ps.hours,0) as amount1,ps.description,r2.price,ts.finishours,ps.hours,ts.finishtime')
            ->join('ot_member m on m.uid=ps.assigneduid', 'left')
            ->join('ot_auth_group_access a on m.uid=a.uid', 'left')
            ->join('ot_role_level r on a.rlid=r.rlid', 'left')
            ->join('ot_task t on t.psid=ps.psid', 'left')
            ->join('ot_task_sub ts on ts.tid=t.tid', 'left')
            ->join('ot_member m2 on m2.uid=ts.finishuid', 'left')
            ->join('ot_auth_group_access a2 on m2.uid=a2.uid', 'left')
            ->join('ot_role_level r2 on a2.rlid=r2.rlid', 'left')
            ->where("ps.groupid='{$id}' and ps.pid = '{$pid}' and ps.type ='{$type}' ")
            ->order('ts.finishtime desc')
            ->select();
        /* $files = M('Task')->alias('t')
             ->field("t.state,ts.finishuname,t.assignedname,r.price,t.title,ts.finishours,(r.price*ts.finishours) as amount,ts.finishtime,t.hours,t.description,t.budget as amount1,r2.price as price1")
             ->join('ot_task_sub ts on ts.tid=t.tid', 'left')
             ->join('ot_member m2 on m2.uid=ts.finishuid', 'left')
             ->join('ot_auth_group_access a on m2.uid=a.uid', 'left')
             ->join('ot_role_level r on a.rlid=r.rlid', 'left')
             ->join('ot_member m on m.uid=t.assigneduid', 'left')
             ->join('ot_auth_group_access a2 on m.uid=a2.uid', 'left')
             ->join('ot_role_level r2 on a2.rlid=r2.rlid', 'left')
             ->where("t.groupid='{$id}' and t.pid = '{$pid}' and t.deleted=0")->order('ts.finishtime desc')->select();*/
        $amount = 0;    // 发生金额
        $chours = 0;    // 预计工时
        $finishours = 0;    // 完成工时
        foreach ($files as $key => $vo) {
            $files[$key]['description'] = preg_replace("/(\s|\&nbsp\;|　|\xc2\xa0)/", "", strip_tags(htmlspecialchars_decode($vo['description'])));
            $amount += (float)$vo['amount'];
            $chours += $vo['hours'];
            $finishours += $vo['finishours'];
        }
        $amount1 = M("projectbudget")->where('pid=' . $pid . ' and outid = ' . $id . " and type1 = '{$type}'")->getfield('cbudget');
        $this->assign('amount', $amount);
        $this->assign('chours', $chours);
        $this->assign('finishours', $finishours);
        $this->assign('amount1', $amount1);
        $this->assign('files', $files);
        $this->display();
    }

    //获取现金成本的详情
    public function bx_cost()
    {
        $id = I('id');
        $pid = I('pid');
        $files = M('ExpenseSub')->alias('es')->field("e.code,e.uname,es.money,es.invoicenum,e.checkedtime,e.description,es.feetype")
            ->join('ot_expense e on e.eid=es.eid')
            ->where("es.feetype='{$id}' and e.pid = '{$pid}'")->select();
        $amountTotal = 0;
        foreach ($files as $key => $vo) {
            $files[$key]['description'] = preg_replace("/(\s|\&nbsp\;|　|\xc2\xa0)/", "", strip_tags(htmlspecialchars_decode($vo['description'])));
            $amountTotal += (float)$vo['money'];
        }
        $this->assign('amountTotal', $amountTotal);
        $this->assign('files', $files);
        $this->display();
    }

//通过角色找到相关的参与人
    public function getList()
    {
        $prid = I('post.role');
        $pid = I('post.pid');
        //修改sql
        $res = M('takepart')->alias('tp')->field('tp.uid,tp.uname as nickname,tp.tpid')->where(array('tp.pid' => $pid))->select();
        $result = M('project_role')->alias('pr')->field('pr.*,rd.*,m.nickname,m.uid,tp.tpid')
            ->join('ot_role_dept rd on rd.prid=pr.prid', 'left')
            ->join('ot_member m on m.dept=rd.dtid')
            ->join('ot_takepart tp on tp.uid=m.uid and tp.pid=' . $pid . ' and tp.roleid=' . $prid, 'left')
            ->where(array('pr.prid' => $prid))->select();
        if (empty($result)) {
            $result = M('Member')->alias('m')->field('m.uid,m.nickname,tp.tpid')
                ->join('ot_takepart tp on tp.uid=m.uid and tp.pid=' . $pid . ' and tp.roleid=' . $prid, 'left')->select();
        }
        $output['prid'] = $prid;
        $output['user'] = $result;
        echo json_encode($output);

    }

//当前角色下的所有用户
    public function currentUser()
    {
        $role = I('post.role');
        $result = M('project_role')->alias('pr')->field('pr.*,rd.*,m.nickname,m.uid')
            ->join('ot_role_dept rd on rd.prid=pr.prid', 'left')
            ->join('ot_member m on m.dept=rd.dtid')
            ->where(array('pr.prid' => $role))->select();
        if (empty($result)) {
            $result = M('Member')->field('uid,nickname')->select();
        }
        echo json_encode($result);
    }

//激活已关闭或者已完成的项目
    public function activation()
    {
        $id = I('id');
        $pid = $_POST['pid'];
        if ($pid) {
            //$this->project_out($pid, 1);
            $tmep = M('Project')->field('state')->find($pid);
            if ($tmep['state'] == 2 || $tmep['state'] == -1) {
                $content = $_POST['content'];
                $pid = $_POST['pid'];
                $data = array();
                $data['pid'] = $pid;
                $data['state'] = 1;
                $data['etime'] = time();
                $temp = M('Project')->save($data);
                $history = array();
                $history [0] = array(
                    'field' => 'state',
                    'olddata' => $tmep['state'],
                    'newdata' => 1
                );
                action_log_new(array('history' => $history, 'outtype' => 'ot_project', 'outkey' => $pid, 'pid' => $pid, 'action' => 'activation', 'comment' => $content, 'ext1' => ''));
                if ($temp === false) {
                    $this->json_error('操作失败!', false);
                } else {
                    $this->ajaxReturn(array('done' => true, 'msg' => '成功'));
                }
            } else {
                $this->json_error('该项目不可激活!', false);
            }
        } else {
            if (!$id) {
                $this->errror('请选择要操作的数据！', 'javascript:window.parent.choose();');
            }
            $this->assign('pid', $id);
            $this->display();
        }
    }

    public function transactor()
    {
        $psids = I('get.psids');
        if (IS_POST) {
            $title = I("post.title", '');
            $stime = I("post.stime", '');
            $etime = I("post.etime", '');
            $state = I("post.state", '');
            $type = I("post.type", '');
            $toid = I("post.toid", '');
            $psids = I("post.psids", '');

            $description = I("post.description", '');

            if (empty ($title)) {
                $this->error('标题不能为空');
            }
            if (empty ($stime)) {
                $this->error('开始时间不能为空');
            }
            if (empty ($etime)) {
                $this->error('结束时间不能为空');
            }
            if (empty ($state)) {
                $this->error('状态不能为空');
            }
            if (empty ($type)) {
                $this->error('优先级不能为空');
            }
            if (empty ($toid)) {
                $this->error('待办人不能为空');
            }
            $c1 = "psid in ($psids)";
            $map['_string'] = "(($c1))";
            $pService = M('ProjectService')->field('title,state')
                ->where($map)
                ->select();
            $states1 = '';
            foreach ($pService as $k => $v) {
                if ($v['state'] == 1) {
                    $states1 .= "任务『 " . $v['title'] . '』 已启动不能指派执行人' . '<br>';  // LGW
                }
            }
            if ($states1 != '') {
                $this->error($states1, 'javascript:window.parent.choose2();');
            }
            $psidarr = explode(',', $psids);
            $tr = M("Member")->where("uid='{$toid}'")->find();
            $toname = $tr['nickname'];

            $data = array(
                'title' => $title,
                'stime' => strtotime($stime),
                'etime' => strtotime($etime),
                'state' => $state,
                'type' => $type,
                'description' => $description,
                'addtime' => time(),
                'uid' => is_login(),
                'uname' => get_nickname(is_login()) ? get_nickname(is_login()) : get_username(is_login()),
                'toid' => $toid,
                'toname' => $toname,
            );
            $tid = M('Todo')->add($data);
            if (!$tid) {
                $this->error('待办添加失败！');
            } else {
                // 发给待办人 时间点：新增待办  LGW
                $dynamic = [
                    'a' => $toname,
                    'b' => $title,
                    'email' => get_email($toid),
                ];
                $url = "Dealt/view/id/".$tid;
                $cost = sendTemplate($dynamic, 'dealt_to',$url);
                $costTypes = apiRead(Api::S_SEND, Api::DXY_S, $cost);  // 发给待办人 : LGW

                foreach ($psidarr as $v) {
                    $data1 = array(
                        'tid' => $tid,
                        'psid' => $v,
                    );
                    M('TodoPs')->add($data1);
                    M('ProjectService')->where(array('psid' => $v))->save(array(' executee_id' => $toid, 'executee_name_name' => $toname));
                }
                $pid = M('ProjectService')->where('psid=' . $psidarr[0])->getfield('pid');
                $titles = M('ProjectService')->field('title')->where('psid in(' . $psids . ')')->select();
                $content = '';
                foreach ($titles as $v) {
                    $content .= $v['title'] . ',';
                }
                $content = '将任务 ' . trim($content, ',') . ' 指派给' . $toname;

                action_log_new(array('outtype' => 'ot_todo', 'outkey' => $tid, 'pid' => $pid, 'action' => 'transactor', 'comment' => $content));

                $this->success('操作成功！', 'javascript:window.parent.choose1();');
            }
        } else {
            $this->assign('now', date('Y/m/d H:i'), time());
            $this->assign('psids', $psids);

            $types = M("Dictionary")->where("d_code='dbtype'")->select(array('order' => 'd_order asc'));
            $this->assign('types', $types);

            $state = M("Dictionary")->where("d_code='dbstate'")->select(array('order' => 'd_order asc'));
            $this->assign('states', $state);

            $this->display();
        }
    }

    /*
     * 获取待办人
     * */
    public function get_toname()
    {
        $psids = I('post.psids');
        if (empty($psids)) {
            return $this->json_error("请选择要指派的任务！");
        }
        $module = M('ProjectService');
        // 非标准和标准的查出所有对应的部门
        $service = $module
            ->alias('ps')
            ->field('ps.psid,ps.pcid,ps.mid,ps.groupid')
            ->where('ps.psid in (' . $psids . ')')
            ->select();
        $standard = '';
        $noStandard = '';
        if (!empty($service)) {
            foreach ($service as $k => $v) {
                // 标准服务 先找出服务模块下的服务角色
                if ($v['pcid'] && $v['mid']) {
                    $map['m.mid'] = $v['mid'];
                    $m = M('module')->alias('m')->field('m.roles')->where($map)->select();
                    if (!empty($m)) {
                        foreach ($m as $k => $v) {
                            if ($v['roles']) {
                                $standard ? $standard .= ',' . $v['roles'] : $standard .= $v['roles'];
                            }
                        }
                    }
                } else {
                    // 非标准
                    $noStandard ? $noStandard .= ',' . $v['groupid'] : $noStandard .= $v['groupid'];

                }
            }
        }
        $groupid = $standard . ',' . $noStandard;
        $groupid = trim($groupid, ',');
        $list = [];
        $groupid and $list = array_unique(explode(',', $groupid));
        if (!empty($list)) {
            $where['_string'] = "1=1 and (";
            foreach ($list as $k => $v) {
                $k == 0 ? $where['_string'] .= " CONCAT(',',d.groupids,',') like CONCAT('%,',$v,',%')" : $where['_string'] .= " or CONCAT(',',d.groupids,',') like CONCAT('%,',$v,',%')";
            }
            $where['_string'] .= " )";
            $psarr = M('dept')->alias('d')
                ->distinct(true)
                ->field('m.nickname,m.uid')
                ->join('ot_member m on m.dept = d.did and m.status=1')
                ->join('ot_auth_group_access aga on aga.uid = m.uid')
                ->join('ot_auth_group ag  on ag.id = aga.group_id ')
                ->where($where)
                ->select();
            if ($psarr) {
                return $this->json_result($psarr);
            } else {
                $psarr = M('Member')->field('nickname,uid')->where('status=1')->select();
                return $this->json_result($psarr);
            }
        } else {
            $psarr = M('Member')->field('nickname,uid')->where('status=1')->select();
            return $this->json_result($psarr);
        }


    }

    public function milestoneOrder()
    {
        $idList = trim(I('post.mid'), ',');
        $pid = trim(I('post.pid'));
        $orderBy = I('post.orderBy');
        $miles = M('milestone')->alias('m')->where("m.mid in ({$idList}) and m.pid={$pid}")->order("{$orderBy}")->getField('sort_order,mid');
        $idList = explode(",", $idList);
        foreach ($miles as $order => $id) {
            $newID = array_shift($idList);
            if ($id == $newID) continue;
            M('milestone')->where("mid = {$newID} and pid={$pid}")->save(array('sort_order' => $order));
        }
    }

    /*
    * 获取所属部门
    * */
    public function getDept()
    {
        $uid = I('post.uid', 0);
        if (empty($uid)) {
            return $this->json_error();
        }
        $dept = M('Member')->where('uid=' . $uid)->getfield('dept');
        if ($dept) {
            return $this->json_result($dept);
        } else {
            return $this->json_error();
        }
    }

    public function get_son_ids($id)
    {
        static $ids;
        $did = M('Dept')->where('parent=' . $id)->getField('did');
        if ($did) {
            $ids .= ',' . $did;
            $this->get_son_ids($did);
        }
        return $id . $ids;
    }

// 对树搜索 : LGW
    public function ajaxSearch()
    {
        $keywords = I('get.val');
        $ppid = I('get.ppid');
        $itemId = I('get.item_id');
        $paid = I('get.paid');
        if (I('get.exe')) {
            $url = 'Execute/alter_add_item?ppid=' . $ppid . '&item_id=' . $itemId . '&paid=' . $paid . '&pid=';
        } else {
            $url = 'ProjectNew/add_item?ppid=' . $ppid . '&item_id=' . $itemId . '&pid=';
        }
        $module = M('ProjectConfig');
        if (!$keywords || $keywords == '') {
            $ProTree = $this->getpro($url, $module, $ppid, 0);
        } else {
            $ProTree = $this->ajaxGetpro($keywords, $url, $module, $ppid, 1);
        }

        $ProTree = "<ul class='tree tree-lines' >" . substr($ProTree, 4);

        $this->json_result($ProTree, '', false);
    }

    public function ajaxGetpro($keywords, $url, $module, $ppid = 0, $pid = 0)
    {
        $c1 = "1=1";
        $c2 = " and parentid =$ppid";
        $c3 = " and (c.name like '%{$keywords}%' or EXISTS(SELECT 1 from ot_project_config sc where sc.path like CONCAT('%,',c.pid,',%')  and sc.name like '%{$keywords}%'))";
        $condition['_string'] = "(($c1 $c2 $c3))";

        $data = $module->alias('c')->where($condition)->order('sort_order desc')->select();

        global $lastMenu;
        if (is_array($data) && !empty ($data)) {
            $lastMenu .= "<ul>";
            if ($pid) {
                $class = "open in";
            } else {
                $class = "";
            }
            foreach ($data as $key => $value) {
                if ($module->where('parentid=' . $value ['pid'])->find()) {
                    $lastMenu .= "<li class='" . $class . "'> <i class='list-toggle icon'></i>" . "<a id='list" . $value ['pid'] . "' href=" . U($url . $value ['pid']) . " >" . $value ['name'] .
                        " </a>";
                    $this->ajaxGetpro($keywords, $url, $module, $value ['pid'], $value['parentid']);
                    $lastMenu .= "</li>";
                } else {
                    $lastMenu .= "<li class='" . $class . "'>" . "<a id='list" . $value ['pid'] . "' href=" . U($url . $value ['pid']) . ">" . $value ['name'] . " </a> 
					</li>";
                }
            }
            $lastMenu .= "</ul>";
        }

        return $lastMenu;
    }


    /**
     * 底部面包屑
     *  $title : 标题  $project 项目的名称和id
     *
     * @param        $title
     * @param        $project
     * @param string $action
     */
    public function rootMbx($title, $project, $action = '')
    {
        $url = '';
        if (is_array($action) && !empty($action)) {
            $url = $action['url'];
        }

        $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
        $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');
        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
        $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectView/view?id=' . $project['pid']));
        $root_mbx[] = array('title' => '规划', 'url' => U('ProjectNew/service?id=' . $project['pid']));
        $root_mbx[] = array('title' => $title, 'url' => $url);
        $url and $root_mbx[] = array('title' => $action['msg'], 'url' => '');
        $this->assign('root_mbx', $root_mbx);
        $this->assign('from_url', $from_url);
    }

    //关键服务
    public function key_service()
    {
        if (IS_POST) {
            $newdata = array();
            $data = $_POST;
            foreach ($data as $key => $value) {
                foreach ($value as $k => $v) {
                    $newdata[$k][$key] = $v;
                }
            }
            if (is_array($newdata)) {
                foreach ($newdata as $key => $vo) {
                    // 填写时间点才做保存操作 : LGW
                    if ($vo['mtime']) {
                        extract($vo);
                        $this->project_out($pid, 1);//判断项目是否可以操作
                        $mtime = strtotime($mtime);
                        $addtime = time();
                        $uname = get_nickname(is_login()) ? get_nickname(is_login()) : get_username(is_login());
                        $redata = array(
                            'pid' => $pid,
                            'pcid' => $pcid,
                            'mtime' => $mtime,
                            'addtime' => $addtime,
                            'uid' => UID,
                            'uname' => $uname,
                            'name' => $name,
                            'type' => 2,
                        );
                        $id = M('milestone')->add($redata);
                        M('milestone')->where(array('mid' => $id))->save(array('sort_order' => $id));
                    }

                }
            }
            echo "<script>window.parent.choose();</script>";
        } else {
            $pid = I('get.id', 0);
            $where = " and ps.pcid not in (select pcid from ot_milestone m where m.pid = {$pid})";
            $pcnames = M('ProjectService')->alias("ps")->distinct(true)->field("pc.name,ps.pcid,ps.pid")->join("ot_project_config pc on pc.pid = ps.pcid ")->where("ps.pid=" . $pid . $where)->select();

            $this->assign("pcnames", $pcnames);
            $this->display();
        }
    }

    /**
     *  更新里程碑
     *
     * @param $psid
     */
    public function updateMilestone($psid)
    {
        // 项目内容
        $list = D('ProjectService')->getServiceById($psid);
        $milestone = $list['milestone'];     // 里程碑 1 是 0 否
        $mList = D('Milestone')->getMilestoneByTid($list['psid']);  // 是否存在里程碑
        if ($milestone == 1 && ($mList == NULL || !$mList)) {
            // 如果为空则添加
            $data = [
                'pid' => $list['pid'],
                'addtime' => time(),
                'uid' => UID,
                'uname' => get_nickname(UID) ? get_nickname(UID) : get_username(UID),
                'name' => $list['title'],
                'tid' => $list['psid'],
                'type' => 1,
            ];
            $id = M('milestone')->add($data);
            M('milestone')->where(array('mid' => $id))->save(array('sort_order' => $id));


        } elseif ($milestone == 0 && $mList) {
            $condition = [];
            // 如果存在里程碑则删除
            $condition['mid'] = $mList['mid'];
            M('Milestone')->where($condition)->delete();    // 删除里程碑

        }

    }

    public function update_milestone()
    {
        $pid = I('get.id', 0);
        $this->project_out($pid, 1);//判断项目是否可以操作
        $where = " and ps.psid not in (select tid from ot_milestone m where m.pid = {$pid} ) and ps.milestone = 1";
        $psids = M('ProjectService')->alias("ps")->field('ps.psid,ps.title')->where("ps.pid=" . $pid . $where)->select();
        if (!empty($psids)) {
            $uname = get_nickname(is_login()) ? get_nickname(is_login()) : get_username(is_login());
            foreach ($psids as $vo) {
                $data = array(
                    'pid' => $pid,
                    'addtime' => time(),
                    'uid' => UID,
                    'uname' => $uname,
                    'name' => $vo['title'],
                    'tid' => $vo['psid'],
                    'type' => 1,
                );
                $id = M('milestone')->add($data);
                M('milestone')->where(array('mid' => $id))->save(array('sort_order' => $id));
            }
        }
        $this->json_success('更新成功', false);
    }

}
