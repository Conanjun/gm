<?php

namespace Admin\Controller;
use  Common\Controller\UserController;
use Think\Page;
/**
 * 设计工作室控制器 ：ZL
 *
 */
class StudioController extends AdminController
{
	private $model;
	
	//构造函数
	public function __construct()
	{
		parent::__construct();
		$this->model = D('Studio');    // 设计工作室Model
	}
	/*
     * 工作室首页
     * */
	public function index(){
		$where = " 1=1 ";
		$filter= '';
		$name = empty($_GET['name'])?'':trim($_GET['name']);//工作室名称
		if($name){
			$filter .= " and s.name like '%{$name}%'";
		}
		$code = empty($_GET['code'])?'':trim($_GET['code']);//code
		if($code){
			$filter .= " and  s.code like '%{$code}%'";
		}
		/*$addr = empty($_GET['addr'])?'':trim($_GET['addr']);//地址
		if($addr){
			$filter .= " and s.addr like '%{$addr}%'";
		}*/
		$regionname = empty($_GET['regionname'])?'':trim($_GET['regionname']);//所在区域
		if($regionname){
			$filter .= " and s.regionname like '%{$regionname}%'";
		}
		$urlparam = empty($_GET['urlparam'])?'':trim($_GET['urlparam']);//工作室标识
		if($urlparam){
			$filter .= " and s.urlparam like '%{$urlparam}%'";
		}
		$enabled = empty($_GET['enabled'])?'':trim($_GET['enabled']);//是否可用
		$enabled == 1 and  $filter .= " and s.enabled = 1";
		$enabled == 2 and  $filter .= " and s.enabled = 0";
		$where .= $filter;
		
		//更新排序
		if (isset($_GET['sort']) && isset($_GET['order'])) {
			$sort = strtolower(trim($_GET['sort']));
			$order = strtolower(trim($_GET['order']));
			if (!in_array($order, array('asc', 'desc'))) {
				$sort = 's.stuid';
				$order = 'desc';
			}
		} else {
			$sort = 's.stuid';
			$order = 'desc';
		}
		
		$count = $this->model->countNum($where);
		$page = new \Think\Page($count, 10);
		$lists = $this->model
				->alias('s')
				->where($where)
				->order("$sort $order")
				->limit($page->firstRow . ',' . $page->listRows)
				->select();
		$page->setConfig('theme','%FIRST% %UP_PAGE% %LINK_PAGE% %DOWN_PAGE% %END% %HEADER%');
		$this->assign('lists', $lists);
		$this->assign('_page', $page->show());
		$this->assign('regions', D("region")->get_options(0));
		$this->assign('filtered', $filter ? 1 : 0); //是否有查询条件
		$this->display();
	}
	/*
     * 新增工作室
     * */
	public function add(){
		if(IS_POST){
			$Model = M(); // 实例化一个空对象
			$Model->startTrans(); // 开启事务
		/*	header("Content-type: text/html; charset=utf-8");
			p($_POST);die;*/
			
			$name = empty($_POST['name'])?'':trim($_POST['name']);
			if(empty($name)){//名称不能为空
				$this->error(L('NAME_NOT_EMPTY'));
			}
			
			if($this->model->uniqueName($name)){//名称已存在
				$this->error(L('NAME_EXISTED'));
			}
			$logo = empty($_POST['logo'])?'':trim($_POST['logo']);
			$regionid = empty($_POST['regionid'])?'':trim($_POST['regionid']);
			$country = '';
			$province = '';
			$city = '';
			if($regionid){
				$arr = explode(',',$regionid);
				foreach($arr as $k => $v){
					if($k == 0){
						$country = $v;
					}elseif($k ==1 ){
						$province = $v;
					}elseif($k ==2){
						$city = $v;
					}
				}
			}
			$regionname = empty($_POST['regionname'])?'':trim($_POST['regionname']);
			$addr = empty($_POST['addr'])?'':trim($_POST['addr']);
			$tel = empty($_POST['tel'])?'':trim($_POST['tel']);
			$contact = empty($_POST['contact'])?'':trim($_POST['contact']);
			$urlparam = empty($_POST['urlparam'])?'':trim($_POST['urlparam']);
			$tags = empty($_POST['tags'])?'':trim($_POST['tags']);
			$tag = '';
			if($tags){
				$tag = implode(',',$tags);
			}
			$description = empty($_POST['description'])?'':trim($_POST['description']);
			$language = empty($_POST['language'])?'':trim($_POST['language']);
			$enabled = empty($_POST['enabled'])?0:trim($_POST['enabled']);
			$code = $this->model->getCode();
			$data = array(
				'name' => $name,
				'logo' => $logo,
				'country' => $country,
				'province' => $province,
				'city' => $city,
				'regionname' => $regionname,
				'addr' => $addr,
				'tel' => $tel,
				'contact' => $contact,
				'urlparam' => $urlparam,
				'tag' => $tag,
				'description' => $description,
				'language' => $language,
				'enabled' => $enabled,
				'code' => $code
			);
			$stuid = $this->model->add($data);
			if($stuid){
				//创建预定义工作室角色
				$authdefaults = M('AuthDefault')->field(true)->select();
				if($authdefaults){
					$user = new  UserController();
					foreach($authdefaults as $vo){
						$userDate = array(
							'username' =>$vo['title'],
							'module' =>'Admin',
							'stuid' => $stuid
						);
						$uid = $user->add($userDate);
						$authGroup = array(
							'module' => 'Admin',
							'type' => 1,
							'title' => $vo['title'],
							'description' => $name.$vo['title'],
							'rules' => $vo['rules'],
							'grade' => 1,
							'stuid' => $stuid,
						);
						$agid = M('AuthGroup')->add($authGroup);
						if($agid && $uid){
							$authGroupAccess = array(
								'uid' => $uid,
								'group_id' => $agid,
							);
							M('AuthGroupAccess')->add($authGroupAccess);
						}
					}
				}
			}
			if (!empty($stuid)) {
				action_log_new(array('outtype' => 'ot_studio', 'outkey' => $stuid, 'action' => 'add', 'comment' => ''));
				$Model->commit(); // 成功则提交事务
				$this->redirect('Studio/index');
			} else {
				$Model->rollback(); // 否则将事务回滚
				$this->error(L('ADD_ERROR'));
			}
		}else{
			$lists = array('enabled'=>1);
			$tags = M("Tag")->where(array('tag_type'=>'studio'))->select();
			$this->assign('tags', $tags);
			$this->assign('lists', $lists);
			$this->assign('regions', D("region")->get_options(0));
			$this->display();
		}
	}
	
	/*
     * 编辑工作室
     * */
	public function edit(){
		if(IS_POST){
			$Model = M(); // 实例化一个空对象
			$Model->startTrans(); // 开启事务
			$id = empty($_POST['id'])?0:trim($_POST['id']);
			$where = "stuid = {$id}";
			$lists =$this->model->getList($where);
			if(empty($lists)){
				$this->error(L('Data_not_exist'));
			}
			
			$name = empty($_POST['name'])?'':trim($_POST['name']);
			if(empty($name)){//工作室不存在
				$this->error(L('NAME_NOT_EMPTY'));
			}
			
			if($this->model->uniqueName($name,$id)){//工作室已存在
				$this->error(L('NAME_EXISTED'));
			}
			$logo = empty($_POST['logo'])?'':trim($_POST['logo']);
			$regionid = empty($_POST['regionid'])?'':trim($_POST['regionid']);
			$country = '';
			$province = '';
			$city = '';
			if($regionid){
				$arr = explode(',',$regionid);
				foreach($arr as $k => $v){
					if($k == 0){
						$country = $v;
					}elseif($k ==1 ){
						$province = $v;
					}elseif($k ==2){
						$city = $v;
					}
				}
			}
			$regionname = empty($_POST['regionname'])?'':trim($_POST['regionname']);
			$addr = empty($_POST['addr'])?'':trim($_POST['addr']);
			$tel = empty($_POST['tel'])?'':trim($_POST['tel']);
			$contact = empty($_POST['contact'])?'':trim($_POST['contact']);
			$urlparam = empty($_POST['urlparam'])?'':trim($_POST['urlparam']);
			$tags = empty($_POST['tags'])?'':$_POST['tags'];
			$tag = '';
			if(is_array($tags)){
				$tag = trim(implode(',',$tags),',');
			}
			$description = empty($_POST['description'])?'':trim($_POST['description']);
			$language = empty($_POST['language'])?'':trim($_POST['language']);
			$enabled = empty($_POST['enabled'])?0:trim($_POST['enabled']);
			$data = array(
				'stuid' => $id,
				'name' => $name,
				'logo' => $logo,
				'country' => $country,
				'province' => $province,
				'city' => $city,
				'regionname' => $regionname,
				'addr' => $addr,
				'tel' => $tel,
				'contact' => $contact,
				'urlparam' => $urlparam,
				'tag' => $tag,
				'description' => $description,
				'language' => $language,
				'enabled' => $enabled,
			);
			$stuid = $this->model->save($data);
			if ($stuid != false) {
				$history = array();
				foreach ($data as $key => $vo) {
					if ($vo != $lists [$key]) {
						$history [] = array(
							'field' => $key,
							'olddata' => $lists [$key],
							'newdata' => $vo
						);
					}
				}
				action_log_new(array('history'=>$history, 'outtype' => 'ot_studio', 'outkey' => $id, 'action' => 'edit', 'comment' => ''));
				$Model->commit(); // 成功则提交事务
				$this->redirect('Studio/index');
			} else {
				$Model->rollback(); // 否则将事务回滚
				$this->error(L('EDIT_ERROR'));
			}
		}else{
			$id = empty($_GET['id'])?0:$_GET['id'];
			if(empty($id)){
				$this->error(L('PLEASE_SELECT_DATA'));
			}
			$where = "stuid = {$id}";
			$list =$this->model->getList($where);
			if(empty($list)){
				$this->error(L('Data_not_exist'));
			}
			if($list['city']){
				$list['regionid'] = $list['city'];
			}elseif($list['province']){
				$list['regionid'] = $list['province'];
			}elseif($list['country']){
				$list['regionid'] = $list['country'];
			}else{
				$list['regionid'] = 0;
			}
			$tags = M("Tag")->field('tag_id,tag_name,0 as h')->where(array('tag_type'=>'studio'))->select();
			if ($tags && $list['tag']) {
				$tag = explode(',',$list['tag']);
				foreach ($tag as $vv) {
					foreach ($tags as $k => $v) {
						if($vv == $v['tag_name']){
							$r = M("Tag")->where("tag_type = 'studio' and '," . $vv . ",' like concat('%,',tag_name,',%')")->getField('tag_id');
							if ($r) {
								$tags[$k]['h'] = 1;
								break;
							}
						}
					}
				}
			}
			$this->assign('tags', $tags);
			$this->assign('list', $list);
			$this->assign('regions', D("region")->get_options(0));
			$this->display();
		}
	}
	//异步上传图片
	public function uploadPic($files = "")
	{
		$c = C('DOWNLOAD_UPLOAD');
		$uploader = new \Think\Upload($c);// 实例化上传类
		$method = $_SERVER["REQUEST_METHOD"];
		$filename = I('get.filename');
		if ($method == "POST") {
			header("Content-Type: text/plain");
			if($files===''){
				$files  =   $_FILES;
			}
			$info = $uploader->upload($files);
			$result['success'] = true;
			$result['uploadName'] = $c['rootPath'].$info['qqfile']['savepath'].$info['qqfile']['savename'];
			echo json_encode($result);
		} else {
			header("HTTP/1.0 405 Method Not Allowed");
		}
		
	}
	//异步修改数据
	public function ajax_col()
	{
		$id = empty($_GET['id']) ? 0 : intval($_GET['id']);
		$column = empty($_GET['column']) ? '' : trim($_GET['column']);
		$value = isset($_GET['value']) ? trim($_GET['value']) : '';
		$data = array();
		
		if (in_array($column, array('enabled'))) {
			$list =$this->model->getList("studio = '$id'");
			$data[$column] = $value;
			$lists = $this->model->where('stuid=' . $id)->save($data);
			if($lists){
				$history = array();
				foreach ($data as $key => $vo) {
					if ($vo != $list [$key]) {
						$history [] = array(
							'field' => $key,
							'olddata' => $list [$key],
							'newdata' => $vo
						);
					}
				}
				action_log_new(array('history'=>$history, 'outtype' => 'ot_studio', 'outkey' => $id, 'action' => 'edit', 'comment' => ''));
				echo   'true';
			}else{
				return;
			}
			
		} else {
			return;
		}
		return;
	}
	//删除数据
	public function delete()
	{
		$id = I('get.id');
		if (!$id) {
			$this->json_error(L('Data_not_exist'), false);
		}
		if (is_array($id)) {
			$ids = $id;
		} else {
			$ids = (array)$id;
		}
		$msg = '';
		foreach($ids as $id){
			$where = "studio = {$id}";
			$list =$this->model->getList($where);
			if($list){
				$res = $this->model->where($where)->delete();
				if($res === false){
					$msg .= "『{$list['name']}』".L('DELETE_FAILED')."\n";
				}else{
					$msg .= "『{$list['name']}』".L('DELETE_SUCCESS')."\n";
					action_log_new(array('outtype' => 'ot_studio', 'outkey' => $id, 'action' => 'delete', 'comment' => ''));
				}
			}else{
				$msg .= L('DELETE_FAILED')."\n";
			}
		}
		$this->json_success($msg);
	}
}
