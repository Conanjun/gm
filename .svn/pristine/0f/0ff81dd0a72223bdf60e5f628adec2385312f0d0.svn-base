<?php

namespace Admin\Controller;
/*
 * 模型维护控制器
 * */
class ModuleController extends AdminController
{
    //定义数据表
    private $db;
    private $pro_module;

    //构造函数 实例化ModuleModel 并获得整张表的数据
    public function __construct()
    {
        parent::__construct();
        //初始化时实例化category model
        $this->db = D('Module');
        $this->pro_module = D('ProjectConfig');
    }


    private function getpro($url, $module, $id = 0, $ppid = 0)
    {
        global $lastMenu;
        if ($ppid) {
            $where = 'pid = ' . $ppid . " ";
        } else {
            $where = 'parentid = ' . $id . " ";
        }
        $data = $module->where($where)->order('sort_order asc')->select();
        if (is_array($data) && !empty ($data)) {
            $lastMenu .= "<ul>";
            if ($ppid) {
                $class = "open in";
            } else {
                $class = "";
            }
            foreach ($data as $key => $value) {
                if ($module->where('parentid=' . $value ['pid'])->find()) {
                    $lastMenu .= "<li class='" . $class . "'> <i class='list-toggle icon'></i>" . "<a id='list" . $value ['pid'] . "' href=" . U($url . $value ['pid']) . " >" . $value ['name'] .
                        " </a> ";
                    $this->getpro($url, $module, $value ['pid'], 0);
                    $lastMenu .= "</li>";
                } else {
                    $lastMenu .= "<li class='" . $class . "'>" . "<a id='list" . $value ['pid'] . "' href=" . U($url . $value ['pid']) . ">" . $value ['name'] . " </a></li>";
                }
            }
            $lastMenu .= "</ul>";
        }
        return $lastMenu;
    }

    public function index()
    {
        //分组
        $group = D('Group')->order('sort_order', 'desc')->select();
        $this->assign('group', $group);

        $ProjectConfig = M('ProjectConfig')->select();
        $pid = I('get.ppid');
        if (!$pid) {
            $pid = $ProjectConfig [0] ['pid'];
            $this->assign('pname', $ProjectConfig [0] ['name']);
        } else {
            $p = M('ProjectConfig')->where(array(
                'pid' => $pid
            ))->find();
            $this->assign('pname', $p ['name']);
        }
        $this->assign('ppid', $pid);
        $pid1 = I('get.pid');
        if (empty ($pid1)) {
            $pid1 = $pid;
        }

        //项目
        $pro = $this->getpro('Module/index?ppid=' . $pid . '&pid=', $this->pro_module, $pid, 0);
        $pro = "<ul class='tree tree-lines'>" . substr($pro, 4);

        $pr01 = $this->pro_module->where('pid=' . $pid1)->find();
        $this->assign('module_name', $pr01['name']);

        $where = 'pid = ' . $pid1;
        $module = $this->db
            ->field(true)
            ->where($where)
            ->order('sort_order', 'desc')
            ->select();
        /*	echo $this->db->getLastSql();*/

        if (is_array($module)) {
            $sort = end($module);
            $sort = $sort['sort_order'] + 1;
            $this->assign('sort', $sort);
        }

        if ($module) {
            $mh = M("ModuleHelp");
            foreach ($module as $k => $v) {
                $row = $mh->where("mid='{$v['mid']}'")->find();
                if ($row) {
                    $module[$k]['h'] = 1;
                } else {
                    $module[$k]['h'] = 0;
                }
            }
        }
        //
        $moduleList = M('module')->field('mid,roles')->where('pid=' . $pid1)->select();    // 沟通计划

        $roles = [];
        foreach ($moduleList as $k => $v) {
            $roles[$v['mid']] = $v['roles'];
        }
        $root_mbx = array();
        $root_mbx[] = array('title' => '管理', 'url' => U('ProjectConfig/index'));
        $root_mbx[] = array('title' => '服务配置', 'url' => U('ProjectConfig/index'));
        $root_mbx[] = array('title' => '模块', 'url' => '');
        $this->assign('root_mbx', $root_mbx);
        $this->assign('module', $module);
        $this->assign('roles', json_encode($roles));
        $this->assign('ProjectConfig', $pro);
        $this->assign('pid', $pid1);
        $this->assign('ppid', $pid);
        $count = D('Module')->where("pid=" . $pid1)->count();
        $this->assign('count', $count);
        $this->display();
    }

    /**
     * 编辑模块
     */
    public function add()
    {
        if (IS_POST) {
            $pid = I('pid');
            if (empty($pid)) {
                $this->error('请选择要操作的项目！');
            }
            $newdata = array();
            $data = $_POST;
            foreach ($data as $key => $value) {
                foreach ($value as $k => $v) {
                    $newdata[$k][$key] = $v;
                }
            }
            $editdata = array();
            $adddata = array();
            foreach ($newdata as $key => $value) {
                $role = $value['roles'];
                if (is_array($role) && !empty($role)) {
                    $value['roles'] = implode(',', $role);
                } else {
                    $value['roles'] = '';
                }
                if (empty($value['mid'])) {
                    if (!empty($value['name'])) {
                        $value['addtime'] = time();
                        $value['uid'] = UID;
                        $value['pid'] = $pid;
                        $value['user_name'] = get_nickname(UID) ? get_nickname(UID) : get_username(UID);
                        $adddata[] = $value;
                    }
                } else {
                    $editdata[] = $value;
                }
            }
            if (is_array($editdata)) {
                foreach ($editdata as $key => $vo) {
                    $module = $this->db->find($vo['mid']);
                    $item ['name'] = $vo['name'];
                    $item ['roles'] = $vo['roles'];
                    $item ['sort_order'] = $vo['sort_order'];
                    $item ['description'] = $vo['description'];
                    $history = array();
                    foreach ($item as $key1 => $vo1) {
                        if ($vo1 != $module[$key]) {
                            $history[] = array(
                                'field' => $key1,
                                'olddata' => $module[$key1],
                                'newdata' => $vo1,
                            );
                        }
                    }
                    if ($this->db->save($vo) !== false) {
                        action_log_new(array('history' => $history, 'outtype' => 'ot_module', 'outkey' => $vo['mid'], 'action' => 'edit', 'comment' => ''));
                    }
                }
            }
            if (is_array($adddata)) {
                foreach ($adddata as $key => $vo) {
                    if (!empty($vo['name'])) {
                        $tmp = $this->db->add($vo);
                        action_log_new(array('outtype' => 'ot_module', 'outkey' => $tmp, 'action' => 'create', 'comment' => ''));
                    }
                }
            }
            $ppid = I("get.ppid", '');
            $this->redirect('Module/index', array('ppid' => $ppid, 'pid' => $pid));
//			$this->success ( '编辑成功！',U( "Module/index?ppid=$ppid&pid=".$pid ) );
        }

    }

    /*删除模块*/
    public function delete()
    {
        $id = I('get.mid');
        //检测项目内容和报单明细中是否有引用
        $where = "m.mid={$id}  and ( exists(select psid from ot_project_service ps where ps.mid={$id}) or exists(select osid from ot_offer_sub os where os.mid={$id}))";
        $result = M('Module')->alias('m')->where($where)->find();
        if ($result) {
            $this->json_error('模块在报价明细或项目内容中被引用,不可以删除', false);
        }
        $mid = array_unique((array)$id);
        if (!$mid) {
            $this->json_error('请选择要操作的数据!', false);
        }
        $where = array('mid' => array('in', $mid));
        $where3 = array('m.mid' => array('in', $mid));
        $temps = $this->db
            ->alias('m')
            ->field('mh.mhid,hf.file_id,f.savepath')
            ->join('ot_module_help mh on m.mid = mh.mid', 'LEFT')
            ->join('ot_help_file hf on mh.mhid = hf.mhid', 'LEFT')
            ->join('ot_file f on hf.file_id = f.fileid', 'LEFT')
            ->where($where3)
            ->select();
        $fileid = '';
        $mhid = '';
        foreach ($temps as $vo) {
            if ($vo['savepath']) {
                @unlink($vo['savepath']);
                $fileid .= ',' . $vo['file_id'];
            }
            $mhid .= ',' . $vo['mhid'];
        }
        $fileid = substr($fileid, 1);
        $mhid = substr($mhid, 1);


        $where1 = array('fileid' => array('in', $fileid));
        $where2 = array('mhid' => array('in', $mhid));
        $tmp = $this->db->where($where)->delete();
        if ($tmp) {
            M('Module_help')->where($where2)->delete();
            M('HelpFile')->where($where2)->delete();
            M('File')->where($where1)->delete();
            foreach ($mid as $vo) {
                action_log_new(array('outtype' => 'ot_module', 'outkey' => $vo, 'action' => 'delete', 'comment' => ''));
            }
            $this->ajaxReturn(array('done' => true, 'msg' => '删除成功'));
        } else {
            $this->json_error('删除失败!', false);
        }
    }

    public function chooseadd()
    {
        $mid = I('mid');
        if (IS_POST) {
            $data['title'] = $_POST['title'];
            $data['content'] = $_POST['content'];
            $data['sort_order'] = $_POST['sort_order'];
            $data['addtime'] = time();
            $data['uid'] = UID;
            $data['mid'] = $mid;
            $mhid = M('ModuleHelp')->add($data);
            if ($mhid) {
                action_log_new(array('outtype' => 'ot_module_help', 'outkey' => $mid, 'action' => 'docadd', 'comment' => ''));
                $accessories = array_filter($_FILES['files']['tmp_name']);
                if (!empty($accessories)) {
                    $this->file_uplode($mhid);
                }
            }
        } else {
            $this->assign('mid', $mid);
            $this->display();
        }


    }

    public function chooseindex()
    {
        $mid = I('mid');
        $where['mid'] = array('EQ', $mid);
        $order = "";
        if (I('sort', '') && I('order', '')) {
            $order = I("sort") . " " . I("order");
        }
        $ModuleHelp = M('ModuleHelp')->join('ot_member on ot_member.uid=ot_module_help.uid', 'LEFT');
        $list = $this->lists($ModuleHelp, $where, $order, null, 'ot_module_help.*,ot_member.nickname as user_name');
        $this->assign('_list', $list);
        $this->assign('mid', $mid);
        $this->display();
    }

    public function chooseedit()
    {
        $mhid = I('mhid');
        if (IS_POST) {
            $mid = I('mid');
            $data = array(
                'title' => $_POST['title'],
                'content' => $_POST['content'],
                'sort_order' => $_POST['sort_order']
            );
            $tmep = M('ModuleHelp')->find($mhid);
            $history = array();
            foreach ($data as $key => $vo) {
                if ($vo != $tmep[$key]) {
                    $history[] = array(
                        'field' => $key,
                        'olddata' => $tmep[$key],
                        'newdata' => $vo,
                    );
                }
            }
            $data['mhid'] = $mhid;
            $tmp = M('ModuleHelp')->save($data);

            if ($tmp === false) {
                $this->error('编辑失败！');
            } else {
                $fileids = $_POST['fileid'];
                $labels = $_POST['labels1'];
                if (!empty($fileids)) {
                    foreach ($fileids as $k => $v) {
                        $data['fileid'] = $v;
                        $data['name'] = $labels[$k];
                        M('File')->save($data);
                    }
                }
                $accessories = array_filter($_FILES['files']['tmp_name']);
                if (!empty($accessories)) {
                    $this->file_uplode($mhid);
                }
                action_log_new(array('history' => $history, 'outtype' => 'ot_module_help', 'outkey' => $mhid, 'action' => 'docedit', 'comment' => ''));
                $this->success('编辑成功！', U('Module/chooseindex?mid=' . $mid));
            }
        } else {
            $module_help = M('ModuleHelp')->where('mhid=' . $mhid)->find();
            $this->assign('module_help', $module_help);
            //
            $module_file = M('HelpFile')->field('hf.*,f.*')->alias('hf')->join('ot_file f on f.fileid= hf.file_id')->where('mhid=' . $mhid . ' and f.delete =0')->select();
            $this->assign('module_file', $module_file);

            $this->display();
        }

    }

    //删除模块指导
    public function delete1()
    {
        $ids = array_unique((array)I('mhid', 0));
        $mid = I('get.mid');
        if (!$ids) {
            $this->error('请选择要操作的数据！');
        }
        $where = array('mhid' => array('in', $ids));
        //查询关联表中File的id
        $data = M('HelpFile')->where($where)->select();
        if (is_array($data)) {
            $fileids = '';
            foreach ($data as $vo) {
                $fileids .= ',' . $vo['file_id'];
            }
            $fileids = substr($fileids, 1);
            $where1 = array('fileid' => array('in', $fileids));
        }
        //查询File表中的附件并删除
        $data1 = M('File')->where($where1)->select();
        if (is_array($data1)) {
            foreach ($data1 as $vo) {
                @unlink($vo['savepath']);
            }
        }
        M('File')->where($where1)->delete();

        M('HelpFile')->where($where)->delete();

        //删除ModuleHelp中的相关内容
        $tmp = M('ModuleHelp')->where($where)->delete();
        if ($tmp) {
            foreach ($ids as $vo) {
                action_log_new(array('outtype' => 'ot_module_help', 'outkey' => $vo, 'action' => 'docdel', 'comment' => ''));
            }
            $this->success('删除成功！', U('Module/chooseindex?mid=' . $mid));
        } else {
            $this->error('删除失败！');
        }
    }

    /*删除附件*/
    public function choosedelete()
    {
        $hfid = I('get.hfid');
        $fileid = I('get.fileid');
        if (!$hfid) {
            $this->json_error('请选择要操作的数据!', false);
        }
        $data = M('File')->find($fileid);

        if (M('HelpFile')->where('hfid=' . $hfid)->delete() === false) {
            $this->json_error('删除失败!', false);
        } else {
            @unlink($data['savepath']);
            M('File')->where('fileid=' . $fileid)->delete();
            action_log_new(array('outtype' => 'ot_file', 'outkey' => $fileid, 'action' => 'filedel', 'comment' => ''));
            $this->ajaxReturn(array('done' => true, 'msg' => '删除成功'));
        }
    }

    function file_uplode($mhid, $files = '')
    {
        $upload = new \Think\Upload(C('DOWNLOAD_UPLOAD'));// 实例化上传类
        // 上传文件
        $info = $upload->upload($files);
        if (!$info) {// 上传错误提示错误信息
            $this->error($upload->getError());
        } else {// 上传成功 获取上传文件信息
            $filelids = array();
            foreach ($info as $key => $value) {
                $a = explode('.', $value['name']);
                $name = $a[0];
                $file['name'] = $_POST['labels'][$key] ? $_POST['labels'][$key] : $name;
                $c = C('DOWNLOAD_UPLOAD');
                $file['savepath'] = $c['rootPath'] . $value['savepath'] . $value['savename'];
                $file['ext'] = $value['ext'];
                $file['size'] = $value['size'];
                $file['addtime'] = time();
                $file['uid'] = UID;
                $file['uname'] = get_nickname(is_login()) ? get_nickname(is_login()) : get_username(is_login());;
                $filelid = M('File')->add($file);
                $filelids[$filelid] = $filelid;
            }
            if (!empty($filelids)) {
                foreach ($filelids as $vo) {
                    $help_file['mhid'] = $mhid;
                    $help_file['file_id'] = $vo;
                    M('HelpFile')->add($help_file);
                }
            }
        }
    }

    public function ajaxGetDropMenu()
    {
        $url = I('get.module') . '/' . I('get.index') . '?ppid=';

        $m = M("ProjectConfig");

        $pro = $m->where("parentid=0")->field('pid,name')->select();
        $list1 = "<input type='text' class='form-control' id='search' value='' placeholder='搜索'/>
		<div id='searchResult'><div id='defaultMenu' class='search-list'>
    	<ul>";
        $list2 = '';
        foreach ($pro as $vo) {
            $list2 .= " <li data-id=" . $vo ['pid'] . " data-key='" . str_replace(' ', '', pinyin($vo ['name'], 'all', '--')) . "' ><a href='" . U($url . $vo ['pid']) . "' ><i class='icon-folder-close-alt'></i> " . $vo ['name'] . "</a></li>";
        }
        $list3 = "</ul>";

        echo $list1 . $list2 . $list3;
    }

}
