<?php

namespace Admin\Controller;

/**
 * 执行控制器
 */
use Admin\Common\Super\Api;
use Admin\Common\Super\Project;
use Admin\Common\Super\ProjectService;
use Admin\Model\DocModel;
use Admin\Model\ExpenseModel;
use Admin\Common\Super\Bug;

class ExecuteController extends AdminController
{
    //定义数据表
    private $db;
    private $document_model;
    private $exp_model;
    private $pro_module;

    //构造函数 实例化ModuleModel 并获得整张表的数据
    public function __construct()
    {
        parent::__construct();
        //初始化时实例化category model
        $this->db = D('Group');
        $this->document_model = new DocModel();
        $this->exp_model = new ExpenseModel();
        $this->assign('nowDate', date('Ymd'));
        $this->pro_module = D('ProjectConfig');
    }

    // 任务的搜索 : LGW
    public function taskSearch($t = 0)
    {
        // 任务状态
        $state = M("Dictionary")->where("d_code='taskstatus' and d_del=1")->field(array('d_key', 'd_value'))->order('d_order asc,d_tid asc')->select();
        // 优先级
        $unit = M("Dictionary")->where("d_code='task_level' and d_del=1")->field(array('d_key', 'd_value'))->order('d_order asc,d_tid asc')->select();
        // 任务类型
        $taskType = M('dictionary')->where("d_code = 'task_type'")->field(true)->select(array('order' => 'd_order asc'));
        $this->assign('taskType', $taskType);
        // 服务角色
        $Group = M('Group')->field('groupid,name')->order('sort_order desc')->select();
        $this->assign('states', $state);
        $this->assign('units', $unit);
        $this->assign('taskType', $taskType);
        $this->assign('groups', $Group);
        $c1 = " 1=1 ";
        $c2 = "";
        $c3 = "";
        $c4 = "";
        $c5 = "";
        $c6 = "";
        $c7 = "";
        $c8 = "";
        $c9 = " 1=1 ";
        $c10 = "";
        $c11 = "";
        $c12 = "";
        $c13 = "";
        $c14 = "";
        $c15 = "";


        $field1 = 'p.name';
        $field2 = 't.title';
        $field3 = 't.manageruname';
        $field4 = 't.assignedname';
        $field5 = 't.state';
        $field6 = 't.level';
        $field7 = 't.tasktype';
        $field8 = 't.groupid';
        $field9 = 't.pstime';
        $field10 = 't.petime';
        $field11 = 't.etime';
        $value1 = I('get.pname', '');  // 项目名称
        $value2 = I('get.title', '');     // 任务名称
        $value3 = I('get.manageruname', '');      // 分派人
        $value4 = I('get.assignedname', '');    // 执行人
        $value5 = I('get.state'); // 任务状态
        $value6 = I('get.level'); // 优先级
        $value7 = I('get.tasktype', ''); // 任务类型
        $value8 = I('get.groupid', ''); // 服务角色

        $pstimeStart = I('get.pstime_start', ''); // 计划开始时间从
        $pstimeEnd = I('get.pstime_end', ''); // 计划开始时间至
        $petimeStart = I('get.petime_start', ''); // 计划结束时间至
        $petimeEnd = I('get.petime_end', ''); // 计划结束时间至
        $etimeStart = I('get.etime_start', ''); // 实际结束时间至
        $etimeEnd = I('get.etime_end', ''); // 实际结束时间至

        $exists = "EXISTS(SELECT 1 FROM ot_project p WHERE p.pid=t.pid and";

        $value1 and $c1 = " $exists $field1 like '%{$value1}%')";
        $value2 and $c2 = " and $field2 like '%{$value2}%' ";
        $value3 and $c3 = " and $field3 like '%{$value3}%' ";
        $value4 and $c4 = " and $field4 like '%{$value4}%' ";
        if (is_numeric($value5)) $c5 = " and $field5=$value5";
        if (is_numeric($value6) && !$t) $c6 = " and $field6=$value6";
        if (is_numeric($value7) && !$t) $c7 = " and $field7=$value7";
        $value8 and $c8 = " and $field8=$value8";
        if ($pstimeStart) {
            $start = strtotime($pstimeStart);
            $c9 .= " and $field9 >= '{$start}'";
        }
        if ($pstimeEnd) {
            $end = strtotime($pstimeEnd);
            $c9 .= " and $field9 <= '{$end}'";
        }
        if ($petimeStart) {
            $start = strtotime($petimeStart);
            $c10 .= " and $field10 >= '{$start}'";
        }
        if ($petimeEnd) {
            $end = strtotime($petimeEnd);
            $c10 .= " and $field10 <= '{$end}'";
        }

        if ($etimeStart && !$t) {
            $start = strtotime($etimeStart);
            $c11 .= " and $field11 >= '{$start}'";
        }
        if ($etimeEnd && !$t) {
            $end = strtotime($etimeEnd);
            $c11 .= "and $field11 <= '{$end}'";
        }
        $this->assign('calculate', calculateDate()); // 本周 本月 等
        $actionURL = strstr(__ACTION__, '/Admin');
        $this->assign('actionURL', $actionURL);

        $reset = I('get.reset');
        if ($reset == 1) {
            $c1 = " 1=1 ";
            $condition ['_string'] = "(( $c1))";
            return $condition;
        }
        $condition ['_string'] = "(($c1 $c2 $c3 $c4 $c5 $c6 $c7 $c8) and ($c9 $c10 $c11 $c12 $c13 $c14 $c15 ) )";

        $this->assign('value1', $value1);
        $this->assign('value2', $value2);
        $this->assign('value3', $value3);
        $this->assign('value4', $value4);
        $this->assign('value5', $value5);
        $this->assign('value5', $value5);
        $this->assign('value6', $value6);
        $this->assign('value7', $value7);
        $this->assign('value8', $value8);

        $this->assign('pstimeStart', $pstimeStart);
        $this->assign('pstimeEnd', $pstimeEnd);
        $this->assign('petimeStart', $petimeStart);
        $this->assign('petimeEnd', $petimeEnd);

        $this->assign('etimeStart', $etimeStart);
        $this->assign('etimeEnd', $etimeEnd);
        $pstime = I('get.pstime');
        $petime = I('get.petime');
        $etime = I('get.etime');
        $this->assign('pstime', $pstime);
        $this->assign('petime', $petime);
        $this->assign('etime', $etime);
        $show = 0;
        $second = 0;
        if ($value1 || $value2 || $value3 || $value4 || is_numeric($value5) || is_numeric($value6) || $value7 || $value8 || $pstimeStart || $pstimeEnd || $petimeStart || $petimeEnd || $etimeStart || $etimeEnd) $show = 1;
        if ($pstimeStart || $pstimeEnd || $petimeStart || $petimeEnd || $etimeStart || $etimeEnd) $second = 1;
        $this->assign('show', $show);
        $this->assign('second', $second);

        return $condition;

    }

    //任务首页
    public function task_index()
    {

        $pid = I('get.id') ? I('get.id') : I('get.pid');
        if (empty($pid)) {
            $this->error('非法操作');
        }
        $project = M('project')
            ->alias('p')
            ->field('p.name,p.state,p.pid,d1.d_key as sname,p.uid,p.pmuid')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->where(array('p.pid' => $pid))
            ->find();
        if (empty($project)) {
            $this->error('项目不存在或已删除！');
        }
        $this->assign('pid', $pid);

        $where = $this->taskSearch();

        C('LIST_ROWS', 20);
        $where['_string'] .= " and t.deleted = 0 and t.pid = {$pid}";

        if (I('sort', '') && I('order', '')) {
            $order = "tt asc ," . I("sort") . " " . I("order");
        } else {
            $order = "tt,x.petime";
        }
        $map = $this->taskSearch(1);

        $map['_string'] .= " and t.state = 0 and t.assigneduid = 0 and t.pid = {$pid}";
        $sql = "select count(1) as sum from (
                select 1 as id
                from ot_project_service t 
                WHERE {$map['_string']}
                UNION ALL select 1 as id
                from ot_task t
                WHERE {$where['_string']}
                ) x ;";
        $sum = M()->query($sql);
        $count = $sum[0]['sum'];
        $page = new \Think\Page($count, 20);
        $sql = " SELECT x.*,m.name mname,p.name pname from (
                 SELECT t.psid as tid,-10 as level,t.title,t.assigneduid,t.assignedname,0 as addtime,0 as finishtime,t.hours,t.amount,t.mid,t.pid,t.state,t.petime,d1.d_key as statestr,'' as level_name, 0 as tt  
                 from ot_project_service t 
                 LEFT JOIN ot_dictionary d1 on d1.d_value = t.state and d1.d_code='project_service_state'
                 WHERE {$map['_string']}
                 UNION ALL select t.tid,t.level,t.title,t.assigneduid,t.assignedname,t.addtime,t.finishtime,t.hours,t.amount,t.mid,t.pid,t.state,t.petime,d1.d_key as statestr,d.d_key as level_name,1 as tt
                 from ot_task t
                 LEFT JOIN ot_dictionary d1 on d1.d_value = t.state and d1.d_code='taskstatus'
                 LEFT JOIN ot_dictionary d on d.d_value = t.level and d.d_code='task_level'
                 WHERE {$where['_string']} 
                ) x 
                LEFT JOIN ot_module m ON m.mid = x.mid
                LEFT JOIN ot_project p on p.pid = x.pid
                ORDER BY $order 
                LIMIT " . $page->firstRow . "," . $page->listRows;
        $list = M()->query($sql);

        // 导出Excel
        if (I("get.exportexcel", "") == 1) {

            $this->export($list, $project['name']);
        }


        // 只有任务存在才显示内容
        if ($list) {
            $today = strtotime(date('Y-m-d'));
            /*   $list = $this->lists($module, $where, $order, null, 't.*,d.d_key level_name,m.name mname,p.name pname,d1.d_key as statestr');*/
            foreach ($list as $k => $v) {
                /* if ($v['state'] != Task::FINISHED && $v['state'] != Task::CLOSE) {
                     $v['petime_format'] = date("Ymd", $v['petime']);
                     $list[$k] = $v;
                 }*/
                // 只有任务才算延期 待办 未到
                if ($v['tt'] == 1) {
                    $petime = $v['petime'];
                    $num = (int)$petime - (int)$today;
                    if ($num > 0) {
                        $num = round($num / 86400);
                        if ($num > 5) {
                            $list[$k]['color'] = 'green';
                            $list[$k]['num'] = '···';
                            $list[$k]['num1'] = $num;
                        } else {
                            $list[$k]['color'] = 'green';
                            $list[$k]['num'] = $num;
                            $list[$k]['num1'] = $num;
                        }
                    } elseif ($num < 0) {
                        $num = abs($num);
                        $num = round($num / 86400);
                        if ($num > 5) {
                            $list[$k]['color'] = 'red';
                            $list[$k]['num'] = '···';
                            $list[$k]['num1'] = $num;
                        } else {
                            $list[$k]['color'] = 'red';
                            $list[$k]['num'] = $num;
                            $list[$k]['num1'] = $num;
                        }
                    } else {
                        $list[$k]['color'] = 'yellow';
                    }
                }

            }
        }

        $page->setConfig('theme', '%FIRST% %UP_PAGE% %LINK_PAGE% %DOWN_PAGE% %END% %HEADER%');
        $this->assign('_page', $page->show());
        $this->assign('_list', $list);
        $this->assign('p', $project);


        $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
        $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');

        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
        $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectView/view?id=' . $pid));
        $root_mbx[] = array('title' => '执行', 'url' => U('Execute/task_index?id=' . $pid));
        $root_mbx[] = array('title' => '任务', 'url' => '');
        $this->assign('root_mbx', $root_mbx);
        $this->assign('actionName', 'execute');
        $this->assign('actname', 'task_index');
        $this->assign('from_url', $from_url);

        $this->display();
    }

    public function task_add()
    {
        $this->assign('actionName', 'execute');
        $this->assign('actname', 'task_index');
        $pid = I('get.pid');

        if (IS_POST) {
            if (empty ($_POST ['title'])) {
                $this->error('任务标题不能为空');
            }
            $res = M('Task')->where("name = '" . $_POST['name'] . "'")->find();
            if ($res) {
                $this->error('任务标题已存在！');
            }
            if (empty ($_POST ['pid'])) {
                $this->error('请选择项目');
            }
            if (empty ($_POST ['assigneduid'])) {
                $this->error('请选择执行人');
            }

            $pstime = strtotime($_POST['pstime']);
            $petime = strtotime($_POST['petime']);
            if (empty ($pstime)) {
                $this->error('计划开始时间不能为空');
            }
            if (empty ($petime)) {
                $this->error('计划结束时间不能为空');
            }
            if ($petime < $pstime) {
                $this->error('结束时间必须大于开始时间');
            }
            if (!is_numeric($_POST['days']) || $_POST['days'] < 0) {
                $this->error('周期填写有误');
            }
            if (!is_numeric($_POST['hours']) || $_POST['hours'] < 0) {
                //$this->error('工时填写有误');
            }
            $pid = $_POST['pid'];
            // $project = M('Project')->field('pstime,petime')->where('pid = ' . $pid)->find();
            /* if ($pstime < $project['pstime']) {

                 $this->error('项目计划开始时间从' . date('Y/m/d',$project['pstime']) . '开始，' . date('Y/m/d',$pstime) . '已超出范围，请重新设置计划开始时间');
             }
             if ($petime > $project['petime']) {
                 $this->error('项目计划结束时间至' . date('Y/m/d',$project['petime']). '结束，' .date('Y/m/d',$petime) . '已超出范围，请重新设置计划结束时间');
             }*/
            $groupid = $_POST['groupid'] ?: 0;
            $Model = M(); // 实例化一个空对象
            $Model->startTrans(); // 开启事务
            $data1 = array(
                'pid' => $pid,
                'title' => $_POST['title'],
                'groupid' => $groupid,
                'assignedname' => get_nickname($_POST['assigneduid']) ? get_nickname($_POST['assigneduid']) : get_username($_POST['assigneduid']),
                'assigneduid' => $_POST['assigneduid'],
                'checkuname' => get_nickname($_POST['checkuid']) ? get_nickname($_POST['checkuid']) : get_username($_POST['checkuid']),
                'checkuid' => $_POST['checkuid'],
                'pstime' => $pstime,
                'petime' => $petime,
                'days' => $_POST['days'],
                'hours' => $_POST['hours'],
                'description' => $_POST['description'],
                'state' => 1,
                'lastedituid' => UID,
                'lastedituname' => get_nickname(UID) ? get_nickname(UID) : get_username(UID),
                'lastedittime' => time(),
                'manageruid' => UID,
                'manageruname' => get_nickname(UID) ? get_nickname(UID) : get_username(UID),
                'type' => '预算外',
                'quans' => '1'
            );
            $psid = M('ProjectService')->add($data1);
            //更改排序
            M('project_service')->save(array('psid' => $psid, 'sort_order' => $psid));

            $data = array(
                'pid' => $_POST['pid'],
                'psid' => $psid,
                'groupid' => $groupid,
                'title' => $_POST['title'],
                'assignedname' => get_nickname($_POST['assigneduid']) ? get_nickname($_POST['assigneduid']) : get_username($_POST['assigneduid']),
                'assigneduid' => $_POST['assigneduid'],
                'assignedtime' => time(),
                'checkuname' => get_nickname($_POST['checkuid']) ? get_nickname($_POST['checkuid']) : get_username($_POST['checkuid']),
                'checkuid' => $_POST['checkuid'],
                'pstime' => $pstime,
                'petime' => $petime,
                'days' => $_POST['days'],
                'hours' => $_POST['hours'],
                'level' => $_POST['level'],
                'description' => $_POST['description'],
                'lastedituid' => UID,
                'lastedituname' => get_nickname(UID) ? get_nickname(UID) : get_username(UID),
                'lastedittime' => time(),
                'addtime' => time(),
                'uid' => UID,
                'uname' => get_nickname(UID) ? get_nickname(UID) : get_username(UID),
                'state' => 1,
                'sign' => 1,
                'tasktype' => $_POST['tasktype'],
            );
            $task_id = M('Task')->add($data);

            //更新项目path字段
            changeProjectPath($_POST['pid']);
            $roleid = M('ProjectRole')->where("name='项目执行'")->getfield('prid');
            if ($roleid) {
                $tmp4 = M('Takepart')->field('tpid')->where('uid=' . $_POST['assigneduid'] . ' and pid = ' . $_POST['pid'])->find();
                if (empty($tmp4['tpid'])) {
                    $data4 = array(
                        'pid' => $_POST['pid'],
                        'uid' => $_POST['assigneduid'],
                        'uname' => $_POST['assignedname'],
                        'addtime' => time(),
                        'adduname' => get_nickname(UID) ? get_nickname(UID) : get_username(UID),
                        'adduid' => UID,
                        'roleid' => $roleid,
                    );
                    M('Takepart')->add($data4);
                }
            }
            action_log_new(array(
                'outtype' => 'ot_task',
                'outkey' => $task_id,
                'action' => 'create',
                'comment' => ''
            ));
            $taskmod = M("Task");
            $task = $taskmod->alias('t')
                ->field("t.*,p.name as pname,pmuid")
                ->join('ot_project p on t.pid = p.pid', 'LEFT')
                ->where("t.tid='{$task_id}' and t.deleted=0")->find();

            // 发给执行人 时间点：任务启动  LGW
            $dynamic = [
                'a' => $task['assignedname'],               // 执行人
                'b' => $task['title'],                      // 任务名称
                'c' => $task['pname'],                      // 项目名称
                'email' => get_email($task['assigneduid']),
            ];
            $url = 'Task/view/id/'.$task_id;
            $cost = sendTemplate($dynamic, 'task_new',$url);
            apiRead(Api::S_SEND, Api::DXY_S, $cost);  // 发给执行人 : LGW
            // 更新进度
            updateprocess($task_id);
            upBudget($pid);//成本预算
            $array = [];
            $array['pid'] = $pid;
            $array['state'] = Project::ONGOING;
            $array['stime'] = time();
            M('Project')->save($array);
            action_log_new(array('outtype' => 'ot_project', 'outkey' => $pid, 'pid' => $pid, 'start' => '', 'comment' => ''));

            if (!empty($psid) && !empty($task_id)) {
                $Model->commit(); // 成功则提交事务
                //$this->success('添加成功！', U('index'));

                $this->redirect('Execute/task_index?pid=' . $pid);
            } else {
                $Model->rollback(); // 否则将事务回滚
                $this->error('添加失败！');
            }
        } else {
            if (empty($pid)) {
                $this->error('非法操作');
            }
            $where = "(state != -1 or state != 2) and del=0 and ( pmuid=" . UID . " or uid=" . UID . ") ";
            $project = M('project')->alias('p')->field('p.name,p.state,p.pid,d1.d_key as sname,p.uid,p.pmuid')
                ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')->where(array('p.pid' => $pid))->find();
            if (empty($project)) {
                $this->error('没有权限或该项目不能新建任务！');
            }
            //项目
            $project1 = M('Project')->field('pid,name')->where($where)->order('addtime desc')->select();
            $this->assign('project', $project1);
            //执行人
            $pm = M('Member')->field('uid,nickname')->select();
            $this->assign('pm', $pm);
            //审核人
            $sales = M('Member')->field('uid,nickname')->select();
            $this->assign('sales', $sales);
            //项目组
            $group = M('Group')->field('groupid,name')->order('sort_order asc')->select();
            $this->assign('group', $group);
            //优先级
            $levels = M('dictionary')->where("d_code = 'level'")->field(true)->select(array('order' => 'd_order asc'));
            $this->assign('levels', $levels);
            //任务类型
            $task_type = M('dictionary')->where("d_code = 'task_type'")->field(true)->select(array('order' => 'd_order asc'));
            $this->assign('taskType', $task_type);
            $item = I('get.item');
            if ($item) {
                $w = date('Y-m-d', $item - 28800);
                $stime = strtotime($w);
                $sstime = (int)$stime + 32400;
                $etime = (int)$stime + 86399;
                $this->assign('pstime', date(('Y/m/d'), $sstime));
                $this->assign('petime', date(('Y/m/d'), $etime));
            } else {
                $time = strtotime(date('Ymd')) + 32400;
                $pstime = date('Y/m/d', $time);
                $this->assign('pstime', $pstime);
            }

            $this->assign('pid', $pid);
            $this->assign('p', $project);

            $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
            $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');

            $root_mbx = array();
            $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
            $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
            $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectView/view?id=' . $pid));
            $root_mbx[] = array('title' => '执行', 'url' => U('Execute/task_index?id=' . $pid));
            $root_mbx[] = array('title' => '任务', 'url' => U('Execute/task_index?id=' . $pid));
            $root_mbx[] = array('title' => '新建任务', 'url' => '');
            $this->assign('root_mbx', $root_mbx);

            $this->assign('from_url', $from_url);

            $this->display();

        }
    }

    /*编辑任务*/
    public function task_edit()
    {
        $this->assign('actionName', 'execute');
        $this->assign('actname', 'task_index');
        $tid = I('get.id');
        if (IS_POST) {
            $tid = I('post.id');
            $pid = $_POST['pid'];

            if (empty ($_POST ['title'])) {
                $this->error('任务标题不能为空');
            }
            $res = M('Task')->where("name = '" . $_POST['name'] . "' and tid !=" . $tid)->find();
            if ($res) {
                $this->error('任务标题已存在！');
            }
            if (empty ($_POST ['assigneduid'])) {
                $this->error('请选择执行人');
            }

            $pstime = strtotime($_POST['pstime']);
            $petime = strtotime($_POST['petime']);
            if (empty ($pstime)) {
                $this->error('计划开始时间不能为空');
            }
            if (empty ($petime)) {
                $this->error('计划结束时间不能为空');
            }
            if ($petime < $pstime) {
                $this->error('结束时间必须大于开始时间');
            }
            if (!is_numeric($_POST['days']) || $_POST['days'] < 0) {
                $this->error('周期填写有误');
            }
            if (!is_numeric($_POST['hours']) || $_POST['hours'] < 0) {
                //$this->error('工时填写有误');
            }
            //$project = M('Project')->field('pstime,petime')->where('pid = ' . $pid)->find();
            /* if ($pstime < $project['pstime']) {

                 $this->error('项目计划开始时间从' . date('Y/m/d',$project['pstime']) . '开始，' . date('Y/m/d',$pstime) . '已超出范围，请重新设置计划开始时间');
             }
             if ($petime > $project['petime']) {
                 $this->error('项目计划结束时间至' . date('Y/m/d',$project['petime']). '结束，' .date('Y/m/d',$petime) . '已超出范围，请重新设置计划结束时间');
             }*/
            $Model = M(); // 实例化一个空对象
            $Model->startTrans(); // 开启事务
            $tmp = M('Task')->where('tid=' . $tid)->find();
            $data = array(
                'title' => $_POST['title'],
                'checkuname' => get_nickname($_POST['checkuid']) ? get_nickname($_POST['checkuid']) : get_username($_POST['checkuid']),
                'checkuid' => $_POST['checkuid'],
                'level' => $_POST['level'],
                'description' => $_POST['description'],
                'lastedituid' => UID,
                'lastedituname' => get_nickname(UID) ? get_nickname(UID) : get_username(UID),
                'lastedittime' => time()

            );
            $task_id = M('Task')->where('tid=' . $tid)->save($data);
            $history = array();
            foreach ($data as $key => $vo) {
                if ($vo != $tmp [$key]) {
                    $history [] = array(
                        'field' => $key,
                        'olddata' => $tmp [$key],
                        'newdata' => $vo
                    );
                }
            }
            action_log_new(array('outtype' => 'ot_task', 'outkey' => $task_id, 'action' => 'start',
                'comment' => '', 'history' => $history));
            // 更新进度
            updateprocess($tid);
            upBudget($pid);//成本预算
            if ($task_id !== false) {
                $Model->commit(); // 成功则提交事务
                //$this->success('编辑成功！', U('index'));
                $this->redirect('Execute/task_index?pid=' . $pid);
            } else {
                $Model->rollback(); // 否则将事务回滚
                $this->error('编辑失败！');
            }

        } else {
            //任务
            $task = M('Task')->field(true)->where('tid=' . $tid . ' and deleted=0')->find();
            if (!cando1(array($task['uid']))) {
                $this->error("您没有权限操作！");
            }
            $pid = $task['pid'];
            $service = M('ProjectService')->field('psid,title')->where('pid=' . $task['pid'])->select();
            $this->assign('service', $service);
            $where = "(state != -1 or state != 2) and del=0 and ( pmuid=" . UID . " or uid=" . UID . ")";
            //项目
            $project1 = M('Project')->field('pid,name')->where($where)->order('addtime desc')->select();
            $this->assign('project', $project1);
            //执行人
            $did = M('Dept')->where('groupid=' . $task['groupid'])->getField('did');
            $dids = $this->get_son_ids($did);
            $pm = M('Member')->field('nickname,uid')->where('status=1 and dept in (' . $dids . ')')->select();
            if (empty($pm)) {
                $pm = M('Member')->field('uid,nickname')->select();
            }
            $this->assign('pm', $pm);
            $arr = array();
            foreach ($pm as $key => $vo) {
                $arr[] = $vo['nickname'];
            }
            if (!in_array($task['assignedname'], $arr)) {
                $task['canyuren'] = $task['assignedname'];
            }
            $this->assign('task', $task);

            //审核人
            $sales = M('Member')->field('uid,nickname')->select();
            $this->assign('sales', $sales);
            //项目组
            $group = M('Group')->field('groupid,name')->order('sort_order asc')->select();
            $this->assign('group', $group);
            //优先级
            $levels = M('dictionary')->where("d_code = 'level'")->field(true)->select(array('order' => 'd_order asc'));
            $this->assign('levels', $levels);
            //任务类型
            $task_type = M('dictionary')->where("d_code = 'task_type'")->field(true)->select(array('order' => 'd_order asc'));
            $this->assign('taskType', $task_type);

            $this->assign('tid', $tid);
            $this->assign('pid', $pid);

            $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
            $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');
            $project = M('project')->alias('p')->field('p.name,p.state,p.pid,d1.d_key as sname,p.uid,p.pmuid')
                ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')->where(array('p.pid' => $pid))->find();
            $this->assign('p', $project);
            $root_mbx = array();
            $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
            $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
            $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectView/view?id=' . $pid));
            $root_mbx[] = array('title' => '执行', 'url' => U('Execute/task_index?id=' . $pid));
            $root_mbx[] = array('title' => '编辑任务', 'url' => '');
            $this->assign('root_mbx', $root_mbx);

            $this->assign('from_url', $from_url);

            $this->display();

        }
    }

    public function task_gantt()
    {
        $id = I("get.pid");
        if (empty($id)) {
            $this->error('项目不存在！');
        }

        $project = $this->db
            ->field('p.*,o.code oname,o.chance,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d3.name dname,m.nickname mname')
            ->alias('p')
            ->join('ot_offer o on p.oid = o.oid', 'LEFT')
            ->join('ot_dept d3 on p.orgid = d3.did', 'LEFT')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
            ->join('ot_customer c on p.cid = c.cid', 'LEFT')
            ->join('ot_member m on p.sale = m.uid', 'LEFT')
            ->where('p.pid=' . $id)
            ->find();
        $this->assign('pid', $id);
        $this->assign('p', $project);

        $map = [];
        $map['ps.pid'] = $id;
        //$map['ps.state'] = ProjectService::STARTED;
        $project_item = M("ProjectService")->alias('ps')
            ->field(array('ps.mid', 'ps.pcid', 'ps.sid', 'ps.prepsid', 'pc.name as p_name'))
            ->join("ot_project_config pc on ps.pcid = pc.pid")
            ->group('ps.pcid')
            ->where($map)
            ->select();

        $m_item = M("ProjectService")->alias('ps')
            ->field(array('ps.mid', 'ps.pcid', 'ps.sid', 'ps.psid', 'ps.prepsid', 'm.name as m_name'))
            ->join("ot_module m on ps.mid = m.mid")
            ->group('ps.mid')
            ->where($map)
            ->select();
        $s_item = M("ProjectService")->alias('ps')
            ->field(array('ps.mid', 'ps.pcid', 'ps.psid', 'ps.prepsid', 'ps.sid', 'ps.assignedname', 'ps.pstime', 'ps.petime', 'ps.days', 'ps.progress', 's.name as s_name'))
            ->join("ot_service s on ps.sid = s.sid")
            ->where($map)
            ->select();

        $data = array();
        $color_temp = array('836fff');
        $color_data = array();
        $new_pk = 0;
        foreach ($project_item as $key => $val) {
            $p = array();
            $pk = $key + 1;
            $p['id'] = $id;
            $p['pCid'] = $val['pcid'];
            $p['pID'] = $pk;
            $p['pName'] = $val['p_name'];
            $p['pStart'] = '';
            $p['pEnd'] = '';
            $p['pColor'] = "ffc125";
            $p['pLink'] = '';
            $p['pMile'] = 0;
            $p['pRes'] = '';
            $p['pComp'] = 0;
            $p['pParent'] = 0;
            $p['pOpen'] = 1;
//	 		$p['pDepend'] =;
            $data[$pk] = $p;
            foreach ($m_item as $ke => $va) {
                $m = array();
                $mk = $ke + 1;
                if ($va['pcid'] == $val['pcid']) {
                    if (!isset($color_data[$va['groupid']])) {
                        $color = $color_temp[array_rand($color_temp, 1)];
                        if (!in_array($color, $color_data)) {
                            $color_data[$va['groupid']] = $color;
                        }
                    } else {
                        $color = $color_data[$va['groupid']];
                    }
                    $m['id'] = $id;
                    $m['pMid'] = $va['mid'];
                    $m['pID'] = $pk . $mk;
                    $m['pName'] = $va['m_name'];
                    $m['pStart'] = '';
                    $m['pEnd'] = '';
                    $m['pColor'] = "7ccd7c";
                    $m['pLink'] = '';
                    $m['pMile'] = 0;
                    $m['pRes'] = '';
                    $m['pComp'] = 0;
                    $m['pParent'] = $pk;
                    $m['pOpen'] = 1;
                    $data[$pk . $mk] = $m;
                    foreach ($s_item as $k => $v) {
                        $s = array();
                        $sk = $k + 1;
                        if ($va['mid'] == $v['mid']) {

                            $s['pID'] = $pk . $mk . $sk;

                            $temp_array[$v['psid']] = $s['pID'];
                            $s['pName'] = $v['s_name'];
                            if($v['pstime']){
	                            $s['pStart'] = date('Y-m-d', $v['pstime']);
                            }else{
	                            $s['pStart'] = '';
                            }
                            if($v['petime']){
	                            $s['pEnd'] = date('Y-m-d', $v['petime']);
                            }else{
	                            $s['pEnd'] = '';
                            }
                           
                            
                            $today = strtotime(date('Y-m-d', time()));
                            $pe = strtotime(date('Y-m-d', $v['petime']));
                            if ($v['petime'] < time() && $pe != $today && $v['progress'] != 100) {
                                $s['pColor'] = 'ff0000';
                            } else {
                                $s['pColor'] = $color;
                            }
                            $s['pLink'] = '';
                            $s['pMile'] = 0;
                            $s['pRes'] = $v['assignedname'];
                            $s['pComp'] = intval($v['progress']);
                            $s['pParent'] = $pk . $mk;
                            $s['pGroup'] = 0;
                            $s['pOpen'] = 0;
                            $s['pDepend'] = $temp_array[$v['prepsid']];
                            $data[$pk . $mk . $sk] = $s;
                        }
                    }
                    $data[$pk . $mk]['pGroup'] = 1;
                }
            }
            $data[$pk]['pGroup'] = 1;
            $new_pk = $pk;
        }
        $pro_item = M("ProjectService")->alias('ps')
            ->field(array('ps.*'))
            ->where("ps.pid='" . $id . "' and ps.pcid=0")
            ->select();
        foreach ($pro_item as $kk => $vv) {
            $color = $color_temp[array_rand($color_temp, 1)];
            if (!in_array($color, $color_data)) {
                $color_data['no_' . $kk] = $color;
            }
            $p = array();
            $ok = $new_pk + $kk + 1;
            $p['pID'] = $ok;
            $temp_array[$vv['psid']] = $p['pID'];
            $p['pName'] = $vv['title'];
            if($vv['pstime']){
				$p['pStart'] = date('Y-m-d', $vv['pstime']);
			}else{
				$p['pStart']='';
			}
			
			if($vv['petime']){
				$p['pEnd'] = date('Y-m-d', $vv['petime']);
			}else{
				$p['pEnd']='';
			}
			
            $p['pColor'] = $color;
            $p['pLink'] = '';
            $p['pMile'] = 0;
            $p['pRes'] = $vv['assignedname'];
            $p['pComp'] = intval($vv['progress']);
            $p['pParent'] = 0;
            $p['pOpen'] = 1;
            $p['pGroup'] = 0;
            $p['customize'] = 1;
            $p['pDepend'] = $temp_array[$vv['prepsid']];
            $data[$ok] = $p;

        }
        $parent_pid = array();
        foreach ($parent_array as $p => $v) {
            $parent_pid[$temp_array[$p]] = $temp_array[$v];
        }
        $data = array_values($data);
        $this->assign('data', json_encode($data));
        foreach ($data as $k => $v) {
            $days = $this->defaultDate($v['pStart']);
            $v['weekStart'] = $days['weekStart'];
            $v['weekEnd'] = $days['weekEnd'];
            $data[$k] = $v;
        }

        // 导出甘特图Excel : LGW
        if (I("get.exportexcel", "") == 1) {
            $project = $this->getProject($id);
            $this->gantExport($project, $data);
        }
        $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
        $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');

        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
        $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectView/view?id=' . $project['pid']));
        $root_mbx[] = array('title' => '甘特图', 'url' => '');
        $this->assign('root_mbx', $root_mbx);

        $this->assign('from_url', $from_url);

        $this->display();
    }

    // 获取信息
    public function getProject($pid)
    {
        $map = [];
        $map['pid'] = $pid;
        $project = M('Project')->alias('p')
            ->field('p.name,p.pm,p.stime,d1.d_key sname,d3.name dname,p.tasknum,p.ftasknum,p.pstime,p.petime,p.etime,p.uid,p.pmuid')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->join('ot_dept d3 on p.orgid = d3.did', 'LEFT')
            ->where($map)
            ->find();
        return $project;
    }

    // 导出甘特图 : LGW
    public function gantExport($project, $gant)
    {
        if (empty($gant) || !is_array($gant) || count($gant) < 1) {
            $this->error('没有可导出的数据');
        }
        $x = 7;
        $y = 6;
        // 求出顶级的时间
        foreach ($gant as $k => $v) {
            $map = [];
            if ($v['pCid']) {
                $map['pcid'] = $v['pCid'];
                $map['pid'] = $v['id'];
                $service = M('Project_service')->alias('ps')
                    ->field('max(ps.petime) as endTime,min(ps.pstime) as startTime')
                    ->where($map)
                    ->find();
                $data = M('Project_service')->alias('ps')
                    ->field('sum(progress) as progress,COUNT(*) as sum')
                    ->where($map)
                    ->find();
                $sum = $data['sum'] * 100;
                $result = $data['progress'] / $sum;
                $v['pComp'] = round($result * 100);

                $v['pStart'] = date("Y-m-d", $service['startTime']);
                $v['pEnd'] = date("Y-m-d", $service['endTime']);

                $gant[$k] = $v;
            }
            $map = [];
            if ($v['pMid']) {
                $map['ps.mid'] = $v['pMid'];
                $map['pid'] = $v['id'];
                $service = M('Project_service')->alias('ps')
                    ->field('max(ps.petime) as endTime,min(ps.pstime) as startTime')
                    ->where($map)
                    ->find();
                $data = M('Project_service')->alias('ps')
                    ->field('sum(progress) as progress,COUNT(*) as sum')
                    ->where($map)
                    ->find();
                $sum = $data['sum'] * 100;
                $result = $data['progress'] / $sum;
                $v['pComp'] = round($result * 100);

                $v['pStart'] = date("Y-m-d", $service['startTime']);
                $v['pEnd'] = date("Y-m-d", $service['endTime']);
                $gant[$k] = $v;
            }

            //  计算出1级标题
            $v['pParent'] > 0 ? $v['pGrade'] = 1 : $v['pGrade'] = 0;
            $gant[$k] = $v;
            //  计算出2级标题
            ($v['pParent'] > 10 && $v['pGrade'] == 1) and $v['pGrade'] = 2;
            $gant[$k] = $v;
        }
        $pEndMax = 0;               // 最大结束时间
        foreach ($gant as $k1 => $v1) {
            if (strtotime($v1['pEnd']) > strtotime($pEndMax)) {
                $pEndMax = $v1['pEnd'];
            }

        }
        $pStartMin = $pEndMax;      // 最小的开始时间
        foreach ($gant as $k => $v) {
            if (strtotime($v['pStart']) > 0 && strtotime($v['pStart']) < strtotime($pStartMin)) {
                $pStartMin = $v['pStart'];
            }
        }
        $pEndMaxWeek = date('w', strtotime($pEndMax));
        $pStartMinWeek = date('w', strtotime($pStartMin));
        $endWeek = 6 - $pEndMaxWeek;
        $pEndMax = date('Y-m-d', strtotime("$pEndMax +$endWeek day"));

        $pStartMin = date('Y-m-d', strtotime("$pStartMin -$pStartMinWeek day"));


        $min = date('d', strtotime($pStartMin));
        $differDate = floor((strtotime($pEndMax) - strtotime($pStartMin)) / 86400); // 相差多少天
        $datas = [];
        foreach ($gant as $k => $v) {
            $startDays = floor((strtotime($v['pStart']) - strtotime($pStartMin)) / 86400); // 相差多少天
            $endDays = floor((strtotime($v['pEnd']) - strtotime($pStartMin)) / 86400); // 相差多少天
            $startBit = $y + $startDays; // 起始位
            $endBit = $y + $endDays;   // 结束位
            $v['startBit'] = $startBit;
            $v['endBit'] = $endBit;
            $gant[$k] = $v;
            $gantDays = floor((strtotime($v['pEnd']) - strtotime($v['pStart'])) / 86400); // 相差多少天
            $name = $v['pName'];
            $v['pGrade'] == 1 and $name = "    " . $v['pName'];
            $v['pGrade'] == 2 and $name = "        " . $v['pName'];
            $arr['0'] = $name;   //任务
            $arr['1'] = $v['pRes'];    // 指派给
            $arr['2'] = $gantDays + 1;    // 时长
            $arr['3'] = $v['pComp'] . "%";       // 进度
            $arr['4'] = $v['pStart'];  // 开始
            $arr['5'] = $v['pEnd'];    // 结束
            $datas[] = $arr;
        }

        $data = $datas;
        import("IOFactory", "../excel/toexcel/PHPExcel", ".php");
        import("Excel5", "../excel/toexcel/PHPExcel/Reader", ".php");
        import("PHPExcel", "../excel/toexcel", ".php");

        $filename = $project['name'] . '-甘特图-' . date('YmdHis');
        $filename .= ".xls";
        header("Content-type: application/vnd.ms-excel; charset=utf-8");
        header("Content-Disposition: attachment; filename=$filename.xls");

        $excel = new \PHPExcel();

        $excelAssistant = new \Vendor\ExcelAssistant;

        $letter = $excelAssistant->GetExcelTit($differDate + 10);

        //表头数组
        $tableheader = ['任务', '指派给', '时长', '进度', '开始时间', '结束时间', "$min"];

        $tableheadertop = [];   // 按照天分出日期
        // 添加的表头 : 日期
        $excel->getActiveSheet()->getStyle("$letter[6]4")->getFill()->setFillType(\PHPExcel_Style_Fill::FILL_SOLID);
        $excel->getActiveSheet()->getStyle("$letter[6]4")->getFill()->getStartColor()->setRGB("AAAAAA");
        for ($i = 0; $i <= $differDate; $i++) {
            $d = $pStartMin;
            $w = strftime("%w", strtotime("$d"));
            $tableheadertop[$w][] = $pStartMin;
            $nextDay = date('Y-m-d', strtotime("$d +1 day"));
            if ($i != $differDate) {
                $tableheader[$x] = date('d', strtotime("$nextDay"));;
                $excel->setActiveSheetIndex();
                $excel->getActiveSheet()->getDefaultColumnDimension("$letter[$x]4")->setWidth(3);
                // 把周六和周日的背景设置成灰色
                $week = date('w', strtotime($d));
                if ($week == 5 || $week == 6) {
                    $excel->getActiveSheet()->getStyle("$letter[$x]4")->getFill()->setFillType(\PHPExcel_Style_Fill::FILL_SOLID);
                    $excel->getActiveSheet()->getStyle("$letter[$x]4")->getFill()->getStartColor()->setRGB("AAAAAA");
                }
            }    // 设置周六和周日的背景色
            $pStartMin = $nextDay;
            $x++;
        }

        $excel->getActiveSheet()->getColumnDimension('A')->setAutoSize(true);
        $excel->getActiveSheet()->getColumnDimension('B')->setAutoSize(true);
        $excel->getActiveSheet()->getColumnDimension('C')->setAutoSize(true);
        $excel->getActiveSheet()->getColumnDimension('D')->setAutoSize(true);
        $excel->getActiveSheet()->getColumnDimension('E')->setAutoSize(true);
        $excel->getActiveSheet()->getColumnDimension('F')->setAutoSize(true);

        // 给Excel添加背景色
        foreach ($gant as $k => $v) {
            $k = $k + 5;
            $startBit = $v['startBit'];
            $endBit = $v['endBit'];
            $startBitNext = $startBit;
            $cells = $endBit - $startBit + 1; // 一共的格子数
            if ($v['pColor'] == 'ff0000') {
                $color = 'ff0000';
            } else {
                if ($v['customize']) {
                    $color = '836fff';

                } else {
                    if ($v['pGrade'] == 1 || $v['pGrade'] == 0) {
                        $color = '000000';
                    } else {
                        $color = '836fff';
                    }
                }
            }

            $array = array(
                'style' => \PHPExcel_Style_Border::BORDER_THICK, //设置border样式
                'color' => array('rgb' => 'ffffff'), //设置border颜色
            );
            $split = 0;
            if ($v['pComp'] == 100) {
                $color1 = 'AAAAAA';
                $borders = array(
                    'outline' => $array
                );
            } else if ($v['pComp'] > 0 && $v['pComp'] < 100) {
                $progressCell = ceil((($v['pComp'] / 100) * $cells));  // 进度要站的格子数
                $progressEnd = $startBit + $progressCell - 1;
                $startBitNext = $progressEnd + 1;
                $color2 = 'AAAAAA';
                $color1 = $color;
                $borders2 = array(
                    'top' => $array,
                    'left' => $array,
                    'bottom' => $array,
                );
                $borders = array(
                    'top' => $array,
                    'right' => $array,
                    'bottom' => $array,
                );
                $split = 1;
            } else {
                $color1 = $color;
                $borders = array(
                    'outline' => $array
                );
            }
            if ($split) {
                $p1 = "$letter[$startBit]$k";
                $p2 = "$letter[$progressEnd]$k";
                $merge = "$p1" . ':' . "$p2";
                $excel->getActiveSheet()->mergeCells($merge);      //合并

                for ($i = $startBit; $i <= $progressEnd; $i++) {
                    $pCellCoordinate = "$letter[$i]$k";
                    $excel->getActiveSheet()->getStyle($pCellCoordinate)->getFill()->setFillType(\PHPExcel_Style_Fill::FILL_SOLID);
                    $excel->getActiveSheet()->getStyle($pCellCoordinate)->getFill()->getStartColor()->setRGB($color2);
                    $styleThinBlackBorderOutline = array(
                        'borders' => $borders2);
                    $excel->getActiveSheet()->getStyle($pCellCoordinate)->applyFromArray($styleThinBlackBorderOutline);

                }
            }
            $p3 = "$letter[$startBitNext]$k";
            $p4 = "$letter[$endBit]$k";
            $merge = "$p3" . ':' . "$p4";
            $excel->getActiveSheet()->mergeCells($merge);      //合并
            for ($i = $startBitNext; $i <= $endBit; $i++) {
                $pCellCoordinate = "$letter[$i]$k";
                $excel->getActiveSheet()->getStyle($pCellCoordinate)->getFill()->setFillType(\PHPExcel_Style_Fill::FILL_SOLID);
                $excel->getActiveSheet()->getStyle($pCellCoordinate)->getFill()->getStartColor()->setRGB($color1);
                $styleThinBlackBorderOutline = array(
                    'borders' => $borders
                );
                $excel->getActiveSheet()->getStyle($pCellCoordinate)->applyFromArray($styleThinBlackBorderOutline);

            }


        }

        // 周期
        $z = 6;
        $s = $z;
        $weekStart = $tableheadertop[0];    // 从周日开始
        $saturdayEnd = $tableheadertop[6];  // 至周六结束
        foreach ($weekStart as $k => $v) {
            $note = date('m/d', strtotime("$v")) . ' - ' . $saturdayEnd[$k];
            $excel->getActiveSheet()->setCellValue("$letter[$z]3", "$note");
            $z += 7;
        }
        $peCell = "$letter[$s]3" . ':' . "$letter[$z]3";
        $excel->getActiveSheet()->getStyle("$peCell")->applyFromArray(
            array(
                'font' => array(
                    'bold' => true
                ),
                'alignment' => array(
                    'vertical' => \PHPExcel_Style_Alignment::VERTICAL_CENTER
                )
            )
        );

        for ($j = 0; $j <= $differDate / 7; $j++) {
            $x = ($j + 1) * 7 - 1;
            $y = (($j + 1) * 7 + 6) - 1;
            $start = "$letter[$x]3";
            $end = "$letter[$y]3";
            $merge = $start . ":" . $end;
            $excel->getActiveSheet()->mergeCells($merge);
            $excel->getActiveSheet()->getStyle($merge)->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $styleThinBlackBorderOutline = array(
                'borders' => array(
                    'outline' => array(
                        'style' => \PHPExcel_Style_Border::BORDER_THIN, //设置border样式
                        'color' => array('rgb' => '333333'), //设置border颜色
                    ),
                ),);
            $excel->getActiveSheet()->getStyle($merge)->applyFromArray($styleThinBlackBorderOutline);
        }

        // 添加表头前面固定的
        for ($i = 0; $i < count($tableheader); $i++) {

            $excel->getActiveSheet()->setCellValue("$letter[$i]4", "$tableheader[$i]");
        }

        // 添加任务和项目经理
        $project['stime'] ? $project['stime'] = date('Y-m-d', $project['stime']) : $project['stime'] = "";
        $project['etime'] ? $project['etime'] = '/' . date('Y-m-d', $project['etime']) : $project['etime'] = "";
        $project['pstime'] = date('Y-m-d', $project['pstime']);
        $project['petime'] = date('Y-m-d', $project['petime']);

        for ($i = 1; $i <= 2; $i++) {
            if ($i == 1) $note = $project['name'];
            if ($i == 2) {
                $note = "项目经理:" . $project['pm'] . "    所属部门:" . $project['dname'] . "    项目状态:" . $project['sname'] . "    计划开始/结束日期:" . $project['pstime'] . "/" . $project['petime'] . "      实际开始/结束时间:" . $project['stime'] . $project['etime'];

            }
            $j = 0;
            $excel->getActiveSheet()->setTitle('甘特图');
            $excel->getActiveSheet()->setCellValue("$letter[$j]$i", " " . "$note");
            $x = $i + 6;
        }


        $excel->getActiveSheet()->mergeCells("A1:IV1");
        $excel->getActiveSheet()->mergeCells("A2:IV2");
        $excel->getActiveSheet()->getRowDimension("1")->setRowHeight(30);
        $excel->getActiveSheet()->getRowDimension("2")->setRowHeight(30);
        $excel->getActiveSheet()->getStyle('A1:IV1')->getFont()->setSize(15);
        $excel->getActiveSheet()->getStyle('A2:IV2')->getFont()->setSize(10);
        $excel->getActiveSheet()->getStyle('A1:IV1')->applyFromArray(
            array(
                'font' => array(
                    'bold' => true
                ),
                'alignment' => array(
                    'vertical' => \PHPExcel_Style_Alignment::VERTICAL_CENTER
                )
            )
        );
        $excel->getActiveSheet()->getStyle('A2:AA2')->applyFromArray(
            array(
                'font' => array(
                    'bold' => true
                ),
                'alignment' => array(
                    'vertical' => \PHPExcel_Style_Alignment::VERTICAL_CENTER
                )
            )
        );

        $excel->getActiveSheet()->getStyle('A4:F4')->applyFromArray(
            array(
                'font' => array(
                    'bold' => true
                ),
                'alignment' => array(
                    'vertical' => \PHPExcel_Style_Alignment::VERTICAL_CENTER
                )
            )
        );
        //表格数组
        //填充表格信息
        for ($i = 5; $i <= count($data) + 4; $i++) {
            $j = 0;
            if ($i <= count($data) + 4) {
                foreach ($data[$i - 5] as $key => $value) {
                    $excel->getActiveSheet()->setTitle('甘特图');
                    $excel->getActiveSheet()->setCellValue("$letter[$j]$i", " " . "$value");
                    $j++;
                }
            }

        }


        //创建Excel输入对象

        $write = new \PHPExcel_Writer_Excel5($excel);
        header("Pragma: public");
        header("Expires: 0");
        header("Cache-Control:must-revalidate, post-check=0, pre-check=0");
        header("Content-Type:application/force-download");
        header("Content-Type:application/vnd.ms-execl");
        header("Content-Type:application/octet-stream");
        header("Content-Type:application/download");;
        header('Content-Disposition:attachment;filename=' . $filename . '');
        header("Content-Transfer-Encoding:binary");
        $write->save('php://output');
    }

    public function defaultDate($date)
    {
        //当前日期
        $sdefaultDate = date("Y-m-d", strtotime($date));
        //$first =1 表示每周星期一为开始日期 0表示每周日为开始日期
        $first = 1;
        //获取当前周的第几天 周日是 0 周一到周六是 1 - 6
        $w = date('w', strtotime($sdefaultDate));
        //获取本周开始日期，如果$w是0，则表示周日，减去 6 天
        $week_start = date('m/d', strtotime("$sdefaultDate -" . ($w ? $w - $first : 6) . ' days'));
        //本周结束日期
        $week_end = date('Y-m-d', strtotime("$week_start +6 days"));
        $array['weekStart'] = $week_start;
        $array['weekEnd'] = $week_end;
        return $array;
    }


    public function export($pro, $pname)
    {
        if (empty($pro) || !is_array($pro) || count($pro) < 1) {
            $pro = array();
        }
        $datas = [];
        $today = strtotime(date('Y-m-d'));
        //获取想应的数据并排序
        foreach ($pro as $key => $val) {
            $title = '';
            if ($val['tt'] == 1) {
                $petime = $val['petime'];
                $num = (int)$petime - (int)$today;
                // 延期的
                if ($num < 0) {
                    $num = abs($num);
                    $num = round($num / 86400);
                    $title = "已延期" . $num . "天";
                }
            }
            if ($val['mname']) {
                $project_name = $val['mname'] . '-' . $val['title'];
            } else {
                $project_name = $val['title'];
            }
            $val['addtime'] ? $addTime = date('m-d', $val['addtime']) : $addTime = '';
            $val['petime'] ? $peTime = date('m-d', $val['petime']) : $peTime = '';
            $val['finishtime'] ? $finishTime = date('m-d H:i', $val['finishtime']) : $finishTime = '';
            $arr['0'] = $project_name;
            $arr['1'] = $val['pname'];
            $arr['2'] = $title;
            $arr['3'] = $val['statestr'];
            $arr['4'] = $val['assignedname'];
            $arr['5'] = $addTime;
            $arr['6'] = $peTime;
            $arr['7'] = $finishTime;
            $arr['8'] = $val['level_name'];
            $arr['9'] = $val['hours'] . 'h';
            $arr['10'] = fomatprice($val['amount']);
            $datas[] = $arr;
        }
        $data = $datas;
        import("IOFactory", "../excel/toexcel/PHPExcel", ".php");
        import("Excel5", "../excel/toexcel/PHPExcel/Reader", ".php");
        import("PHPExcel", "../excel/toexcel", ".php");

        $today = strtotime(date('Y-m-d H:i:s'));   //本地时间
        $filename = $pname . '-任务清单' . date('YmdHis');
        $filename .= ".xls";
        header("Content-type: application/vnd.ms-excel; charset=utf-8");
        header("Content-Disposition: attachment; filename=$filename.xls");

        $excel = new \PHPExcel();

        //Excel表格式,这里简略写了8列
        $letter = array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L');
        //表头数组
        $tableheader = array('任务', '项目', '进程', '状态', '执行人', '创建时间', '要求时间', '完成时间', '优先级', '工时', '挣值');
        //填充表头信息
        //        $excel->getActiveSheet()->getColumnDimension('A1:L1')->setWidth('13');
        for ($i = 0; $i < count($tableheader); $i++) {
            $excel->getActiveSheet()->setCellValue("$letter[$i]1", "$tableheader[$i]");
        }
        //表格数组
        //填充表格信息
        for ($i = 2; $i <= count($data) + 1; $i++) {
            $j = 0;
            if ($i <= count($data) + 1) {
                foreach ($data[$i - 2] as $key => $value) {
                    $excel->getActiveSheet()->setTitle('任务清单');
                    $excel->getActiveSheet()->setCellValue("$letter[$j]$i", " " . "$value");
                    $j++;
                }
            }

        }
        //创建Excel输入对象
        $write = new \PHPExcel_Writer_Excel5($excel);
        header("Pragma: public");
        header("Expires: 0");
        header("Cache-Control:must-revalidate, post-check=0, pre-check=0");
        header("Content-Type:application/force-download");
        header("Content-Type:application/vnd.ms-execl");
        header("Content-Type:application/octet-stream");
        header("Content-Type:application/download");;
        header('Content-Disposition:attachment;filename=' . $filename . '');
        header("Content-Transfer-Encoding:binary");
        $write->save('php://output');

    }

    /*获取项目相关内容*/
    public function get_service()
    {
        $id = I('post.pid');
        if ($id) {
            $data = M('ProjectService')->field('psid,title,groupid')->where('pid=' . $id)->select();
            if ($data) {
                echo json_encode($data);
            }

        }
    }

    //获取执行人
    public function get_assuid()
    {
        $groupid = I('post.groupid');
        //查找部门成员
        $sales = M('Member')->field('uid,nickname')->where('status = 1')->select();

        $did = M('Dept')->where('groupid=' . $groupid)->getField('did');
        if (empty($did)) {
            echo json_encode($sales);
            die;
        }
        $dids = $this->get_son_ids($did);
        $mem = M('Member')->field('nickname,uid')->where('status=1 and dept in (' . $dids . ')')->select();
        if (empty($mem)) {
            echo json_encode($sales);
            die;
        }
        array_unique($mem);
        echo json_encode($mem);
        die;
    }

    public function get_son_ids($id)
    {
        static $ids;
        $did = M('Dept')->where('parent=' . $id)->getField('did');
        if ($did) {
            $ids .= ',' . $did;
            $this->get_son_ids($did);
        }
        return $id . $ids;
    }

    //文档
    public function doc_index()
    {
        $this->assign('actionName', 'execute');
        $this->assign('actname', 'doc_index');
        $pid = I('get.pid');
        if (empty($pid)) {
            $this->error('非法操作');
        }
        $project = M('Project')->field('name,pid,pmuid,uid')->where('pid=' . $pid . ' and del = 0')->find();
        if (empty($project)) {
            $this->error('项目不存在或已删除！');
        }
        $this->assign('p', $project);
        $this->assign('pid', $pid);
        $where['_string'] = "pid = {$pid}";
        $filter['pid'] = I('get.pid');
        $filter['dtid'] = I('get.dtid');
        $filter['sort'] = I('get.sort');
        $filter['order'] = I('get.order');
        $filter['uploade'] = I('get.uploade');
        $map['dtid'] = I('dtid');
        $uid = UID;
        $res = $this->document_model->searchPersonAttach($uid, $filter, $where, $map);

        $doctyps = $this->document_model->docTypes();
        foreach ($res[0] as &$project) {
            if ($project['shortsign']) {
                $name = $project['shortsign'] . '-' . $project['name'];
                $project['shortsign'] = $name;
            } else {
                $project['shortsign'] = $project['name'];
            }

        }
        $p = M('project')->alias('p')->field('p.name,p.state,p.pid,d1.d_key as sname,p.pmuid,p.uid')->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')->where(array('p.pid' => $filter['pid']))->find();
        if ($p) {
            $this->assign('p', $p);
        }
        $this->assign('logid', UID);
        $this->assign("fileList", $res[1]);
        $this->assign('pid', $filter['pid']);
        $this->assign('dtid', $filter['dtid']);
        $this->assign('docTypes', $doctyps);
        $this->assign('_page', $res[2]->show());
        //	    $this->assign('actname',ACTION_NAME);
        $this->assign('uploade', $filter['uploade']);

        $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
        $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');
        $project = M('Project')->field('name,pid')->where($where)->find();
        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
        $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectView/view?id=' . $pid));
        $root_mbx[] = array('title' => '执行', 'url' => U('Execute/task_index?id=' . $pid));
        $root_mbx[] = array('title' => '文档', 'url' => '');
        $this->assign('root_mbx', $root_mbx);

        $this->assign('from_url', $from_url);

        $this->display();
    }

    //文档上传
    public function doc_upload()
    {
        if (IS_POST) {
            $id = I('post.pid', 0);
            $this->project_out($id);//判断项目是否可以操作
            if (empty($id)) {
                $this->error('请选择指定的项目');
            }
            $temp = "";
//        $num = count(array_filter($_FILES['files']['tmp_name']));
            $accessories = array_filter($_FILES['files']['tmp_name']);
            if (!empty($accessories)) {
                $file_ids = $this->file_uplode();
                if (!empty($file_ids)) {
                    $sql = 'insert into ot_doc (pid,fileid,dtid,note,addtime,uid,uname,edittime,edituid,edituname) values  ';
                    foreach ($file_ids as $key => $vo) {
                        $dtid = $_POST['dtids'][$key];
                        $note = $_POST['contents'][$key];
                        $addtime = time();
                        $uid = UID;
                        $uname = get_nickname(UID) ? get_nickname(UID) : get_username(UID);
                        $sql .= "($id,$vo,$dtid,'" . $note . "',$addtime,$uid,'" . $uname . "',$addtime,$uid,'" . $uname . "'),";
                    }
                    $sql = substr($sql, 0, -1);
                    $temp = M('doc')->execute($sql);
                }
            }
            //网络资料
            $temp2 = "";
            $dtids = I('post.dtid');
            foreach ($dtids as $kk => $dt) {
                if ($_POST['url'][$kk]) {
                    //网络资料填写
                    $url = $_POST['url'][$kk];
                    $dtid = $dt;
                    $note = $_POST['content'][$kk];
                    $addtime = time();
                    $uid = UID;
                    $uname = get_nickname(UID) ? get_nickname(UID) : get_username(UID);
                    $urlname = $_POST['label'][$kk];
                    if (empty($urlname)) {
                        $this->error('网络资料标题名称不可为空');
                    }
                    $sql = 'insert into ot_doc (pid,fileid,dtid,note,addtime,uid,uname,edittime,edituid,edituname,url,urlname) values ';
                    $sql .= "($id,0,$dtid,'" . $note . "',$addtime,$uid,'" . $uname . "',$addtime,$uid,'" . $uname . "','" . $url . "','" . $urlname . "'),";
                    $sql = substr($sql, 0, -1);
                    $temp2 = M('doc')->execute($sql);
                }
            }
            if ($temp || $temp2) {
                echo "<script>window.parent.renovate();</script>";
            } else {
                $this->error('请添加上传文档或网络资料');
            }
        } else {
            $pid = I('get.pid', 0);
            $project = M('Project')->field('name,pid,pmuid,uid')->where('pid=' . $pid)->find();
            $doc_type = M('DocType')->field('dtid,name')->order('sort_order asc')->select();
            $this->assign('doc_type', $doc_type);

            $this->assign('p', $project);
            $this->assign('pid', $pid);
            $this->display();
        }
    }

    public function file_uplode($files = '')
    {
        $upload = new \Think\Upload(C('DOWNLOAD_UPLOAD'));// 实例化上传类
        // 上传文件
        $info = $upload->upload($files);
        if (!$info) {// 上传错误提示错误信息
            $this->error($upload->getError());
        } else {// 上传成功 获取上传文件信息
            $filelids = array();
            foreach ($info as $key => $value) {
                $a = explode('.', $value['name']);
                $name = $a[0];
                $file['name'] = $_POST['labels'][$key] ? $_POST['labels'][$key] : $name;
                $c = C('DOWNLOAD_UPLOAD');
                $file['savepath'] = $c['rootPath'] . $value['savepath'] . $value['savename'];
                $file['ext'] = $value['ext'];
                $file['size'] = $value['size'];
                $file['addtime'] = time();
                $file['uid'] = UID;
                $file['uname'] = get_nickname(is_login()) ? get_nickname(is_login()) : get_username(is_login());
                $filelid = M('File')->add($file);
                $filelids[$key] = $filelid;
            }
            return $filelids;
        }
    }

    //报销
    public function expense_index()
    {
        $this->assign('actionName', 'execute');
        $this->assign('actname', 'expense_index');
        $pid = I('get.pid');
        if (empty($pid)) {
            $this->error('非法操作');
        }
        $project = M('project')->alias('p')->field('p.name,p.state,p.pid,d1.d_key as sname,p.pmuid,p.uid')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')->where(array('p.pid' => $pid))->find();
        $this->assign('p', $project);
        if (I('get.sort', '') && I('get.order', '')) {
            $order = I("sort") . " " . I("order");
        } else {
            $order = "e.addtime  desc";
        }
        $type = array();
        $types = M('dictionary')->field('d_key,d_value')->where("d_code='expense_type'")->select();
        foreach ($types as $value) {
            $type[$value['d_value']] = $value['d_key'];
        }
        $where['_string'] = 'p.pid = ' . $pid;
        $expense = $this->exp_model->expense_list($where, $order);
        foreach ($expense as &$vo) {
            $vo['addtime'] = date('y/m/d H:i', $vo['addtime']);
            if ($vo['checkedtime']) {
                $vo['checkedtime'] = date("y/m/d H:i", $vo['checkedtime']);
            }
            $vo['type'] = $type[$vo['type']];
        }
        $this->assign('expenses', $expense);

        $this->assign('pid', $pid);


        $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
        $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');

        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
        $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectView/view?id=' . $pid));
        $root_mbx[] = array('title' => '执行', 'url' => U('Execute/task_index?id=' . $pid));
        $root_mbx[] = array('title' => '报销', 'url' => '');
        $this->assign('root_mbx', $root_mbx);

        $this->assign('from_url', $from_url);

        $this->display();
    }

    /*报销单添加*/
    public function expense_add()
    {
        if (IS_POST) {
            $pid = I('post.pid');
            $this->project_out($pid);//判断项目是否可以操作
            $data['addtime'] = time();
            $data['uid'] = UID;
            $data['uname'] = get_nickname(UID);
            $data['pid'] = $pid;
            $data['state'] = 1;
            $data['type'] = I('post.type');
            $data['innum'] = I('post.innum');
            $unit_id = I('post.unit_id');
            $bank = I('post.bank', '');
            $data['bank'] = $bank;
            $account = I('post.account', '');;
            $data['account'] = $account;
            $data['unit_id'] = $unit_id;
            if (I('post.unit_id') == 1) {
                if (empty($bank)) {
                    $this->errot('开户银行不能为空');
                }
                if (empty($account)) {
                    $this->errot('收款账号不能为空');
                }
            }
            $data['unit'] = I('post.unit');
            $data['amount'] = I('post.amount');
            $data['description'] = I('post.description');
            $data['code'] = get_rand_number('E', D('expense'));

            //将附件存入数据库
            if (!empty($_FILES['f']['tmp_name'])) {
                $c = C('DOWNLOAD_UPLOAD');
                $upload = new \Think\Upload($c);
                $info = $upload->upload();
                if (!$info) {// 上传错误提示错误信息
                    $this->error($upload->getError());
                } else {// 上传成功 获取上传文件信息
                    $file_ids = array();
                    foreach ($info as $file) {
                        $file_arr = explode('.', $file['name']);
                        $fileList['name'] = $file_arr[0];
                        $fileList['savepath'] = $c['rootPath'] . $file['savepath'] . $file['savename'];
                        $fileList['ext'] = $file['ext'];
                        $fileList['size'] = $file['size'];
                        $fileList['uid'] = UID;
                        $fileList['uname'] = get_nickname(UID) ? get_nickname(UID) : get_username(UID);
                        $fileList['addtime'] = time();
                        $fileId = $this->exp_model->file_insert($fileList);
                        array_push($file_ids, $fileId);
                    }
                }
            }
            if ($fileId) {
                $data['fileid'] = $fileId;
            }
            $res = $this->exp_model->expense_insert($data);
            //明细添加
            $expend_data = array('feetype' => I('post.feetype'), 'feecode' => I('post.feecode'),
                'catecode' => I('post.feecate'), 'feecate' => I('post.catetype'), 'money' => I('post.money'),
                'invoicenum' => I('post.invoicenum'), 'note' => I('post.note'));
            $type = array();
            $types = M('dictionary')->field('d_key,d_value')->where("d_code='cost_type'")->order('d_order asc')->select();
            foreach ($types as $value) {
                $type[$value['d_value']] = $value['d_key'];
            }
            $newdata = array();
            foreach ($expend_data as $key => $value) {
                foreach ($value as $k => $v) {
                    $newdata[$k][$key] = $v;
                }
            }

            foreach ($newdata as $k => $va) {
                if (!empty($va['money'])) {
                    $va['eid'] = $res;
                    M('expense_sub')->add($va);
                }

            }

            //更新总金额
            $this->exp_model->expense_update($res);
            if ($res) {
                action_log_new(array('outtype' => 'ot_expense', 'outkey' => $res, 'pid' => $data['pid'], 'action' => 'create', 'comment' => ''));
//                $this->redirect('Execute/expense_index', array('pid' => $data['pid']));
                $this->redirect('Execute/expense_view', array('pid' => $data['pid'], 'eid' => $res));
            } else {
                $this->error('操作失败');
            }
        } else {
            $this->assign('actionName', 'execute');
            $this->assign('actname', 'expense_index');
            $pid = I('get.pid');
            if (empty($pid)) {
                $this->error('非法操作');
            }
            $project = M('project')->alias('p')->field('p.name,p.state,p.pid,d1.d_key as sname,p.pmuid,p.uid')
                ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')->where(array('p.pid' => $pid))->find();
            $this->assign('p', $project);
            //报销人
            $units = M('Member')->field('uid,nickname')->where('status = 1')->select();
            $this->assign('units', $units);
            $this->assign('nickname', get_nickname(UID));
            //参与的项目
            $project1 = $this->exp_model->projectList();
            $type = array();
            $types = M('dictionary')->field('d_key,d_value')->where("d_code='expense_type'")->select();
            foreach ($types as $value) {
                $type[$value['d_value']] = $value['d_key'];
            }
            $costType = array();
            $costTypes = apiRead(Api::COST_TYPES, Api::DXY_OA);  // 费用类型信息 : LGW
            foreach ($costTypes['data'] as $value) {
                $costType[$value['id']] = $value['type'];
            }
            $this->assign('costType', $costType);

            $this->assign('project', $project1);
            $this->assign('type', $type);

            $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
            $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');

            $root_mbx = array();
            $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
            $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
            $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectView/view?id=' . $pid));
            $root_mbx[] = array('title' => '执行', 'url' => U('Execute/task_index?id=' . $pid));
            $root_mbx[] = array('title' => '报销', 'url' => U('Execute/expense_index?pid=' . $pid));
            $root_mbx[] = array('title' => '新增报销单', 'url' => '');
            $this->assign('root_mbx', $root_mbx);

            $this->assign('from_url', $from_url);
            $this->assign('pid', $pid);

            $this->display();
        }
    }

    //报销单编辑
    public function expense_edit()
    {
        $this->assign('actionName', 'execute');
        $this->assign('actname', 'expense_index');
        if (IS_POST) {
            $data = I('post.');
            $pid = I('post.pid');
            $this->project_out($pid);//判断项目是否可以操作
            $unit_id = I('post.unit_id');
            $bank = I('post.bank', '');
            $data['bank'] = $bank;
            $account = I('post.account', '');
            if ($unit_id == 1) {
                if (empty($bank)) {
                    $this->errot('开户银行不能为空');
                }
                if (empty($account)) {
                    $this->errot('收款账号不能为空');
                }
            }
            if (!empty($_FILES['f']['tmp_name'])) {
                $file_ids = array();
                $c = C('DOWNLOAD_UPLOAD');
                $upload = new \Think\Upload($c);
                $info = $upload->upload();
                foreach ($info as $file) {
                    $file_arr = explode('.', $file['name']);
                    $fileList['name'] = $file_arr[0];
                    $fileList['savepath'] = $c['rootPath'] . $file['savepath'] . $file['savename'];
                    $fileList['ext'] = $file['ext'];
                    $fileList['size'] = $file['size'];
                    $fileList['uid'] = UID;
                    $fileList['uname'] = get_nickname(UID) ? get_nickname(UID) : get_username(UID);
                    $fileList['addtime'] = time();
                    $fileId = $this->exp_model->file_insert($fileList);
                    array_push($file_ids, $fileId);
                }
                foreach ($file_ids as $file_id) {
                    $data['fileid'] = $file_id;
                    $result = $this->exp_model->expenseUpdate($data);
                }

            }
            $data_origin = M('expense')->where(['eid' => $data['eid']])->find();
            $res = $this->exp_model->expenseUpdate($data);
            $data_new = array(
                'pid' => I('post.pid'),
                'eid' => I('post.eid'),
                'unit' => I('post.unit'),
                'type' => I('post.type'),
                'account' => I('post.account'),
                'bank' => I('post.bank'),
                'description' => I('post.description')
            );
            $history = array();
            foreach ($data_new as $k => $vo) {
                if ($vo != $data_origin[$k]) {
                    $history[] = array(
                        'field' => $k,
                        'olddata' => $data_origin[$k],
                        'newdata' => $vo
                    );
                }
            }

            //更新费用明细
            $eid = I('post.eid');
            $expend_data = array('feetype' => I('post.feetype'), 'feecode' => I('post.feecode'),
                'catecode' => I('post.feecate'), 'feecate' => I('post.catetype'),
                'money' => I('post.money')
            , 'invoicenum' => I('post.invoicenum')
            , 'note' => I('post.note')
            , 'esid' => I('post.esid')
            );

            $type = array();
            $types = M('dictionary')->field('d_key,d_value')->where("d_code='cost_type'")->select();
            foreach ($types as $value) {
                $type[$value['d_value']] = $value['d_key'];
            }
            $newdata = array();
            foreach ($expend_data as $key => $value) {
                foreach ($value as $k => $v) {
                    $newdata[$k][$key] = $v;
                }
            }
            $editdata = array();
            $adddata = array();
            foreach ($newdata as $key => $value) {
                if (empty($value['esid'])) {
                    if (!empty($value['feecode'])) {
                        $adddata[] = $value;
                    }
                } else {
                    $editdata[] = $value;
                }
            }
            $history = array();
            if (is_array($editdata)) {
                foreach ($editdata as $key => $vo) {
                    $data_origin = M('expense_sub')->where(['esid' => $vo['esid']])->find();
                    foreach ($vo as $k => $v) {
                        if ($v != $data_origin[$k]) {
                            $history[] = array(
                                'field' => $k,
                                'olddata' => $data_origin[$k],
                                'newdata' => $v
                            );
                            action_log_new(array('history' => $history, 'outtype' => 'ot_expense', 'outkey' => $eid, 'action' => "infoedit", 'comment' => ''));
                        }
                    }
                    $vo['eid'] = $eid;

                    M('expense_sub')->save($vo);
                }
            }
            if (is_array($adddata)) {
                foreach ($adddata as $key => $vo) {

                    $vo['eid'] = $eid;
                    M('expense_sub')->add($vo);
                    action_log_new(array('outtype' => 'ot_expense', 'outkey' => $eid, 'action' => 'infocreate', 'comment' => ''));
                }
                //更新总金额
                $this->exp_model->expense_update($eid);
            }
            if ($res) {

                action_log_new(array('history' => $history, 'outtype' => 'ot_expense', 'pid' => $data['pid'], 'outkey' => $data['eid'], 'action' => "edit", 'comment' => ''));
//                $this->redirect('Execute/expense_index', array('pid' => I('post.pid')));
                $this->redirect('Execute/expense_view', array('pid' => I('post.pid'), 'eid' => $eid));
            } else {
                $this->redirect('Execute/expense_index', array('pid' => I('post.pid')));
            }
        } else {
            $eid = I('get.eid');
            if (!$eid) {
                $this->error('请选择要操作的数据');
            }
            $pid = I('get.pid');
            $res = $this->exp_model->getExpenseInfo($eid);
            if (!cando1(array($res['uid']))) {
                $this->error("您没有权限！");
            }
            $project = $this->exp_model->projectList();
            $type = array();
            $types = M('dictionary')->field('d_key,d_value')->where("d_code='expense_type'")->select();
            foreach ($types as $value) {
                $type[$value['d_value']] = $value['d_key'];
            }
            $costType = array();
            $costTypes = apiRead(Api::COST_TYPES, Api::DXY_OA);  // 费用类型信息 : LGW
            foreach ($costTypes['data'] as $value) {
                $costType[$value['id']] = $value['type'];
            }
            $this->assign('costType', $costType);
            $result = $this->exp_model->getExpenseSub($eid);
            $cateType = [];
            foreach ($result as $key => $val) {
                $cost['typeid'] = $val['feecode'];
                $costSub = apiRead(Api::COST_SUB, Api::DXY_OA, $cost);

                $data = [];
                if ($costSub['success']) {
                    $data = $costSub['data'];
                    foreach ($data as $k => $v) {
                        $cateType[$v['id']] = $v['subtype'];
                    }
                }

            }
            foreach ($type as $k => $vo) {
                if ($result['type'] == $k) {
                    $result['type'] = $vo;
                }
            }
            foreach ($result as &$each) {
                $each['note'] = strip_tags($each['note']);
            }
            //报销人
            $units = M('Member')->field('uid,nickname')->where('status = 1')->select();
            $this->assign('units', $units);
            $this->assign('details', $result);
            $this->assign('project', $project);
            $this->assign('type', $type);
            $this->assign('costType', $costType);
            $this->assign('cateType', $cateType);
            $this->assign('expense', $res);
            $this->assign('pid', $pid);
            $this->assign('eid', $eid);
            $project = M('project')->alias('p')->field('p.name,p.state,p.pid,d1.d_key as sname,p.pmuid,p.uid')
                ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')->where(array('p.pid' => $pid))->find();
            $this->assign('p', $project);


            $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
            $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');

            $root_mbx = array();
            $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
            $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
            $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectView/view?id=' . $pid));
            $root_mbx[] = array('title' => '执行', 'url' => U('Execute/task_index?id=' . $pid));
            $root_mbx[] = array('title' => '报销', 'url' => U('Execute/expense_index?pid=' . $pid));
            $root_mbx[] = array('title' => '编辑报销单', 'url' => '');
            $this->assign('root_mbx', $root_mbx);

            $this->assign('from_url', $from_url);

            $this->display();
        }

    }

    /*报销单详请*/
    public function expense_view()
    {
        $this->assign('actionName', 'execute');
        $this->assign('actname', 'expense_index');
        $eid = I('get.eid');
        $pid = I('get.pid');
        $type = array();
        $types = M('dictionary')->field('d_key,d_value')->where("d_code='expense_type'")->select();
        foreach ($types as $value) {
            $type[$value['d_value']] = $value['d_key'];
        }

        $result = $this->exp_model->getExpenseSub($eid);

        $res = $this->exp_model->projectExpense($eid);
        if ($res['addtime']) {
            $res['addtime'] = date('Y-m-d H:i:s', $res['addtime']);
        }
        if ($res['checkedtime']) {
            $res['checkedtime'] = date('Y-m-d H:i:s', $res['checkedtime']);
        }
        $logs = M("Log")->where(array("outtype" => "ot_expense", "outkey" => $eid))->order("addtime asc")->select();
        if ($logs) {
            foreach ($logs as $k => $v) {
                $hs = M("History")->where("logid='{$v['logid']}'")->select();
                if ($hs) {
                    foreach ($hs as $kk => $vv) {
                        $hs[$kk]['fname'] = tf_name("ot_expense", $vv['field']);
                        switch ($vv['field']) {
                            case "state":
                                $mod = M("Dictionary");
                                $orow = $mod->field("d_key")->where("d_code='Reimbursement_static' and d_value='{$vv['olddata']}'")->find();
                                if ($orow) {
                                    $hs[$kk]['olddata'] = $orow["d_key"];
                                }
                                $nrow = $mod->field("d_key")->where("d_code='Reimbursement_static' and d_value='{$vv['newdata']}'")->find();
                                if ($orow) {
                                    $hs[$kk]['newdata'] = $nrow["d_key"];
                                }
                                break;
                        }
                    }
                    $logs[$k]['hs'] = $hs;
                }
            }
        }
        $this->assign('logs', $logs);
        //审核信息
        $exprocess = M("exprocess")->where("exid='" . $eid . "' and type ='报销单审核'")->order("`order` asc")->select();
        $this->assign('exprocess', $exprocess);
        $this->assign('projectExpense', $res);
        $this->assign('expenlist', $result);

        $project = M('project')->alias('p')->field('p.name,p.state,p.pid,d1.d_key as sname,p.pmuid,p.uid')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')->where(array('p.pid' => $pid))->find();
        $this->assign('p', $project);
        $this->assign('pid', $pid);


        $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
        $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');

        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
        $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectView/view?id=' . $pid));
        $root_mbx[] = array('title' => '执行', 'url' => U('Execute/task_index?id=' . $pid));
        $root_mbx[] = array('title' => '报销单详情', 'url' => '');
        $this->assign('root_mbx', $root_mbx);

        $this->assign('from_url', $from_url);

        $this->display();
    }

    //变更列表
    public function alter_index()
    {
        $this->assign('actionName', 'execute');
        $this->assign('actname', 'alter_index');
        $pid = I('get.pid');
        if (empty($pid)) {
            $this->error('非法操作');
        }
        $project = M('project')->alias('p')->field('p.name,p.state,p.pid,d1.d_key as sname,p.pmuid,p.uid')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')->where(array('p.pid' => $pid))->find();
        if (empty($project)) {
            $this->error('项目不存在或已删除！');
        }
        $this->assign('p', $project);
        $this->assign('pid', $pid);
        $alter = M('ProjectAlter')->where('pid=' . $pid)->select();
        $this->assign('alters', $alter);


        $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
        $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');

        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
        $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectView/view?id=' . $pid));
        $root_mbx[] = array('title' => '执行', 'url' => U('Execute/task_index?id=' . $pid));
        $root_mbx[] = array('title' => '变更', 'url' => '');
        $this->assign('root_mbx', $root_mbx);

        $this->assign('from_url', $from_url);
        $this->display();
    }

    //新变更单申请
    public function alter_add()
    {
        $this->assign('actionName', 'execute');
        $this->assign('actname', 'alter_index');
        $pid = I('get.pid');
        if (empty($pid)) {
            $this->error('非法操作');
        }
        $this->project_out($pid);//判断项目是否可以操作
        $project = M('project')->alias('p')->field('p.name,p.state,p.pid,d1.d_key as sname,p.pmuid,p.uid')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')->where(array('p.pid' => $pid))->find();
        if (empty($project)) {
            $this->error('项目不存在或已删除！');
        }
        $this->assign('p', $project);
        $this->assign('pid', $pid);
        if (IS_POST) {
            $title = I('post.title', '');
            $reason = I('post.reason', '');
            $fqf = I('post.fqf', '');
            $fqr = I('post.fqr', '');
            $kcost = I('post.kcost', 0);
            $note = I('post.note', '');
            $state = I('post.state', '');
            $saddTime = 0;
            if (empty($title)) {
                $this->error("请填写变更描述");
            }
            if (empty($reason)) {
                $this->error("请填写变更原因");
            }
            if (empty($fqf)) {
                $this->error("请选择发起方");
            }
            if (empty($fqr)) {
                $this->error("请填写发起人");
            }
            $state and $saddTime = time();
            $data = array(
                'title' => $title,
                'reason' => $reason,
                'fqf' => $fqf,
                'fqr' => $fqr,
                'kcost' => $kcost,
                'note' => $note,
                'uid' => UID,
                'state' => $state,
                'sadd_time' => $saddTime,
                'uname' => get_nickname(UID),
                'add_time' => time(),
                'pid' => $pid,
            );
            $paid = M('ProjectAlter')->add($data);
            if ($paid) {
                $this->redirect('Execute/alter_view?pid=' . $pid . '&paid=' . $paid);
            } else {
                $this->error("添加失败");
            }

        } else {
            //发起方
            $alter_fqf = M('dictionary')->where("d_code = 'alter_fqf'")->field(true)->select(array('order' => 'd_order asc'));
            $this->assign('alter_fqf', $alter_fqf);
            // 状态
            $states = M('dictionary')->field('d_key,d_value')->where("d_code = 'executes_type'")->select(array('order' => 'd_order asc'));
            $this->assign('states', $states);
            $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
            $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');

            $root_mbx = array();
            $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
            $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
            $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectView/view?id=' . $pid));
            $root_mbx[] = array('title' => '执行', 'url' => U('Execute/task_index?id=' . $pid));
            $root_mbx[] = array('title' => '变更', 'url' => U('Execute/alter_index?pid=' . $pid));
            $root_mbx[] = array('title' => '新增变更单', 'url' => '');
            $this->assign('root_mbx', $root_mbx);

            $this->assign('from_url', $from_url);
            $this->display();
        }

    }

    //变更单编辑
    public function alter_edit()
    {
        $this->assign('actionName', 'execute');
        $this->assign('actname', 'alter_index');
        $pid = I('get.pid');
        $paid = I('get.paid');
        if (empty($pid)) {
            $this->error('非法操作');
        }
        $this->project_out($pid);//判断项目是否可以操作
        $project = M('project')->alias('p')->field('p.name,p.state,p.pid,d1.d_key as sname,p.pmuid,p.uid')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')->where(array('p.pid' => $pid))->find();
        if (empty($project)) {
            $this->error('项目不存在或已删除！');
        }
        $this->assign('p', $project);
        $this->assign('pid', $pid);
        if (IS_POST) {
            $title = I('post.title', '');
            $reason = I('post.reason', '');
            $fqf = I('post.fqf', '');
            $fqr = I('post.fqr', '');
            $kcost = I('post.kcost', 0);
            $note = I('post.note', '');
            $state = I('post.state', '');
            $alter = M('ProjectAlter')->where("paid=" . $paid)->find();
            if (!$alter['sadd_time']) {
                $saddTime = time();
            }

            if (empty($title)) {
                $this->error("请填写变更描述");
            }
            if (empty($reason)) {
                $this->error("请填写变更原因");
            }
            if (empty($fqf)) {
                $this->error("请选择发起方");
            }
            if (empty($fqr)) {
                $this->error("请填写发起人");
            }
            $data = array(
                'title' => $title,
                'reason' => $reason,
                'fqf' => $fqf,
                'fqr' => $fqr,
                'kcost' => $kcost,
                'note' => $note,
                'state' => $state
            );
            $saddTime and $data['sadd_time'] = $saddTime;
            $time and $data['sadd_time'] = $saddTime;
            if (M('ProjectAlter')->where("paid=" . $paid)->save($data) !== false) {
                $this->redirect('Execute/alter_view?pid=' . $pid . '&paid=' . $paid);
            } else {
                $this->error("编辑失败");
            }

        } else {
            //发起方
            $alter_fqf = M('dictionary')->where("d_code = 'alter_fqf'")->field(true)->select(array('order' => 'd_order asc'));
            $this->assign('alter_fqf', $alter_fqf);

            $alter = M('ProjectAlter')->where('paid=' . $paid)->find();
            $this->assign('alter', $alter);
            // 状态
            $states = M('dictionary')->field('d_key,d_value')->where("d_code = 'executes_type'")->select(array('order' => 'd_order asc'));
            $this->assign('states', $states);
            $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
            $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');

            $root_mbx = array();
            $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
            $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
            $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectView/view?id=' . $pid));
            $root_mbx[] = array('title' => '执行', 'url' => U('Execute/task_index?id=' . $pid));
            $root_mbx[] = array('title' => '变更', 'url' => U('Execute/alter_index?pid=' . $pid));
            $root_mbx[] = array('title' => '编辑变更单', 'url' => '');
            $this->assign('root_mbx', $root_mbx);

            $this->assign('from_url', $from_url);
            $this->display();
        }

    }

    /*删除变更单*/
    public function alter_deletedata()
    {
        $ids = ( array )I('paid');
        if (empty($ids[0])) {
            return $this->ajaxReturn(array('done' => '0', 'msg' => "请选择要操作的数据"));
        }
        $msg = '';
        $module = M('ProjectAlter');
        foreach ($ids as $vo) {
            $res = $module->where('paid=' . $vo)->find();
            if ($res) {
                $sercount = M('ProjectService')->where(array('paid' => $vo, 'state' => ProjectService::STARTED))->count();
                if ($sercount) {
                    $msg .= "『{$res['title']}』删除失败,变更范围内有任务已启动不可删除。\n";
                    continue;
                }
                $this->project_out($res['pid'], 1);//判断项目是否可以操作
                if (!$module->where("paid = {$vo}")->delete()) {
                    $msg .= "『{$res['title']}』删除失败。\n";
                } else {
                    M('ProjectService')->where("paid = {$vo}")->delete();
                    $msg .= "『{$res['title']}』删除成功。\n";
                }
            } else {
                $msg .= "删除失败，任务变更单不存在。\n";
            }

        }
        return $this->ajaxReturn(array('done' => true, 'msg' => "{$msg}"));
    }

    //变更单查看
    public function alter_view()
    {
        $config = array(
            "actionURL" => "/Admin/Execute/alter_view",
            "operators" => array("=" => "=", "!=" => "!=", ">" => ">", ">=" => ">=", "<" => "<", "<=" => "<=", "include" => "包含"),
            "params" => array(
                0 => array('str' => '标准服务', 'fieldname' => 'g.name', 'operator' => 'include', 'control' => 'input', 'values' => ""))
        );
        $this->setSearchConfig($config);
        $this->assign('actionName', 'execute');
        $this->assign('actname', 'alter_index');
        $pid = I('get.pid');
        $paid = I('get.paid');
        if (empty($pid)) {
            $this->error('非法操作');
        }
        $project = M('project')->alias('p')->field('p.name,p.state,p.pid,d1.d_key as sname,p.pmuid,p.uid')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')->where(array('p.pid' => $pid))->find();
        if (empty($project)) {
            $this->error('项目不存在或已删除！');
        }
        $this->assign('p', $project);
        $this->assign('pid', $pid);
        $this->assign('paid', $paid);

        //变更基本信息
        $alter = M('ProjectAlter')->where('paid=' . $paid)->find();
        $this->assign('alter', $alter);
        //变更范围
        if (I('sort', '') && I('order', '')) {
            $order = I("sort") . " " . I("order");
        } else {
            $order = 's.sort_order asc';
            $this->assign('orderBy', $order);
        }
        if (I('get.exportexcel') == 1) {
            $list = M('ProjectService')->alias('s')->field(array(
                's.*', 'm.name as o_name', 'g.name as gname', 's1.name as sname', 's1.description as s_description',
                '(select count(1) from ot_service_doc sd where sd.sid = s.sid) as sdc'
            ))->join('ot_module m ON m.mid = s.mid', 'LEFT')
                ->join('ot_service s1 ON s1.sid = s.sid', 'LEFT')
                ->join('ot_group g ON s.groupid = g.groupid', 'LEFT')
                ->where(array('s.pid' => $pid, 's.paid' => $paid))->order($order)->select();
            if ($list) {
                foreach ($list as $k => $v) {
                    if ($v['s_description']) {
                        $str = strip_tags(htmlspecialchars_decode($v['s_description']));
                        $list[$k]['title_show'] = $str;
                    } else {
                        if ($v['gname']) {
                            $list[$k]['title_show'] = $v['gname'] . '-' . $v['o_name'] . '-' . $v['sname'];
                        } else {
                            if ($v['o_name'] || $v['sname']) {
                                $list[$k]['title_show'] = $v['o_name'] . '-' . $v['sname'];
                            } else {
                                $list[$k]['title_show'] = $v['title'];
                            }

                        }

                    }
                }
            }
            $this->serviceExport($list, $project['name']);
        }
        $list = M('ProjectService')->alias('s')
            ->field(array('s.*', 'm.name as o_name', 'g.name as gname', 's1.name as sname',
                's1.description as s_description', 'p.name as pname', 'p.pid as pid',
                '(select count(1) from ot_service_doc sd where sd.sid = s.sid) as sdc'))
            ->join('ot_module m ON m.mid = s.mid', 'LEFT')
            ->join('ot_project_config p ON m.pid = p.pid', 'LEFT')
            ->join('ot_service s1 ON s1.sid = s.sid', 'LEFT')
            ->join('ot_group g ON s.groupid = g.groupid', 'LEFT')
            ->where(array('s.pid' => $pid, 's.paid' => $paid))->order($order)->select();

        $nlist = array();
        if ($list) {
            foreach ($list as $k => $v) {
                if ($v['sid']) {
                    $stemp = M('Service')->field('description,mid')->where('sid = ' . $v['sid'])->find();
                    $sdescription = $stemp['description'];
                    $smid = $stemp['mid'];
                    $smh = M('ModuleHelp')->where('mid = ' . $smid)->count();
                    if ($sdescription || $smh) {
                        $list[$k]['bulb'] = 1;
                    }
                }
                if ($v['s_description']) {
                    $str = strip_tags(htmlspecialchars_decode($v['s_description']));
                    $list[$k]['title_show'] = $str;
                } else {
                    if ($v['gname']) {
                        $list[$k]['title_show'] = $v['gname'] . '-' . $v['o_name'] . '-' . $v['sname'];
                    } else {
                        if ($v['o_name'] || $v['sname']) {
                            $list[$k]['title_show'] = $v['o_name'] . '-' . $v['sname'];
                        } else {
                            $list[$k]['title_show'] = $v['title'];
                        }

                    }

                }
            }

            foreach ($list as $k => $v) {
                $listpid = $v['pid'] ?: 'xx';
                $nlist[$listpid]['mid'] = $listpid;
                $nlist[$listpid]['mname'] = $v['pname'];
                $nlist[$listpid]['list'][] = $v;
            }
        }
        $this->assign('_list', $nlist);
        //文档
        $doc = M("doc")->where("paid=" . $paid)
            ->join('ot_file f on d.fileid=f.fileid  and f.delete=0', 'left')
            ->join('ot_doc_type t on d.dtid=t.dtid', 'left')
            ->field(array(
                'd.docid',
                'd.uid',
                't.name as tname',
                'f.name as dname',
                'savepath',
                'size', 'views', 'd.uname', 'd.addtime', 'note', 'f.fileid', 'd.url', 'd.urlname', 'f.ext'
            ))->order('addtime desc')->select(array('alias' => 'd'));
        foreach ($doc as &$v) {
            $v['size'] = ceil($v['size'] / 1024);
        }
        $this->assign('doc', $doc);
        $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
        $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');

        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
        $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectView/view?id=' . $pid));
        $root_mbx[] = array('title' => '执行', 'url' => U('Execute/task_index?id=' . $pid));
        $root_mbx[] = array('title' => '变更', 'url' => U('Execute/alter_index?pid=' . $pid));
        $title = M('ProjectAlter')->where("paid=" . $paid)->getField('title');
        $root_mbx[] = array('title' => $title, 'url' => U('Execute/alter_view?pid=' . $pid . '&paid=' . $paid));
        $root_mbx[] = array('title' => '变更单详情', 'url' => '');
        $this->assign('root_mbx', $root_mbx);

        $this->assign('from_url', $from_url);
        $this->display();

    }

    //变更自定义任务
    public function alter_service_add()
    {
        $this->assign('actionName', 'execute');
        $this->assign('actname', 'alter_index');
        $pid = I('get.pid');
        $paid = I('get.paid');
        if (empty($pid)) {
            $this->error('非法操作');
        }
        $project = M('project')->alias('p')->field('p.name,p.state,p.pid,d1.d_key as sname,p.pmuid,p.uid')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')->where(array('p.pid' => $pid))->find();
        if (empty($project)) {
            $this->error('项目不存在或已删除！');
        }
        $this->assign('p', $project);
        $this->assign('pid', $pid);
        $this->assign('paid', $paid);

        if (IS_POST) {
            $fenjie = I('get.fenjie');
            $project = $this->db->field('pstime,petime,state')->where('pid=' . $pid)->find();
            if ($project['state'] == 2 || $project['state'] == -1) {
                $this->error("当前项目已结束，无法添加任务");
            }
            $title = I('post.title');
            $assigneduid = I('post.assigneduid');
            $checkuid = I('post.checkuid');
            $days = I('post.days');
            $sort_order = I('post.sort_order');
            $description = I('post.description');
            $quans = I('post.quans');
            $hours = I('post.hours');
            $groupid = I('post.groupid', 0);
            $prepsid = I('post.prepsid');
            if (empty($title)) {
                $this->error('任务标题不能为空');
            }
            $pstime = strtotime($_POST['pstime']);
            $petime = strtotime($_POST['petime']);

            /* if ($pstime < $project['pstime']) {
                 $this->error('项目计划开始时间从' . date('Y/m/d', $project['pstime']) . '开始，' . date('Y/m/d', $pstime) . '已超出范围，请重新设置计划开始时间');
             }
             if ($petime > $project['petime']) {
                 $this->error('项目计划结束时间至' . date('Y/m/d', $project['petime']) . '结束，' . date('Y/m/d', $petime) . '已超出范围，请重新设置计划结束时间');
             }*/
            $data = array(
                'title' => $title,
                'hours' => $hours,
                'quans' => $quans,
                'assignedname' => get_nickname($assigneduid) ? get_nickname($assigneduid) : get_username($assigneduid),
                'assigneduid' => $assigneduid,
                'checkuname' => get_nickname($checkuid) ? get_nickname($checkuid) : get_username($checkuid),
                'checkuid' => $checkuid,
                'groupid' => $groupid,
                'pstime' => $pstime,
                'petime' => $petime,
                'days' => $days,
                'sort_order' => $sort_order,
                'description' => $description,
                'pid' => $pid,
                'lastedituid' => UID,
                'lastedituname' => get_nickname(is_login()) ? get_nickname(is_login()) : get_username(is_login()),
                'lastedittime' => time(),
                'prepsid' => $prepsid,
                'paid' => $paid,
                'pastate' => 0,
                'type' => '变更'
            );
            if ($fenjie) {
                $data['state'] = 1;
                if (empty($assigneduid)) {
                    $this->error("请选择执行人");
                }
                if (empty($pstime)) {
                    $this->error('计划开始时间不能为空');
                }
                if ($petime < $pstime) {
                    $this->error('计划结束时间不能小于计划开始时间');
                }
                if (!is_numeric($days) || $days < 0) {
                    $this->error('周期不能为空');
                }
                /*  if (!is_numeric($hours) || $hours < 0) {
                      $this->error('工时填写有误');
                  }*/
            }
            $psid = M('ProjectService')->add($data);
            //重新排序
            rearrangement($pid);
            //更新项目path字段
            changeProjectPath($pid);
            if ($psid) {

                if ($fenjie) {
                    $addtime = time();
                    $uid = UID;
                    $a = 1;
                    $uname = get_nickname(is_login()) ? get_nickname(is_login()) : get_username(is_login());
                    $sql = "insert into ot_task(pid,psid,pcid,groupid,sid,mid,title,description,
							assigneduid,assignedname,pstime,petime,days,hours,checkuid,checkuname,delivery,amount,state,uid,uname,addtime,manageruid,manageruname,assignedtime) select pid,psid,pcid,groupid,sid,mid,title,description,
							assigneduid,assignedname,pstime,petime,days,hours,checkuid,checkuname,delivery,amount," . $a . "," . $uid . ",'" . $uname . "'," . $addtime . "," . $uid . ",'" . $uname . "'," . $addtime . " from ot_project_service where psid={$psid}";
                    M()->execute($sql);
                    $task_id = M()->getLastInsID();
                    $task1 = M("Task")->alias('t')
                        ->field("t.*,p.name as pname,pmuid")
                        ->join('ot_project p on t.pid = p.pid', 'LEFT')
                        ->where("t.tid='{$task_id}' and t.deleted=0")->find();
                    // 发给执行人 时间点：任务启动  LGW
                    $dynamic = [
                        'a' => $task1['assignedname'],               // 执行人
                        'b' => $task1['title'],                      // 任务名称
                        'c' => $task1['pname'],                      // 项目名称
                        'email' => get_email($task1['assigneduid']),
                    ];
                    $url = 'Task/view/id/'.$task_id;
                    $cost = sendTemplate($dynamic, 'task_new',$url);
                    apiRead(Api::S_SEND, Api::DXY_S, $cost);  // 发给执行人 : LGW
                    $roleid = M('ProjectRole')->where("name='项目执行'")->getfield('prid');
                    if ($roleid) {
                        $tmp4 = M('Takepart')->field('tpid')->where('uid=' . $assigneduid . ' and pid = ' . $pid)->find();
                        if (empty($tmp4['tpid'])) {
                            $data4 = array(
                                'pid' => $_POST['pid'],
                                'uid' => $_POST['assigneduid'],
                                'uname' => $_POST['assignedname'],
                                'addtime' => time(),
                                'adduname' => get_nickname(UID) ? get_nickname(UID) : get_username(UID),
                                'adduid' => UID,
                                'roleid' => $roleid,
                                'psid' => $psid,
                            );
                            M('Takepart')->add($data4);
                        }
                    }
                    if (M('Milestone')->where(array('pid' => $pid, 'name' => '项目开始', 'etime' => 0, 'type' => 0))->find()) {
                        M('Milestone')->where(array('pid' => $pid, 'name' => '项目开始', 'etime' => 0, 'type' => 0))->save(array('completion' => 100, "etime" => time()));
                    }
                }
                upBudget($pid);//成本预算
                workbreak_alter($paid);
                $tid = M('task')->where('pid=' . $pid)->getfield('tid');
                updateprocess($tid);//更新项目进度
                $this->redirect('Execute/alter_view?pid=' . $pid . '&paid=' . $paid);

            } else {
                $this->error('添加失败！');
            }
        } else {
            //执行人
            $pm = M('Member')->field('uid,nickname')->select();
            $this->assign('pm', $pm);
            //审核人
            $sales = M('Member')->field('uid,nickname')->select();
            $this->assign('sales', $sales);
            //项目组
            $group = M('Group')->field('groupid,name')->order('sort_order asc')->select();
            $this->assign('group', $group);
            //排序
            $sort = M('ProjectService')->max('sort_order');
            $sort = $sort + 1;
            $this->assign('sort', $sort);
            $this->assign('pstime', date('Y/m/d', time()));
            $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
            $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');
            $root_mbx = array();
            $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
            $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
            $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectView/view?id=' . $pid));
            $root_mbx[] = array('title' => '执行', 'url' => U('Execute/task_index?id=' . $pid));
            $title = M('ProjectAlter')->where("paid=" . $paid)->getField('title');
            $root_mbx[] = array('title' => $title, 'url' => U('Execute/alter_view?pid=' . $pid . '&paid=' . $paid));
            $root_mbx[] = array('title' => '添加任务', 'url' => '');
            $this->assign('root_mbx', $root_mbx);
            $this->assign('from_url', $from_url);
            $this->display();
        }
    }

    /*引入标准任务*/
    public function alter_add_item()
    {
        $this->assign('actionName', 'execute');
        $this->assign('actname', 'alter_index');
        $item_id = I("item_id", 0);//项目id
        $pid = I("pid", 0);//标准项目id
        $paid = I('get.paid');
        $this->assign('paid', $paid);
        $this->project_out($item_id);//判断项目是否可以操作
        $project = M('Project')
            ->field('p.pid,p.name,p.code,p.state,progress,d1.d_key sname,p.pmuid,p.uid')
            ->alias('p')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
            ->where('p.pid=' . $item_id)
            ->find();
        $this->assign('p', $project);

        // 获取所有的项目
        $ProjectConfig = M('ProjectConfig')->select();
        $ppid = I('get.ppid');
        if (!$ppid) {
            $ppid = $ProjectConfig [0] ['pid'];
            $this->assign('pname', $ProjectConfig [0] ['name']);
        } else {
            $p = M('ProjectConfig')->where(array('pid' => $ppid))->find();
            $this->assign('pname', $p ['name']);
        }
        $this->assign('ppid', $ppid);
        if (!IS_POST) {
            //更新排序
            if (isset($_GET['sort']) && isset($_GET['order'])) {
                $sort = strtolower(trim($_GET['sort']));
                $order = strtolower(trim($_GET['order']));
                if (!in_array($order, array('asc', 'desc'))) {
                    $sort = 'm.sort_order';
                    $order = 'asc';
                }
            } else {
                $sort = 's.sort_order';
                $order = 'asc';
            }
            $manme = I("manme", '');    // 服务模块
            $sname = I('sname', '');     // 服务内容
            if ($pid) {
                $pr01 = $this->pro_module->where('pid=' . $pid)->find();
                $where = 'p.pid = ' . $pid;
                $this->assign('module_name', $pr01['name']);
            } else {
                $pr01 = $this->pro_module->find();
                $pid = $pr01['pid'];
                $where = 'p.pid = ' . $pid;
                $this->assign('module_name', $pr01['name']);
            }
            $sidarr = M('ProjectService')->where('pid=' . $item_id . ' and sid !=0')->getField('sid', true);

            if ($sidarr) {

                $sids = implode(',', $sidarr);
                $sids and $where .= " and s.sid not in ($sids)";
            }
            if ($manme || $sname) {
                $where = [];
                $c1 = '1=1';
                if ($manme && $sname) {
                    $c2 = " and (m.name like '%{$manme}%' or s.name like '%{$sname}%')";
                    $c3 = '';
                } else {
                    $manme and $c2 = " and m.name like '%{$manme}%'";
                    $sname and $c3 = " and s.name like '%{$sname}%'";
                }
                $where['_string'] = "(($c1 $c2 $c3))";
                $sids and $where['_string'] .= " and s.sid not in ($sids)";
            }
            $this->assign('manme', $manme);
            $this->assign('sname', $sname);
            //项目
            /*private function getpro($item_id, $module, $id = 0, $ppid = 0) {*/
            $pro = $this->getpro($item_id, $this->pro_module, $ppid, $ppid, $paid);
            $pro = "<ul class='tree tree-lines'>" . substr($pro, 4);

            $this->assign('ProjectConfig', $pro);
            $count = M('Service')->alias('s')->join('ot_module m ON m.mid = s.mid', "left")
                ->join('ot_project_config p ON m.pid = p.pid', "left")
                ->join('ot_group ON s.groupid = ot_group.groupid', "left")
                ->join('ot_module m1 ON m1.mid = s.remid', 'left')
                ->join("ot_dictionary d ON d_code='reqgroup' and d.d_value = s.regroup", 'left')
                ->where($where)->count();

            $Page = new \Think\Page($count, 20);
            $list = M('Service')->alias('s')
                ->field(array('s.*', 'd.d_key as regroup_name', 'm1.name as remid_name', 'ot_group.name as g_name', 'm.name as o_name', 'ps.quans as sq', 'p.name as pname'))
                ->join('ot_project_service ps on ps.sid=s.sid and ps.pid=' . $item_id, 'left')
                ->join('ot_module m ON m.mid = s.mid', "left")
                ->join('ot_project_config p ON m.pid = p.pid', "left")
                ->join('ot_group ON s.groupid = ot_group.groupid', "left")
                ->join('ot_module m1 ON m1.mid = s.remid', 'left')
                ->join("ot_dictionary d ON d_code='reqgroup' and d.d_value = s.regroup", 'left')
                ->where($where)
                ->order($sort . " " . $order, 's.sort_order asc', 's.mid asc')->select();
            $where1 = " and s.pid='" . $item_id . "'";
            $list_old = M('ProjectService')->alias('s')->field(array('s1.sid'))
                ->join('ot_module m ON m.mid = s.mid', 'LEFT')
                ->join('ot_project_config p ON m.pid = p.pid', "left")
                ->join('ot_service s1 ON s1.sid = s.sid', 'LEFT')
                ->join('ot_group g ON s.groupid = g.groupid', 'LEFT')
                ->where($where . $where1)->select();
            $nlist = array();
            if ($list) {
                foreach ($list as $k => $v) {
                    if ($v['sid']) {
                        $stemp = M('Service')->field('description,mid')->where('sid = ' . $v['sid'])->find();
                        $sdescription = $stemp['description'];
                        $smid = $stemp['mid'];
                        $smh = M('ModuleHelp')->where('mid = ' . $smid)->count();
                        if ($sdescription || $smh) {
                            $list[$k]['bulb'] = 1;
                        }
                    }
                    if ($list_old) {
                        foreach ($list_old as $k1 => $v1) {
                            if ($v['sid'] == $v1['sid']) {
                                $list[$k]['h'] = 1;
                            }
                        }
                    }
                    if ($v['sq']) {

                        $list[$k]['quantity'] = $v['sq'];
                    }

                    if (empty($v['minprice']) || $v['minprice'] == "0.00") {
                        $list[$k]['price'] = $v['maxprice'];
                        $list[$k]['canupdate'] = 0;
                    } else {
                        $list[$k]['price'] = $v['minprice'];
                        $list[$k]['canupdate'] = 1;
                    }

                    if ($v['osid']) {
                        //$list[$k]['h'] = 1;
                        if ($v['sprice']) {
                            $list[$k]['price'] = $v['sprice'];
                        }
                    }
                    if ($v['description']) {
                        $str = strip_tags(htmlspecialchars_decode($v['description']));
                        $list[$k]['title_show'] = $str;
                    } else {
                        if ($v['g_name']) {
                            $list[$k]['title_show'] = $v['g_name'] . '-' . $v['o_name'] . '-' . $v['name'];
                        } else {
                            $list[$k]['title_show'] = $v['o_name'] . '-' . $v['name'];
                        }
                    }
                }
//               var_dump($list);
                foreach ($list as $k => $v) {
                    $nlist[$v['mid']]['mid'] = $v['mid'];
                    $nlist[$v['mid']]['mname'] = $v['pname'] . '-' . $v['g_name'] . '-' . $v['o_name'];
                    $nlist[$v['mid']]['list'][] = $v;
                }
            }
            /* $offer = M('offer')->alias('o')->field(array('o.oid', 'o.projectname', 'o.code', 'c.shortsign'))->join('ot_customer c on c.cid = o.cid', 'LEFT')->where("o.oid = '" . $oid . "'")->find();
             $this->assign('offer', $offer);*/
            $this->assign('_list', $nlist);
            $Page->setConfig('theme', '%FIRST% %UP_PAGE% %LINK_PAGE% %DOWN_PAGE% %END% %HEADER%');
            $show = $Page->show();
            //$this->assign('_page',$show);
            $this->assign('item_id', $item_id);
            $this->assign('pid', $item_id);
            $pid = $item_id;

            $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
            $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');
            $root_mbx = array();
            $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
            $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
            $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectView/view?id=' . $pid));
            $root_mbx[] = array('title' => '执行', 'url' => U('Execute/task_index?id=' . $pid));
            $title = M('ProjectAlter')->where("paid=" . $paid)->getField('title');
            $root_mbx[] = array('title' => $title, 'url' => U('Execute/alter_view?pid=' . $pid . '&paid=' . $paid));
            $root_mbx[] = array('title' => '引入任务', 'url' => '');
            $this->assign('from_url', $from_url);
            $this->assign('root_mbx', $root_mbx);
            $actionURL = strstr(__ACTION__, '/Admin');
            $this->assign('actionURL', $actionURL);
            $this->display();
        } else {
            $ids = I("post.ids");
            $pid = I("post.pid");
            $qs = I("post.qs");
            //验证数据正确性
            if ($ids && is_array($ids)) {
                foreach ($ids as $v) {
                    if (!$qs || $qs[$v] <= 0 || ((floor($qs[$v]) - $qs[$v]) != 0)) {
                        $this->error("请填写正确的数量");
                    }
                }
            } else {
                $this->error("请选择要引入的服务内容");
            }

            $item_id = I("post.item_id");
            $project = $this->db->field(true)->where('pid=' . $item_id)->find();
            if ($project['state'] == 2 || $project['state'] == -1) {
                $this->error("当前项目已结束，无法添加");
            }

            //验证数据正确性
            if ($ids && is_array($ids)) {
                foreach ($ids as $v) {
                    $r = M("Service")->where(array("sid" => $v))->find();
                    if (empty($r)) {
                        $this->error("任务数据不存在，请重新操作");
                    }
                }
            } else {
                $this->error("请选择要引入的数据");
            }

            /* $service = M("Service")->where("pid='{$pid}'")->select();
                if (empty($service)) {
                    $this->error("任务数据已不存在");
                }*/


            $list_old = M('ProjectService')->alias('s')->field(array('s1.sid', 's.groupid'))
                ->join('ot_module m ON m.mid = s.mid', 'LEFT')
                ->join('ot_project_config p ON m.pid = p.pid', "left")
                ->join('ot_service s1 ON s1.sid = s.sid', 'LEFT')
                ->join('ot_group g ON s.groupid = g.groupid', 'LEFT')
                ->where("s.pid='" . $item_id . "'")->select();

            //多选一判断 以及 关联模块判断
            foreach ($ids as $k => $v) {
                /*  foreach ($service as $vv) {
                      if ($v == $vv['sid'] && $vv['required'] == 2) {
                          $groupid = $vv['regroup'];
                      }
                      $mid = $vv["mid"];
                  }
                  //多选一判断
                  if ($groupid) {
                      if ($list_old) {
                          foreach ($list_old as $vo) {
                              if ($vo['groupid'] == $groupid) {
                                  unset($ids[$k]);
                              }
                          }
                      }
                      foreach ($ids as $v1) {
                          $res = M("Service")->where(array("_string" => "and sid<>'{$v}'", "pid" => $pid, "required" => 2, "regroup" => $groupid, "sid" => $v1))->find();
                          if ($res) {
                              $this->error("存在多选一条件限制，请刷新后重新操作");
                          }
                      }
                  }*/
                /*  //关联模块判断
                  if ($mid) {
                      $ls = M("Service")->where(array("remid" => $mid, "required" => 3, "pid" => $pid))->select();
                      if ($ls) {
                          foreach ($ls as $v) {
                              if (!in_array($v['sid'], $ids)) {
                                  $this->error("存在关联模块任务未选中，请刷新后重新操作");
                              }
                          }
                      }
                  }*/

                if ($list_old) {
                    foreach ($list_old as $va) {
                        if ($va['sid'] == $v) {
                            unset($ids[$k]);
                        }
                    }
                }
            }


            foreach ($ids as $v) {
                $row = M("Service")
                    ->join("ot_module on ot_module.mid=ot_service.mid", "left")
                    ->field(array('ot_service.*', 'ot_module.mid', 'ot_module.pid as m_pid'))->where(array("sid" => $v))->find();
                if (empty($row)) {
                    $this->error("数据不存在，请重新操作");
                }
                $pid = $item_id;
                $pcid = $row['m_pid'];
                $groupid = $row['groupid'];
                $mid = $row['mid'];
                $sid = $row['sid'];
                $title = $row['name'];
                $pstime = 0;
                $petime = 0;
                $days = $row['days'] * $qs[$v];
                $description = $row['note'];
                $delivery = 0;
                $hours = $row['hour'] * $qs[$v];
                $sort_order = $row['sort_order'];
                $quantity = $qs[$v];
                $amount = $row['maxprice'] * $quantity;

                $sql = 'insert into ot_project_service (pid,pcid,groupid,mid,sid,title,pstime,petime,days,sort_order,description,delivery,hours,quans,paid,type,amount) values
                  ("' . $pid . '","' . $pcid . '","' . $groupid . '","' . $mid . '","' . $sid . '","' . $title . '","' . $pstime . '","' . $petime . '","' . $days . '","' . $sort_order . '","' . $description . '","' . $delivery . '","' . $hours . '","' . $quantity . '","' . $paid . '","变更","' . $amount . '")';

                M('project_service')->execute($sql);
            }
            //重新排序
            rearrangement($pid);
            //更新项目path字段
            changeProjectPath($pid);
            workbreak_alter($paid);
            $tid = M('task')->where('pid=' . $pid)->getfield('tid');
            updateprocess($tid);//更新项目进度
            $this->redirect('Execute/alter_view?pid=' . $item_id . '&paid=' . $paid);
        }
    }

    /*批量编辑*/
    public function alter_bulk_edit()
    {
        $pid = I('get.pid');
        $paid = I('get.paid');
        $this->assign('paid', $paid);
        if (!$pid) {
            $id = I('post.pid');
            $this->project_out($id);//判断项目是否可以操作
            $data = $_POST;
            if (is_array($data)) {
                $new_data = array();
                foreach ($data as $key => $vo) {
                    if ($key == 'pstime' || $key == 'petime') {
                        foreach ($vo as $K => $v) {
                            $new_data[$K][$key] = strtotime($v);
                        }
                    } else {
                        foreach ($vo as $K => $v) {
                            $new_data[$K][$key] = $v;
                        }
                    }

                }
            }

            foreach ($new_data as $vo) {
                $vo['assignedname'] = get_nickname($vo['assigneduid']) ? get_nickname($vo['assigneduid']) : get_username($vo['assigneduid']);
                $vo['checkuname'] = get_nickname($vo['checkuid']) ? get_nickname($vo['checkuid']) : get_username($vo['checkuid']);
                M('ProjectService')->save($vo);
            }
            upBudget($id);//成本预算
            workbreak_alter($paid);
            $tid = M('task')->where('pid=' . $id)->getfield('tid');
            updateprocess($tid);//更新项目进度
            $this->redirect('Execute/alter_view?pid=' . $id . '&paid=' . $paid);

        } else {
            $id = I('post.id');
            $psids = array();
            if (!$id) {
                $where = 'pid =' . $pid . ' and state = 0 and paid = ' . $paid;
                $psId = M('project_service')->field('psid')->where(array('pid' => $pid, 'paid' => $paid))->select();
                foreach ($psId as $vo) {
                    array_push($psids, $vo['psid']);
                }

            } else {
                $psids = $id;
                $id = implode(',', $id);
                $where = ' state = 0 and pid =' . $pid . ' and psid in (' . $id . ')' . ' and paid = ' . $paid;
            }

            //项目内容psid
            $dept_list = array();
            //执行人搜索相关部门的执行人
            foreach ($psids as $psid) {
                $service = M('project_service')->field('psid,pcid,groupid,mid')->where(['psid' => $psid])->find();
                // 标准任务查找服务模块下的服务角色
                if ($service['pcid'] && $service['mid']) {
                    $module = M('module')->where('mid=' . $service['mid'])->getField('roles');
                    if (!empty($module)) {
                        $modules = explode(',', $module);
                        $didss = '';
                        $where1['_string'] = "1=1 and (";
                        foreach ($modules as $k => $v) {
                            $k == 0 ? $con = '' : $con = 'or';
                            $where1['_string'] .= $con . " CONCAT(',',d.groupids,',') like CONCAT('%,',$v,',%') ";
                        }
                        $where1['_string'] .= ")";
                        //查找相关部门
                        $did = M('Dept')->alias('d')->field('did')->where($where1)->select();
                        if (!empty($did)) {
                            foreach ($did as $v) {
                                $deptss = M('dept')->field('did')->where(['parent' => $v['did']])->select();
                                $dept_list[$psid]['dept'][] = $v['did'];
                                foreach ($deptss as $vo) {
                                    $dept_list[$psid]['dept'][] = $vo['did'];
                                }
                            }
                        } else {
                            $dept_list[$psid]['dept'][] = '';
                        }
                    } else {
                        // 如果服务模块没有服务角色则部门为空
                        $dept_list[$psid]['dept'][] = '';
                    }
                } else {
                    //查找相关的groupid
                    $groupid = M('project_service')->field('groupid')->where(['psid' => $psid])->find();
                    //查找相关部门
                    $deptids = M('dept')->field('did')->where(['groupid' => $groupid['groupid']])->select();

                    if (empty($deptids)) {
                        $dept_list[$psid]['dept'][] = '';
                    }
                    foreach ($deptids as $deptid) {
                        $deptss = M('dept')->field('did')->where(['parent' => $deptid['did']])->select();
                        $dept_list[$psid]['dept'][] = $deptid['did'];
                        foreach ($deptss as $vo) {
                            $dept_list[$psid]['dept'][] = $vo['did'];
                        }
                    }
                }

            }
            foreach ($dept_list as $k => &$vo) {
                foreach ($vo as &$v) {
                    $v = array_unique($v);
                }
            }

            //            查找部门成员
            $sales = M('Member')
                ->field('uid,nickname')
                ->where('status = 1')
                ->select();
            $m = array();
            foreach ($dept_list as $key => $value) {
                $deptDid = implode(',', $value['dept']);
                $m[$key] = M('member')->field('nickname,uid')->where('status=1 and dept in (' . $deptDid . ')')->select();
                if (empty($m[$key])) {
                    $m[$key] = $sales;
                }
            }
            $this->assign('sale', $m);
            //审核人
            $auditor = M('member')->field('nickname,uid')->where('status=1')->select();
            $this->assign('sales', $auditor);
            //项目
            $project = M('Project')
                ->field('p.*,o.code oname,o.chance,d1.d_key sname,d2.d_key levelc,c.shortsign cname,d3.name dname,m.nickname mname')
                ->alias('p')
                ->join('ot_offer o on p.oid = o.oid', 'LEFT')
                ->join('ot_dept d3 on p.orgid = d3.did', 'LEFT')
                ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')
                ->join('ot_dictionary d2 on p.level = d2.d_value and d2.d_code=\'level\'', 'LEFT')
                ->join('ot_customer c on p.cid = c.cid', 'LEFT')
                ->join('ot_member m on p.sale = m.uid', 'LEFT')
                ->where('p.pid=' . $pid)
                ->find();
            $this->assign('p', $project);


            $service = M('ProjectService')->where($where)->select();
            $arr = array();
            foreach ($m as $key => $vo) {
                foreach ($vo as $v) {
                    $arr[$key][] = $v['nickname'];
                }
            }
            $psids = '';
            foreach ($service as $key => $vo) {
                if (!in_array($vo['assignedname'], $arr[$vo['psid']])) {
                    $service[$key]['canyuren'] = $vo['assignedname'];
                }
                $psids .= $vo['psid'] . ',';
            }
            $this->assign("psids", trim($psids, ','));
            $this->assign("_list", $service);
            $this->assign("pid", $pid);
            $title = M('ProjectAlter')->where("paid=" . $paid)->getField('title');

            $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
            $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');

            $root_mbx = array();
            $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
            $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
            $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectView/view?id=' . $pid));
            $root_mbx[] = array('title' => '执行', 'url' => U('Execute/task_index?id=' . $pid));
            $root_mbx[] = array('title' => $title, 'url' => U('Execute/alter_view?pid=' . $pid . '&paid=' . $paid));
            $root_mbx[] = array('title' => '编辑', 'url' => '');
            $this->assign('root_mbx', $root_mbx);
            $this->assign('actionName', 'execute');
            $this->assign('actname', 'alter_index');
            $this->assign('from_url', $from_url);
            $this->display();
        }
    }

    private function getpro($item_id, $module, $ppid = 0, $pppid = 0, $paid)
    {
        global $lastMenu;
        $where = 'parentid = ' . $ppid . " ";
        $data = $module->where($where)->order('sort_order asc')->select();
        if (is_array($data) && !empty ($data)) {
            $lastMenu .= "<ul>";
            if ($ppid) {
                $class = "open in";
            } else {
                $class = "";
            }
            $smod = M("Service");
            foreach ($data as $key => $value) {

                $r = $smod->where("pid='{$value ['pid']}'")->find();
                if ($r) {
                    $i = "<img src='/images/d.png' style='width:8px;float: left;margin-top: 5px;margin-right:2px'>";
                } else {
                    $i = "";
                }
                $href = U('Execute/alter_add_item?ppid=' . $pppid . '&item_id=' . $item_id . '&pid=' . $value['pid'] . '&paid=' . $paid);
                if ($module->where('parentid=' . $value ['pid'])->find()) {
                    $lastMenu .= "<li class='" . $class . "'> <i class='list-toggle icon'></i>" . "<a id='list" . $value ['pid'] . "' href=" . $href . " >{$i}" . $value ['name'] . " </a> ";
                    $this->getpro($item_id, $module, $value ['pid'], $pppid, $paid);
                    $lastMenu .= "</li>";
                } else {
                    if ($smod->where("pid='{$value ['pid']}'")->find()) {
                        $lastMenu .= "<li class='" . $class . "'>" . "<a id='list" . $value ['pid'] . "' href=" . $href . ">$i" . $value ['name'] . " </a></li>";
                    } else {
                        $lastMenu .= "<li class='" . $class . "'>" . "<a class='textc' id='list" . $value ['pid'] . "' href=" . $href . ">$i" . $value ['name'] . " </a></li>";
                    }

                }
            }
            $lastMenu .= "</ul>";
        }
        return $lastMenu;
    }

    public function serviceExport($pro, $pname)
    {
        if (empty($pro) || !is_array($pro) || count($pro) < 1) {
            $pro = array();
        }
        //获取想应的数据并排序
        foreach ($pro as $key => $val) {
            $arr['0'] = $val['o_name'];
            $arr['1'] = $val['title'];
            $arr['2'] = $val['type'];
            if ($val['state'] == 1) {
                $arr['3'] = '已启动';
            } elseif ($val['state'] == 0 && empty($val['assignedname'])) {
                $arr['3'] = '未分配';
            } else {
                $arr['3'] = '已分配';
            }
            $arr['4'] = $val['pstime'] ? date('Y-m-d H:i:s', $val['pstime']) : $val['pstime'];
            $arr['5'] = $val['petime'] ? date('Y-m-d H:i:s', $val['petime']) : $val['petime'];
            $arr['6'] = $val['quans'];
            $arr['7'] = $val['days'];
            $arr['8'] = $val['hours'];
            $arr['9'] = $val['assignedname'];
            $arr['10'] = $val['executee_name'];
            if ($val['milestone']) {
                $val['milestone'] = '是';
            } else {
                $val['milestone'] = '否';
            }
            $arr['11'] = $val['milestone'];
            if ($val['delivery']) {
                $val['delivery'] = '是';
            } else {
                $val['delivery'] = '否';
            }
            $arr['12'] = $val['delivery'];
            if ($val['sdc']) {
                $module = M('ServiceDoc')->alias('sd')->join('ot_doc_type dt on dt.dtid = sd.dtid', 'left');
                $list = $this->lists($module, 'sid=' . $val['sid'], '', null, 'sd.*,dt.name');
                if ($list) {
                    foreach ($list as $vo) {
                        $val['sdc'] = $vo['name'];
                    }
                } else {
                    $val['sdc'] = '';
                };
                $sdc = '是';
            } else {
                $sdc = '否';
            }
            $arr['13'] = $sdc;
            $datas[] = $arr;
        }
        $data = $datas;
        import("IOFactory", "../excel/toexcel/PHPExcel", ".php");
        import("Excel5", "../excel/toexcel/PHPExcel/Reader", ".php");
        import("PHPExcel", "../excel/toexcel", ".php");

        $today = strtotime(date('Y-m-d H:i:s'));   //本地时间
        $filename = $pname . '-变更-内容清单' . date('YmdHis');
        $filename .= ".xls";
        header("Content-type: application/vnd.ms-excel; charset=utf-8");
        header("Content-Disposition: attachment; filename=$filename.xls");

        $excel = new \PHPExcel();

        //Excel表格式,这里简略写了8列
        $letter = array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N');
        //表头数组
        $tableheader = array('标准服务', '任务', '类型', '状态', '开始时间', '结束时间', '数量', '预周期', '预工时', '执行人', '负责人', '里程碑', '交付', '文档');
        //填充表头信息
        //        $excel->getActiveSheet()->getColumnDimension('A1:L1')->setWidth('13');
        for ($i = 0; $i < count($tableheader); $i++) {
            $excel->getActiveSheet()->setCellValue("$letter[$i]1", "$tableheader[$i]");
        }
        //表格数组
        //填充表格信息
        for ($i = 2; $i <= count($data) + 1; $i++) {
            $j = 0;
            if ($i <= count($data) + 1) {
                foreach ($data[$i - 2] as $key => $value) {
                    $excel->getActiveSheet()->setTitle('变更范围');
                    $excel->getActiveSheet()->setCellValue("$letter[$j]$i", " " . "$value");
                    $j++;
                }
            }

        }
        //创建Excel输入对象
        $write = new \PHPExcel_Writer_Excel5($excel);
        header("Pragma: public");
        header("Expires: 0");
        header("Cache-Control:must-revalidate, post-check=0, pre-check=0");
        header("Content-Type:application/force-download");
        header("Content-Type:application/vnd.ms-execl");
        header("Content-Type:application/octet-stream");
        header("Content-Type:application/download");;
        header('Content-Disposition:attachment;filename=' . $filename . '');
        header("Content-Transfer-Encoding:binary");
        $write->save('php://output');

    }

    public function alter_service_arr()
    {
        $pid = I('get.pid');
        $h = I('get.h', 0);
        $psids = I('post.psids') ?: I('get.psids');
        $paid = I('get.paid');
        if ($psids || $h) {
            $this->project_out($pid);//判断项目是否可以操作
            $pid = I('post.pid') ? I('post.pid') : $pid;
            $pstime = I('post.pstime') ?: I('get.pstime');
            if ($psids) {
                $where = " and psid in (" . trim($psids, '\'') . ") and paid = {$paid} ";
            } else {
                $where = " and paid = {$paid} ";
            }
            $proser = M('ProjectService')->field('assigneduid')->where('pid=' . $pid . ' and state = 0' . $where)->select();
            if (empty($proser)) {
                $this->error('项目没有可以排期任务!');
            }
            foreach ($proser as $item) {
                if ($item['assigneduid'] == 0) {
                    $this->error('自动排期请确保所选任务都指派执行人!');
                }
            }
            $pstime = strtotime($pstime);

            $protime = M('Project')->where('pid=' . $pid)->getField('pstime');
            if (empty($protime) && empty($pstime)) {
                $this->error('项目无预计启动时间，请先设置该时间!');
            }
            $pstime1 = $pstime ? $pstime : $protime;
            $proser = M('ProjectService')->alias('ps')->field('ps.assigneduid,p.pstime')->join('ot_project p on p.pid = ps.pid')->where('ps.pid=' . $pid . $where . ' and ps.state = 0')->order('ps.sort_order asc')->group('ps.assigneduid')->select();
            // 如果排期超过项目开始和结束时间则不能排期 : LGW
            $pt = M('Project')->field('pstime,petime')->where("pid=" . $pid)->find();
            $ptStime = $pt['pstime'];    // 项目的计划开始日期
            $ptEtime = $pt['petime'];    // 项目的计划结束日期
            if ($pstime) {
                foreach ($proser as $key => $vo) {
                    $proser[$key]['pstime'] = $pstime;
                }
            }
            $msg = '';
            foreach ($proser as $vo) {
                $data = M('ProjectService')->field('psid,title,days,state,pcid,hours')->where('assigneduid=' . $vo['assigneduid'] . ' and pid=' . $pid . $where)->order('sort_order asc')->select();
                $temp = [];
                $pstime = strtotime(date('Ymd', $vo['pstime']));

                foreach ($data as $k => $v) {
                    static $petime;
                    $psid = $v['psid'];
                    $days = $v['days'];
                    if (empty($days)) {
                        $this->error('自动排期请确保所选任务的周期不能为空!');
                    }
                    if ($k != 0) {
                        $pstime = (int)$petime + 1;
                    }
                    (int)$petime = (int)$pstime + (int)$days * 86400 - 1;

                    if (empty($h)) {
                        if ($pstime < $ptStime && $ptStime) {
                            $msg .= "<strong>『" . $v['title'] . "』</strong> <span class='textc'>开始时间</span> <strong>" . date('y.m.d', $pstime) . '</strong></br>';
                            if ($ptEtime) {
                                $msg .= "<span class='textr'>超出</span> <strong>『项目范围』</strong> <strong>" . date('y.m.d', $ptStime) . "~" . date('y.m.d', $ptEtime) . "</strong></br></br>";
                            } else {
                                $msg .= "<span class='textr'>超出</span> <strong>『项目范围』</strong> <strong>" . date('y.m.d', $ptStime) . "</strong></br></br>";
                            }
                        }
                        if ($petime > $ptEtime && $ptEtime) {
                            $msg .= "<strong>『" . $v['title'] . "』</strong> <span class='textc'>结束时间</span> <strong>" . date('y.m.d', $petime) . '</strong></br>';
                            if ($ptStime) {
                                $msg .= "<span class='textr'>超出</span> <strong>『项目范围』</strong> <strong>" . date('y.m.d', $ptStime) . "~" . date('y.m.d', $ptEtime) . "</strong></br></br>";
                            } else {
                                $msg .= "<span class='textr'>超出</span> <strong>『项目范围』</strong> <strong>" . date('y.m.d', $ptEtime) . "</strong></br></br>";
                            }
                        }
                        $procon = M('Milestone')->alias('m')->field('m.mtime,pc.name')->join("ot_project_config pc on m.pcid = pc.pid")->where("m.pcid=" . $v['pcid'] . ' and m.pid = ' . $v['pid'])->find();
                        if ($procon) {
                            $mtime = $procon['mtime'];
                            $mname = $procon['name'];
                            if ($petime > $mtime && $mtime) {
                                $msg .= "<strong>『" . $v['title'] . "』</strong> <span class='textc'>结束时间</span> <strong>" . date('y.m.d', $petime) . '</strong></br>';
                                $msg .= "<span class='textr'>超出</span> <strong>『里程碑{$mname}』</strong> <span class='textc'>时间点</span> <strong>" . date('y.m.d', $mtime) . "</strong></br></br>";
                            }
                        }

                    }
                    if (empty($msg)) {
                        $temp[$psid] = array(
                            'pstime' => $pstime,
                            'petime' => $petime,
                            'psid' => $psid,
                            'state' => $v['state'],
                        );
                    }
                }
                if ($temp) {
                    foreach ($temp as $key => $val) {
                        M('ProjectService')->save($val);
                    }
                }
            }

            if ($msg) {
                echo "<script>window.parent.changewidth();</script>";
                $pstime = date('Ymd', $pstime1);
                $this->suc($msg, U('Execute/alter_view?pid=' . $pid . '&paid=' . $paid), U('Execute/alter_view?pid=' . $pid . '&paid=' . $paid), U("Execute/alter_service_arr?pid=" . $pid . "&h=1&psids='" . $psids . "'&pstime=" . $pstime . '&paid=' . $paid));
                return;
            }
            if ($h) {
                $this->redirect('Execute/alter_view?pid=' . $pid . '&paid=' . $paid);
            } else {
                echo "<script>window.parent.choose();</script>";
            }
        } else {
            if (!$pid) {
                $this->error('请选择要操作的数据!');
            }
            $this->assign('paid', $paid);
            $this->assign('pid', $pid);
            $this->display();
        }
    }

    //指派负责人
    public function alter_transactor()
    {
        $psids = I('get.psids');
        if (IS_POST) {
            $title = I("post.title", '');
            $stime = I("post.stime", '');
            $etime = I("post.etime", '');
            $state = I("post.state", '');
            $type = I("post.type", '');
            $toid = I("post.toid", '');
            $psids = I("post.psids", '');

            $description = I("post.description", '');

            if (empty ($title)) {
                $this->error('标题不能为空');
            }
            if (empty ($stime)) {
                $this->error('开始时间不能为空');
            }
            if (empty ($etime)) {
                $this->error('结束时间不能为空');
            }
            if (empty ($state)) {
                $this->error('状态不能为空');
            }
            if (empty ($type)) {
                $this->error('优先级不能为空');
            }
            if (empty ($toid)) {
                $this->error('待办人不能为空');
            }
            $c1 = "psid in ($psids)";
            $map['_string'] = "(($c1))";
            $pService = M('ProjectService')->field('title,state')
                ->where($map)
                ->select();
            $states1 = '';
            foreach ($pService as $k => $v) {
                if ($v['state'] == 1) {
                    $states1 .= "任务『 " . $v['title'] . '』 已启动不能指派执行人' . '<br>';  // LGW
                }
            }
            if ($states1 != '') {
                $this->error($states1, 'javascript:window.parent.choose2();');
            }
            $psidarr = explode(',', $psids);
            $tr = M("Member")->where("uid='{$toid}'")->find();
            $toname = $tr['nickname'];

            $data = array(
                'title' => $title,
                'stime' => strtotime($stime),
                'etime' => strtotime($etime),
                'state' => $state,
                'type' => $type,
                'description' => $description,
                'addtime' => time(),
                'uid' => UID,
                'uname' => get_nickname(UID) ? get_nickname(UID) : get_username(UID),
                'toid' => $toid,
                'toname' => $toname,
            );
            $tid = M('Todo')->add($data);
            if (!$tid) {
                $this->error('待办添加失败！');
            } else {
                // 发给待办人 时间点：新增待办  LGW
                $dynamic = [
                    'a' => $toname,
                    'b' => $title,
                    'email' => get_email($toid),
                ];
                $url = "Dealt/view/id/".$tid;
                $cost = sendTemplate($dynamic, 'dealt_to',$url);
                $costTypes = apiRead(Api::S_SEND, Api::DXY_S, $cost);  // 发给待办人 : LGW

                foreach ($psidarr as $v) {
                    $data1 = array(
                        'tid' => $tid,
                        'psid' => $v,
                    );
                    M('TodoPs')->add($data1);
                    M('ProjectService')->where(array('psid' => $v))->save(array(' executee_id' => $toid, 'executee_name' => $toname));
                }
                $pid = M('ProjectService')->where('psid=' . $psidarr[0])->getfield('pid');
                $titles = M('ProjectService')->field('title')->where('psid in(' . $psids . ')')->select();
                $content = '';
                foreach ($titles as $v) {
                    $content .= $v['title'] . ',';
                }
                $content = '将任务 ' . trim($content, ',') . ' 指派给' . $toname;

                action_log_new(array('outtype' => 'ot_todo', 'outkey' => $tid, 'pid' => $pid, 'action' => 'transactor', 'comment' => $content));

                $this->success('操作成功！', 'javascript:window.parent.choose();');
            }
        } else {
            $this->assign('now', date('Y/m/d H:i'), time());
            $this->assign('psids', $psids);

            $types = M("Dictionary")->where("d_code='dbtype'")->select(array('order' => 'd_order asc'));
            $this->assign('types', $types);

            $state = M("Dictionary")->where("d_code='dbstate'")->select(array('order' => 'd_order asc'));
            $this->assign('states', $state);

            $this->display();
        }
    }

    public function service_ajax_col()
    {
        $id = empty($_GET['id']) ? 0 : intval($_GET['id']);
        $column = empty($_GET['column']) ? '' : trim($_GET['column']);
        $value = isset($_GET['value']) ? trim($_GET['value']) : '';

        $s = M('ProjectService')->where("psid=" . $id)->find();
        if (!$s || $s['state'] == 2) {
            echo 'false';
            exit();
        }

        $project = M('Proejct')->field('uid,pmuid')->where("pid = " . $s['pid'])->find();
        /*	if(is_administrator() || $project['uid'] == UID || $project['pmuid'] == UID){*/

        if (!cando1(array($project['uid'], $project['pmuid']))) {
            echo 'false';
            exit();
        }

        $data = array(
            $column => $value,
        );
        M('ProjectService')->where('psid=' . $id)->save($data);
        echo 'true';
        exit();
    }

    /*编辑任务*/
    public function alter_service_edit()
    {
        $this->assign('actionName', 'execute');
        $this->assign('actname', 'alter_index');
        $pid = I('get.pid');
        $paid = I('get.paid');
        if (empty($pid)) {
            $this->error('项目不存在');
        }
        $project = M('project')->alias('p')->field('p.name,p.state,p.pid,d1.d_key as sname,p.pmuid,p.uid')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')->where(array('p.pid' => $pid))->find();
        if (empty($project)) {
            $this->error('项目不存在或已删除！');
        }
        $this->assign('p', $project);
        $this->assign('pid', $pid);
        $this->assign('paid', $paid);
        $psid = I('get.id');
        if (IS_POST) {
            $this->project_out($pid);//判断项目是否可以操作
            $psid = I('post.psid');
            $fenjie = I('get.fenjie');
            if ($fenjie) {
                $ProjectService = M('ProjectService')->field('state,groupid')->where('psid=' . $psid)->find();
                if ($ProjectService['state']) {
                    $this->error("当前任务已启动，无法再次启动");
                }
            }
            if ($project['state'] == 2 || $project['state'] == -1) {
                $this->error("当前项目已结束，无法编辑");
            }
            $title = I('post.title');
            $assigneduid = I('post.assigneduid');
            $checkuid = I('post.checkuid');
            $days = I('post.days');
            $description = I('post.description');
            $quans = I('post.quans');
            $hours = I('post.hours');
            $prepsid = I('post.prepsid');
            if (empty($title)) {
                $this->error('任务标题不能为空');
            }
            $pstime = strtotime($_POST['pstime']);
            $petime = strtotime($_POST['petime']);

            /* if ($pstime < $project['pstime']) {
                 $this->error('项目计划开始时间从' . date('Y/m/d', $project['pstime']) . '开始，' . date('Y/m/d', $pstime) . '已超出范围，请重新设置计划开始时间');
             }
             if ($petime > $project['petime']) {
                 $this->error('项目计划结束时间至' . date('Y/m/d', $project['petime']) . '结束，' . date('Y/m/d', $petime) . '已超出范围，请重新设置计划结束时间');
             }*/
            //计算挣值
            $projectService = M('ProjectService')->alias('ps')->field('s.maxprice,ps.osid')->where('psid=' . $psid)->join('ot_service s on s.sid = ps.sid', 'left')->find();
            if (empty($projectService['osid'])) {
                $amount = round($projectService['maxprice'] * $quans, 2);
            } else {
                $amount = 0;
            }
            $data = array(
                'title' => $title,
                'quans' => $quans,
                'hours' => $hours,
                'assignedtime' => time(),
                'assignedname' => get_nickname($assigneduid) ? get_nickname($assigneduid) : get_username($assigneduid),
                'assigneduid' => $assigneduid,
                'checkuname' => get_nickname($checkuid) ? get_nickname($checkuid) : get_username($checkuid),
                'checkuid' => $checkuid,
                'pstime' => $pstime,
                'petime' => $petime,
                'days' => $days,
                'description' => $description,
                'pid' => $pid,
                'lastedituid' => UID,
                'lastedituname' => get_nickname(UID) ? get_nickname(UID) : get_username(UID),
                'lastedittime' => time(),
                'prepsid' => $prepsid,
                'amount' => $amount,
            );
            if ($fenjie) {
                $data['state'] = 1;
                if (empty($assigneduid)) {
                    $this->error("请选择执行人");
                }
                if (empty($pstime) || $pstime == '-') {
                    $this->error('计划开始时间不能为空');
                }
                if ($petime < $pstime || $petime == '-') {
                    $this->error('计划结束时间不能小于计划开始时间');
                }
                if (!is_numeric($days) || $days < 0) {
                    $this->error('周期不能为空');
                }
                /* if (!is_numeric($hours) || $hours < 0) {
                     $this->error('工时填写有误');
                 }*/
            }
            $psid1 = M('ProjectService')->where('psid=' . $psid)->save($data);

            if ($psid1 !== false) {
                /*action_log_new (array('outtype' => 'ot_project_service','outkey' => $psid,'pid' => $pid,'action' => 'edit','comment' => '编辑任务'));*/
                if ($fenjie) {
                    $addtime = time();
                    $uid = UID;
                    $a = 1;
                    $uname = get_nickname(is_login()) ? get_nickname(is_login()) : get_username(is_login());
                    $sql = "insert into ot_task(pid,psid,pcid,groupid,sid,mid,title,description,
							assigneduid,assignedname,pstime,petime,days,hours,checkuid,checkuname,delivery,amount,state,uid,uname,addtime,manageruid,manageruname,assignedtime) select pid,psid,pcid,groupid,sid,mid,title,description,
							assigneduid,assignedname,pstime,petime,days,hours,checkuid,checkuname,delivery,amount," . $a . "," . $uid . ",'" . $uname . "'," . $addtime . "," . $uid . ",'" . $uname . "'," . $addtime . " from ot_project_service where psid={$psid}";
                    M()->execute($sql);
                    $task_id = M()->getLastInsID();
                    $task1 = M("Task")->alias('t')
                        ->field("t.*,p.name as pname,pmuid")
                        ->join('ot_project p on t.pid = p.pid', 'LEFT')
                        ->where("t.tid='{$task_id}' and t.deleted=0")->find();
                    // 发给执行人 时间点：任务启动  LGW
                    $dynamic = [
                        'a' => $task1['assignedname'],               // 执行人
                        'b' => $task1['title'],                      // 任务名称
                        'c' => $task1['pname'],                      // 项目名称
                        'email' => get_email($task1['assigneduid']),
                    ];
                    $url = 'Task/view/id/'.$task_id;
                    $cost = sendTemplate($dynamic, 'task_new',$url);
                    apiRead(Api::S_SEND, Api::DXY_S, $cost);  // 发给执行人 : LGW

                    $roleid = M('ProjectRole')->where("name='项目执行'")->getfield('prid');
                    if ($roleid) {
                        $tmp4 = M('Takepart')->field('tpid')->where('uid=' . $assigneduid . ' and pidh = ' . $pid)->find();
                        if (empty($tmp4['tpid'])) {
                            $data4 = array(
                                'pid' => $_POST['pid'],
                                'uid' => $_POST['assigneduid'],
                                'uname' => get_nickname($_POST['assigneduid']),
                                'addtime' => time(),
                                'adduname' => get_nickname(UID),
                                'adduid' => UID,
                                'roleid' => $roleid,
                            );
                            M('Takepart')->add($data4);
                        }
                    }
                    // 拆分完项目状态变为进行中 : LGW
                    $pt = M('Project')->where("pid=" . $pid)->find();
                    if ($pt['state'] == 0) {
                        $array = [];
                        $array['pid'] = $pid;
                        $array['state'] = Project::ONGOING;
                        $array['stime'] = time();
                        M('Project')->save($array);
                        $history = [];
                        $history[] = [
                            'field' => 'state',
                            'olddata' => Project::NOT_STARTED,
                            'newdata' => Project::ONGOING
                        ];
                        action_log_new(array('history' => $history, 'outtype' => 'ot_project', 'outkey' => $pid, 'pid' => $pid, 'action' => 'start', 'comment' => ''));
                    }
                    if (M('Milestone')->where(array('pid' => $pid, 'name' => '项目开始', 'etime' => 0, 'type' => 0))->find()) {
                        M('Milestone')->where(array('pid' => $pid, 'name' => '项目开始', 'etime' => 0, 'type' => 0))->save(array('completion' => 100, "etime" => time()));
                    }
                }
                workbreak_alter($paid);
                upBudget($pid);//成本预算
                $tid = M('task')->where('pid=' . $pid)->getfield('tid');
                updateprocess($tid);//更新项目进度
                $this->redirect('Execute/alter_view?pid=' . $pid . '&paid=' . $paid);
            } else {
                $this->error('编辑失败！');
            }
        } else {
            $this->assign("psids", $psid);
            //任务
            $service = M('ProjectService')->field(true)->where('psid=' . $psid)->order('sort_order desc')->find();
            //执行人
            // 标准服务求出服务模块下的服务角色 : LGW
            $module = M('module')->where('mid=' . $service['mid'])->getField('roles');
            $pm = '';
            if (empty($module)) {
                $did = M('Dept')->where('groupid=' . $service['groupid'])->getField('did');

                $dids = $this->get_son_ids($did);
                $pm = M('Member')->field('nickname,uid')->where('status=1 and dept in (' . $dids . ')')->select();
                if (empty($pm)) {
                    $pm = M('Member')->field('uid,nickname')->where('status = 1')->select();
                }
            } else {
                $modules = explode(',', $module);

                $didss = '';
                $where['_string'] = "1=1 and (";
                foreach ($modules as $k => $v) {
                    $k == 0 ? $con = '' : $con = 'or';
                    $where['_string'] .= $con . " CONCAT(',',d.groupids,',') like CONCAT('%,',$v,',%') ";
                }
                $where['_string'] .= ")";
                $did = M('Dept')->alias('d')->field('did')->where($where)->select();
                if (!empty($did)) {
                    foreach ($did as $k => $v) {
                        $didss .= $this->get_son_ids($v['did']) . ',';
                    }
                }
                $didss = trim($didss, ',');
                $didss = array_unique(explode(',', $didss));
                $didss = implode(',', $didss);
                $pm = M('Member')->field('nickname,uid')->where('status=1 and dept in (' . $didss . ')')->select();
                if (empty($pm)) {
                    $pm = M('Member')->field('uid,nickname')->where('status = 1')->select();
                }

            }

            $this->assign('pm', $pm);

            $arr = array();
            foreach ($pm as $key => $vo) {
                $arr[] = $vo['nickname'];
            }
            if (!in_array($service['assignedname'], $arr)) {
                $service['canyuren'] = $service['assignedname'];
            }
            $this->assign('s', $service);
            //审核人
            $sales = M('Member')->field('uid,nickname')->where('status = 1')->select();
            $this->assign('sales', $sales);
            $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
            $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');
            $root_mbx = array();
            $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
            $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
            $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectView/view?id=' . $pid));
            $root_mbx[] = array('title' => '执行', 'url' => U('Execute/task_index?id=' . $pid));
            $title = M('ProjectAlter')->where("paid=" . $paid)->getField('title');
            $root_mbx[] = array('title' => $title, 'url' => U('Execute/alter_view?pid=' . $pid . '&paid=' . $paid));
            $root_mbx[] = array('title' => '编辑任务', 'url' => '');
            $this->assign('from_url', $from_url);
            $this->assign('root_mbx', $root_mbx);
            $actionURL = strstr(__ACTION__, '/Admin');
            $this->assign('actionURL', $actionURL);
            $this->display();
        }
    }

    //上传文档
    public function alter_docadd()
    {
        if (IS_POST) {
            $id = I('post.pid', 0);
            $this->project_out($id);//判断项目是否可以操作
            $paid = I('post.paid', 0);
            if (empty($id)) {
                $this->error('请选择指定的项目');
            }
            $temp = "";
//        $num = count(array_filter($_FILES['files']['tmp_name']));
            $accessories = array_filter($_FILES['files']['tmp_name']);
            if (!empty($accessories)) {
                $file_ids = $this->file_uplode();
                if (!empty($file_ids)) {
                    $sql = 'insert into ot_doc (pid,fileid,paid,dtid,note,addtime,uid,uname,edittime,edituid,edituname) values  ';
                    foreach ($file_ids as $key => $vo) {
                        $dtid = $_POST['dtids'][$key];
                        $note = $_POST['contents'][$key];
                        $addtime = time();
                        $uid = UID;
                        $uname = get_nickname(UID) ? get_nickname(UID) : get_username(UID);
                        $sql .= "($id,$vo,$paid,$dtid,'" . $note . "',$addtime,$uid,'" . $uname . "',$addtime,$uid,'" . $uname . "'),";
                    }
                    $sql = substr($sql, 0, -1);
                    $temp = M('doc')->execute($sql);
                }
            }
            //网络资料
            $temp2 = "";
            $dtids = I('post.dtid');
            foreach ($dtids as $kk => $dt) {
                if ($_POST['url'][$kk]) {
                    //网络资料填写
                    $url = $_POST['url'][$kk];
                    $dtid = $dt;
                    $note = $_POST['content'][$kk];
                    $addtime = time();
                    $uid = UID;
                    $uname = get_nickname(UID) ? get_nickname(UID) : get_username(UID);
                    $urlname = $_POST['label'][$kk];
                    if (empty($urlname)) {
                        $this->error('网络资料标题名称不可为空');
                    }
                    $sql = 'insert into ot_doc (pid,fileid,paid,dtid,note,addtime,uid,uname,edittime,edituid,edituname,url,urlname) values ';
                    $sql .= "($id,0,$paid,$dtid,'" . $note . "',$addtime,$uid,'" . $uname . "',$addtime,$uid,'" . $uname . "','" . $url . "','" . $urlname . "'),";
                    $sql = substr($sql, 0, -1);
                    $temp2 = M('doc')->execute($sql);
                }
            }
            if ($temp || $temp2) {
                echo "<script>window.parent.choose();</script>";
            } else {
                $this->error('请添加上传文档或网络资料');
            }
        } else {
            $paid = I('get.paid', 0);
            $pid = I('get.pid', 0);
            $doc_type = M('DocType')->field('dtid,name')->order('sort_order asc')->select();
            $this->assign('doc_type', $doc_type);
            $this->assign('paid', $paid);
            $this->assign('pid', $pid);
            $this->display();
        }
    }

    //变更审批
    public function alter_pass()
    {
        $paid = I('paid', 0);
        $pid = I('pid', 0);
        if (empty($paid)) {
            $this->json_error("请选择要操作的数据", false);
            $this->json_error("请选择要操作的数据", false);
        }
        $doc = M('Doc')->where('paid=' . $paid)->count();
        if (empty($doc)) {
            $this->json_error("请上传文件");
        }
        if (M('ProjectAlter')->where('paid=' . $paid)->save(array('state' => 1)) !== false) {
            M('ProjectService')->where(array('paid' => $paid))->save(array('pastate' => 1));
            change_budget($pid);//成本预算
            $this->json_success('更新成功', false);

        } else {
            $this->json_error("审批失败", false);
        }
    }

    public function suc($message, $url1, $url2, $url3)
    {
        $this->assign('message', $message);// 提示信息
        // 成功操作后默认停留1秒
        $this->assign('waitSecond', '1');

        if (!empty($url1)) $this->assign('jumpUrl1', $url1);
        if (!empty($url2)) $this->assign('jumpUrl2', $url2);
        if (!empty($url3)) $this->assign('jumpUrl3', $url3);

        $this->display("suc");
    }

    /*项目启动*/
    public function alter_workbreak()
    {
        $id = I('id');
        $pid = I('post.pid');
        $paid = I('get.paid');
        if ($pid) {
            $this->project_out($pid);//判断项目是否可以操作
            $psids = $_POST['psids'];
            /*$tmep = M('Project')->field('breakdown')->find($pid);
              if ($tmep['breakdown'] == 1) {
              $this->json_error('项目已启动!', false);
              }*/
            if ($psids) {
                $where = " and psid in (" . $psids . ") and paid = " . $paid;
            } else {
                $where = " and 1=1 and paid = " . $paid;
            }
            $tmep1 = M('ProjectService')->where('pid=' . $pid . ' and state =0 ' . $where)->select();
            if (empty($tmep1)) {
                $this->json_error('项目没有未启动的任务!', false);
            }
            foreach ($tmep1 as $item) {
                if ($item['assigneduid'] == 0) {
                    $this->json_error('批量启动需保证所有任务都分配执行人!', false);
                } elseif ($item['petime'] == 0 || $item['pstime'] == 0) {
                    $this->json_error('批量启动需保证所有任务都分配计划开始和结束时间!', false);
                } elseif ($item['petime'] < $item['pstime']) {
                    $this->json_error('批量启动需保证所有任务计划结束时间不能大于计划开始时间!', false);
                }
                if (!is_numeric($item['days']) || $item['days'] <= 0) {
                    $this->json_error('有任务未填写周期', false);
                }
                /* if (!is_numeric($item['hours']) || $item['hours'] <= 0) {
                     $this->json_error('有任务未填写工时', false);
                 }*/
            }
            $Model = M(); // 实例化一个空对象
            $Model->startTrans(); // 开启事务

            $content = $_POST['content'];
            $pid = $_POST['pid'];
            $data = array();
            $data['pid'] = $pid;
            $data['breakdown'] = 1;
            $tmp = M('Project')->save($data);

            M('ProjectService')->where('pid=' . $pid . ' and state =0 ' . $where)->save(array('op_text' => ''));

            /*Insert into Table2(a, c, d) select a,c,5 from Table1*/
            $addtime = time();
            $uid = UID;
            $a = 1;
            $uname = get_nickname(is_login()) ? get_nickname(is_login()) : get_username(is_login());
            $sql = "insert into ot_task(pid,psid,pcid,groupid,sid,mid,title,description,
assigneduid,assignedname,pstime,petime,days,hours,checkuid,checkuname,delivery,amount,state,uid,uname,addtime,manageruid,manageruname,assignedtime) select pid,psid,pcid,groupid,sid,mid,title,description,
assigneduid,assignedname,pstime,petime,days,hours,checkuid,checkuname,delivery,amount," . $a . "," . $uid . ",'" . $uname . "'," . $addtime . "," . $uid . ",'" . $uname . "'," . $addtime . " from ot_project_service where state=0 and pid = " . $pid . $where;
            $tmp2 = M()->execute($sql);
            $tmp1 = M('ProjectService')->where('pid=' . $pid . $where)->setField('state', 1);
            update_project($pid);
            /*$history = array();
              $history [0] = array(
              'field' => 'breakdown',
              'olddata' => $tmep['state'],
              'newdata' => 1
              );*/
            /*'history' => $history,*/
            action_log_new(array('outtype' => 'ot_project', 'outkey' => $pid, 'pid' => $pid, 'action' => 'break', 'comment' => $content));
            // 拆分完项目状态变为进行中 : LGW
            $pt = M('Project')->where("pid=" . $pid)->find();
            if ($pt['state'] == 0) {
                $array = [];
                $array['pid'] = $pid;
                $array['state'] = Project::ONGOING;
                $array['stime'] = time();
                M('Project')->save($array);
                $history = [];
                $history[] = [
                    'field' => 'state',
                    'olddata' => Project::NOT_STARTED,
                    'newdata' => Project::ONGOING
                ];
                action_log_new(array('history' => $history, 'outtype' => 'ot_project', 'outkey' => $pid, 'pid' => $pid, 'action' => 'start', 'comment' => $content));
            }

            $task = M('Task')->alias('t')
                ->field('t.*,s.milestone,m.mid mmid')
                ->join('ot_project_service s on t.psid=s.psid')
                ->join('ot_milestone m on m.tid=t.tid', 'left')
                ->where('t.pid=' . $pid . ' and sign=0')->select();
            $groupid = array();
            foreach ($task as $k => $vo) {
                $groupid[] = $vo['groupid'];
                action_log_new(array('outtype' => 'ot_task', 'outkey' => $vo['tid'], 'action' => 'create', 'comment' => ''));
                $taskmod = M("Task");
                $task1 = $taskmod->alias('t')
                    ->field("t.*,p.name as pname,pmuid")
                    ->join('ot_project p on t.pid = p.pid', 'LEFT')
                    ->where("t.tid='{$vo['tid']}' and t.deleted=0")->find();

                // 发给执行人 时间点：任务启动  LGW
                $dynamic = [
                    'a' => $task1['assignedname'],               // 执行人
                    'b' => $task1['title'],                      // 任务名称
                    'c' => $task1['pname'],                      // 项目名称
                    'email' => get_email($task1['assigneduid']),
                ];
                $url = 'Task/view/id/'.$vo['tid'];
                $cost = sendTemplate($dynamic, 'task_new',$url);
                apiRead(Api::S_SEND, Api::DXY_S, $cost);  // 发给执行人 : LGW
                M('Task')->save(array('tid' => $vo['tid'], 'sign' => 1));
            }
            upBudget($pid);//成本预算
            $tid = M('task')->where('pid=' . $pid)->getfield('tid');
            updateprocess($tid);//更新项目进度
            //去掉重复的数据
            $len = count($task);
            for ($i = 0; $i < $len - 1; $i++) {
                for ($j = 0; $j < $len - 1 - $i; $j++) {
                    if ($task[$j]['assigneduid'] == $task[$j + 1]['assigneduid']) {
                        unset($task[$j]);
                    }
                }
            }
            foreach ($task as $k => $vo) {
                $roleid = M('ProjectRole')->where("name='项目执行'")->getfield('prid');
                if ($roleid) {
                    $tmp4 = M('Takepart')->field('tpid')->where('uid=' . $vo['assigneduid'] . ' and roleid = ' . $roleid . ' and pid = ' . $pid)->find();
                    if (empty($tmp4['tpid'])) {
                        if ($vo['assigneduid'] && $vo['assignedname']) {
                            $data4 = array(
                                'pid' => $pid,
                                'uid' => $vo['assigneduid'],
                                'uname' => get_nickname($vo['assigneduid']) ? get_nickname($vo['assigneduid']) : get_username($vo['assigneduid']),
                                'addtime' => time(),
                                'adduname' => get_nickname(UID),
                                'adduid' => UID,
                                'roleid' => $roleid,
                            );
                            M('Takepart')->add($data4);
                        }
                    }
                }
            }
            if (M('Milestone')->where(array('pid' => $pid, 'name' => '项目开始', 'etime' => 0, 'type' => 0))->find()) {
                M('Milestone')->where(array('pid' => $pid, 'name' => '项目开始', 'etime' => 0, 'type' => 0))->save(array('completion' => 100, "etime" => time()));
            }
            if ($tmp !== false && $tmp1 !== false && $tmp2) {
                $Model->commit(); // 成功则提交事务
                $this->ajaxReturn(array('done' => true, 'msg' => '成功'));
            } else {
                $Model->rollback(); // 否则将事务回滚
                $this->json_error('操作失败!', false);
            }

        } else {
            if (!$id) {
                $this->error('请选择要操作的数据！', 'javascript:window.parent.choose();');
            }
            $this->assign('pid', $id);
            $this->display();
        }
    }

    //质量首页
    public function bug_index()
    {
        $this->assign('actionName', 'execute');
        $this->assign('actname', 'bug_index');
        $pid = I('get.pid');
        if (empty($pid)) {
            $this->error('项目不存在');
        }

        $project = M('project')->alias('p')->field('p.name,p.state,p.pid,d1.d_key as sname')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')->where(array('p.pid' => $pid))->find();
        if (empty($project)) {
            $this->error('项目不存在或已删除！');
        }
        $this->assign('p', $project);
        $this->assign('pid', $pid);
        $actionURL = strstr(__ACTION__, '/Admin');
        $config = array(
            "actionURL" => $actionURL,
            "operators" => array("=" => "=", "!=" => "!=", ">" => ">", ">=" => ">=", "<" => "<", "<=" => "<=", "include" => "包含"),
            "params" => array(0 => array('str' => '项目名称', 'fieldname' => 'p.name', 'operator' => 'include', 'control' => 'input', 'values' => '')
            , 1 => array('str' => '任务名称', 'fieldname' => 't.title', 'operator' => 'include', 'control' => 'input', 'values' => '')
            , 2 => array('str' => '主题', 'fieldname' => 'b.title', 'operator' => 'include', 'control' => 'input', 'values' => '')
            , 3 => array('str' => '状态', 'fieldname' => 'b.state', 'operator' => '=', 'control' => 'select', 'values' => array())
            , 4 => array('str' => '添加人', 'fieldname' => 'b.uname', 'operator' => 'include', 'control' => 'input', 'values' => '')
            , 5 => array('str' => '添加时间', 'fieldname' => 'b.addtime', 'operator' => '=', 'control' => 'input', 'values' => "", "class" => "date")
            , 6 => array('str' => '被指派人', 'fieldname' => 'b.assignedname', 'operator' => 'include', 'control' => 'input', 'values' => '')
            , 7 => array('str' => '开始时间', 'fieldname' => 'b.pstime', 'operator' => '=', 'control' => 'input', 'values' => "", "class" => "date")
            , 8 => array('str' => '完成时间', 'fieldname' => 'b.petime', 'operator' => '=', 'control' => 'input', 'values' => "", "class" => "date")
            , 9 => array('str' => '分派人', 'fieldname' => 'b.manageruname', 'operator' => 'include', 'control' => 'input', 'values' => '')
            , 10 => array('str' => '跟踪', 'fieldname' => 'b.type', 'operator' => '=', 'control' => 'select', 'values' => array())
            )
        );
        if ($config && $config['params']) {
            $dictionary = M('dictionary'); // 字典
            // 状态
            $problemTypes = $dictionary->where("d_code = 'bug_type'")->field(true)->select();
            // 跟踪
            $traces = $dictionary->where("d_code = 'trace_type'")->field(true)->select();
            $mstates = array("" => "");
            $tstates = array("" => "");
            if ($problemTypes) {
                foreach ($problemTypes as $v) {
                    $mstates[$v['d_value']] = $v['d_key'];
                }
            }
            if ($traces) {
                foreach ($traces as $v) {
                    $tstates[$v['d_value']] = $v['d_key'];
                }
            }
            $config['params'][3]['values'] = $mstates;
            $config['params'][10]['values'] = $tstates;

        }
        $this->setSearchConfig($config);
        //更新排序
        if (isset($_GET['sort']) && isset($_GET['order'])) {
            $sort = strtolower(trim($_GET['sort']));
            $order = strtolower(trim($_GET['order']));
            if (!in_array($order, array('asc', 'desc'))) {
                $sort = 'b.addtime';
                $order = 'desc';
            }
        } else {
            $sort = 'b.addtime desc,';
            $order = 'b.addtime desc';
        }
        //查询条件
        $where = $this->getCondition();
        $where['_string'] .= " and b.pid = {$pid}";
        $count = M('Bug')
            ->alias('b')
            ->where($where)->count();
        $page = new \Think\Page($count, 20);
        $Bugs = M('Bug')
            ->field('b.*,t.title as task')
            ->alias('b')
            ->join('ot_task t on t.tid=b.tid', 'LEFT')
            ->where($where)
            ->order($sort . " " . $order)
            ->limit($page->firstRow . ',' . $page->listRows)
            ->select();

        foreach ($Bugs as $k => $v) {
            $v['state'] = Bug::$projectState[$v['state']];
            $Bugs[$k] = $v;
        }
        $page->setConfig('theme', '%FIRST% %UP_PAGE% %LINK_PAGE% %DOWN_PAGE% %END% %HEADER%');
        $this->assign('_page', $page->show());
        $this->assign('_list', $Bugs);
        $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
        $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');
        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
        $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectView/view?id=' . $pid));
        $root_mbx[] = array('title' => '执行', 'url' => U('Execute/task_index?id=' . $pid));
        $root_mbx[] = array('title' => '质量', 'url' => '');
        $this->assign('from_url', $from_url);
        $this->assign('root_mbx', $root_mbx);
        $actionURL = strstr(__ACTION__, '/Admin');
        $this->assign('actionURL', $actionURL);
        $this->display();
    }

    /**
     * 新建问题
     */
    public function bug_add()
    {
        $this->assign('actionName', 'execute');
        $this->assign('actname', 'bug_index');
        $pid = I('get.pid');
        if (empty($pid)) {
            $this->error('项目不存在');
        }

        $project = M('project')->alias('p')->field('p.name,p.state,p.pid,d1.d_key as sname')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')->where(array('p.pid' => $pid))->find();
        if (empty($project)) {
            $this->error('项目不存在或已删除！');
        }
        $this->assign('p', $project);
        $this->assign('pid', $pid);
        if (IS_POST) {
            //获取表单数据
            $data = $_POST;
            $this->validation();  // 验证数据是否为空

            $tag = $data['tag'];
            if (is_array($tag) && !empty($tag)) {
                $tag = implode(',', $tag);
            } else {
                $tag = '';
            }
            $partin = $data['partin'];
            if (is_array($partin) && !empty($partin)) {
                $partin = implode(',', $partin);
            } else {
                $partin = '';
            }
            $state = $data['state'];

            $data1 = [
                'pid' => $pid,
                'tid' => $data['tid'],
                'title' => $data['title'],
                'state' => $state,
                'description' => $data['description'],
                'addtime' => time(),
                'uid' => UID,
                'uname' => get_nickname(UID) ? get_nickname(UID) : get_username(UID),
                'assignedtime' => time(),
                'assigneduid' => $data['assigneduid'],
                'assignedname' => get_nickname($data['assigneduid']) ? get_nickname($data['assigneduid']) : get_username($data['assigneduid']),
                'pstime' => strtotime($data['pstime']),
                'petime' => strtotime($data['petime']),
                'hours' => $data['hours'],
                'level' => $data['level'],
                'manageruid' => UID,
                'manageruname' => get_nickname(UID) ? get_nickname(UID) : get_username(UID),
                'progress' => $state == Bug::RESOLVED ? 100 : $data['progress'],
                'version' => $data['version'],
                'partin' => $partin,
                'type' => $data['type'],
                'env' => $data['env'],
                'tag' => $tag,
            ];
            if ($state == Bug::CLOSE) {
                $data1['closeuid'] = UID;
                $data1['closeuname'] = get_nickname(UID) ? get_nickname(UID) : get_username(UID);
                $data1['closetime'] = time();
            }
            $Model = M(); // 实例化一个空对象
            $Model->startTrans(); // 开启事务
            $result = M('Bug')->add($data1);
            $tmp1 = true;
            if ($result) {
                $accessories = array_filter($_FILES['files']['tmp_name']);
                if (!empty($accessories)) {
                    $file_ids = $this->file_uplode();
                    if (!empty($file_ids)) {
                        $sql = 'insert into ot_bug_file (bugid,fileid) values ';
                        foreach ($file_ids as $key => $vo) {

                            $sql .= "($result,$vo),";
                        }
                        $sql = substr($sql, 0, -1);
                        $tmp1 = $Model->execute($sql);
                    }
                }
            }
            if (!empty($result) && !empty($tmp1)) {
                action_log_new(array('outtype' => 'ot_bug', 'outkey' => $result, 'pid' => $data1['pid'], 'action' => 'create', 'comment' => ''));
                $logs = $this->getLogs('ot_bug', $result, 'create');          // 操作记录   创建
                $p = M('project')->alias('p')
                    ->field('p.name')
                    ->where("p.pid='{$data['pid']}'")
                    ->find();
                // 发给创建人/被指派人/跟踪者 时间点：创建bug  LGW
                $dynamic = [
                    'a' => $p['name'],                                  // 项目名称
                    'b' => $data['title'],                              // bug名称
                    'c' => get_nickname(UID) ? get_nickname(UID) : get_username(UID),                              // bug名称
                ];
                $url = 'ProjectEstablish/view/id/'.$result;
                // 跟踪者
                $partins = $data['partin'];
                if (!empty($partins)) {
                    foreach ($partins as $k => $v) {
                        $dynamic['email'] = get_email($v);
                        $cost3 = sendTemplate($dynamic, 'add_bug',$url);
                        $cost3['data'] .= $logs;
                        apiRead(Api::S_SEND, Api::DXY_S, $cost3); // 发给跟踪者
                    }
                }
                // 创建人
                $dynamic['email'] = get_email(UID);
                $cost1 = sendTemplate($dynamic, 'add_bug',$url);
                // 被指派人
                $dynamic['email'] = get_email($data['assigneduid']);
                $cost2 = sendTemplate($dynamic, 'add_bug',$url);
                $cost1['data'] .= $logs;
                $cost2['data'] .= $logs;
                apiRead(Api::S_SEND, Api::DXY_S, $cost1); // 发给创建人 : LGW
                apiRead(Api::S_SEND, Api::DXY_S, $cost2); // 发给被指派人

                $Model->commit(); // 成功则提交事务
                $this->redirect('admin/Execute/bug_index', array('pid' => $pid));

            } else {
                $Model->rollback(); // 否则将事务回滚
                $this->error('新建问题失败！');
            }

        } else {
            $this->fetchData();
            $this->meta_title = '创建测试';

            $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
            $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');
            $root_mbx = array();
            $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
            $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
            $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectView/view?id=' . $pid));
            $root_mbx[] = array('title' => '执行', 'url' => U('Execute/task_index?id=' . $pid));
            $root_mbx[] = array('title' => '质量', 'url' => '');
            $this->assign('from_url', $from_url);
            $this->assign('root_mbx', $root_mbx);
            $actionURL = strstr(__ACTION__, '/Admin');
            $this->assign('actionURL', $actionURL);
            $this->assign('time', date('Y/m/d'));
            $this->display();
        }
    }

    public function validation()
    {
        // 获取报检编码并判断是不是唯一
        if (empty ($_GET['pid'])) {
            $this->error('请填写项目名称，不能为空');
        }
        if (empty ($_POST ['type'])) {
            $this->error('请填写跟踪，不能为空');
        }
        if (empty ($_POST ['title'])) {
            $this->error('请填写主题，不能为空');
        }
        if ($_POST ['state'] < 0) {
            $this->error('请填写状态，不能为空');
        }
        if (!is_numeric($_POST['hours'])) {
            $this->error('预期时间只能为数字');
        }
        $pstime = strtotime($_POST['pstime']);
        $petime = strtotime($_POST['petime']);
        if (empty ($pstime)) {
            $this->error('开始日期不能为空');
        }
        if (empty ($petime)) {
            $this->error('完成日期不能为空');
        }
        if ($petime < $pstime) {
            $this->error('完成日期必须大于开始日期');
        }
    }

    /*
    * 取到数据 添加和编辑通用
    */
    public function fetchData()
    {
        $sort = ['order' => 'd_order desc'];
        $dictionary = M('dictionary'); // 字典
        $finished = Project::FINISHED; // 已完成
        $close = Project::CLOSE;       // 已结束
        // 项目
        $where['_string'] = "1=1 and p.state !=$finished and p.state !=$close ";
        $where['_string'] .= " and (EXISTS(select 1 from ot_takepart tp where tp.pid = p.pid and tp.uid=" . UID . ")
			or EXISTS(select 1 from ot_task t where t.pid = p.pid and t.assigneduid=" . UID . ")) and p.del = 0 ";

        $pro = M('Project')
            ->field('p.pid,p.name')
            ->alias('p')
            ->where($where)
            ->order('p.addtime desc')
            ->select();

        // 跟踪
        $traces = $dictionary->where("d_code = 'trace_type'")->field(true)->select($sort);
        // 新建测试的状态
        $problemTypes = $dictionary->where("d_code = 'bug_type'")->field(true)->select($sort);
        // 优先级
        $prioritys = $dictionary->where("d_code = 'priority_type'")->field(true)->select($sort);
        // 指派人
        $user = M('Ucenter_member')
            ->field('m.id,me.nickname')
            ->join('ot_member me on m.id=me.uid', 'INNER')
            ->alias('m')
            ->select();

        // 类别
        $genres = $dictionary->where("d_code = 'genre_type'")->field(true)->select($sort);

        // Bug标签
        $bugTag = $dictionary->where("d_code = 'bug_tag'")->field(true)->select($sort);

        $this->assign('assigneds', $user);
        $this->assign('items', $pro);
        $this->assign('bugTag', $bugTag);
        $this->assign('genres', $genres);
        $this->assign('prioritys', $prioritys);
        $this->assign('traces', $traces);
        $this->assign('problemTypes', $problemTypes);

        $this->assign('uid', UID);
        $uanme = get_nickname(UID) ? get_nickname(UID) : get_username(UID);
        $this->assign('uanme', $uanme);

    }

    /**
     *  问题详情
     */
    public function bug_edit()
    {
        $this->assign('actionName', 'execute');
        $this->assign('actname', 'bug_index');
        $pid = I('get.pid');
        if (empty($pid)) {
            $this->error('项目不存在');
        }

        $project = M('project')->alias('p')->field('p.name,p.state,p.pid,d1.d_key as sname')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')->where(array('p.pid' => $pid))->find();
        if (empty($project)) {
            $this->error('项目不存在或已删除！');
        }
        $this->assign('p', $project);
        $this->assign('pid', $pid);
        if (IS_POST) {
            //获取表单数据
            $data = $_POST;
            $bugId = $data['bugid'];
            $this->validation();  // 验证数据是否为空

            $tag = $data['tag'];
            if (is_array($tag) && !empty($tag)) {
                $tag = implode(',', $tag);
            } else {
                $tag = '';
            }
            $partin = $data['partin'];
            if (is_array($partin) && !empty($partin)) {
                $partin = implode(',', $partin);
            } else {
                $partin = '';
            }
            $state = $data['state'];
            $finishhours = $data['finishhours'];
            $this->project_out($data['pid']);//判断项目是否可以操作
            $data1 = [
                'pid' => $data['pid'],
                'tid' => $data['tid'],
                'title' => $data['title'],
                'state' => $state,
                'description' => $data['description'],
                //'uid' => UID,
                //'uname' => get_nickname(UID) ? get_nickname(UID) : get_username(UID),
                'assigneduid' => $data['assigneduid'],
                'assignedname' => get_nickname($data['assigneduid']) ? get_nickname($data['assigneduid']) : get_username($data['assigneduid']),
                'pstime' => strtotime($data['pstime']),
                'petime' => strtotime($data['petime']),
                'hours' => $data['hours'],
                'level' => $data['level'],
                'manageruid' => UID,
                'manageruname' => get_nickname(UID) ? get_nickname(UID) : get_username(UID),
                'progress' => $data['progress'],
                'version' => $data['version'],
                'partin' => $partin,
                'type' => $data['type'],
                'env' => $data['env'],
                'tag' => $tag,
            ];
            // 关闭
            if ($state == Bug::CLOSE) {
                $data1['closeuid'] = UID;
                $data1['closeuname'] = get_nickname(UID) ? get_nickname(UID) : get_username(UID);
                $data1['closetime'] = time();
            }
            $comment = '';
            $tmp2 = true;
            $map['bugid'] = $bugId;
            $dataOrigin = M('Bug')->where($map)->find();
            // 如果从已解决变为其他则完成度为0
            if ($dataOrigin['state'] == Bug::RESOLVED && $state != Bug::RESOLVED) {
                $data1['progress'] = 0;
            }
            // 如果从其他变为已解决则完成度为100
            if ($dataOrigin['state'] != Bug::RESOLVED && $state == Bug::RESOLVED) {
                $data1['progress'] = 100;
            }
            // 如果添加了完成工时并且当前状态是已解决，原状态是进行中则更新预算
            if ($finishhours > 0.0 && $state == Bug::RESOLVED && $dataOrigin['state'] == Bug::ONGOING) {
                $data1['finishhours'] = $finishhours;
                $data1['finishuid'] = UID;
                $data1['finishuname'] = get_nickname(UID) ? get_nickname(UID) : get_username(UID);
                $data1['finishtime'] = time();
                $comment = "完成工时:" . $finishhours . "h";
                // 更新预算
                // 写入
                $pid = $dataOrigin['pid'];
                $data2 = [
                    'finishuid' => UID,
                    'finishhours' => $finishhours,
                ];
                $this->bugHours($dataOrigin['bugid'], $data2, $pid);
            }
            $Model = M(); // 实例化一个空对象
            $Model->startTrans(); // 开启事务
            $tmp1 = true;
            $result = M('Bug')->where($map)->save($data1);
            $history = [];
            foreach ($data1 as $k => $vo) {
                if ($vo != $dataOrigin[$k]) {
                    $history[] = array(
                        'field' => $k,
                        'olddata' => $dataOrigin[$k],
                        'newdata' => $vo
                    );
                }
            }
            $accessories = array_filter($_FILES['files']['tmp_name']);
            if (!empty($accessories)) {
                $file_ids = $this->file_uplode();
                if (!empty($file_ids)) {
                    $sql = 'insert into ot_bug_file (bugid,fileid) values ';
                    foreach ($file_ids as $key => $vo) {

                        $sql .= "($bugId,$vo),";
                    }
                    $sql = substr($sql, 0, -1);
                    $tmp1 = $Model->execute($sql);
                }
            }

            if (!empty($tmp1) && $tmp2) {
                if ($state == Bug::RESOLVED) {
                    $action = 'finish';
                    $type1 ='finish_bug';
                } else {
                    $action = 'edit';
                    $type1 ='edit_bug';
                }
                action_log_new(array('history' => $history, 'outtype' => 'ot_bug', 'pid' => $data['pid'], 'outkey' => $data['bugid'], 'action' =>$action, 'comment' => $comment));
                $logs = $this->getLogs('ot_bug', $data['bugid'], $action);       // 操作记录 编辑
                $p = M('project')->alias('p')
                    ->field('p.name')
                    ->where("p.pid='{$data['pid']}'")
                    ->find();
                // 发给创建人/被指派人/跟踪者 时间点：创建bug  LGW
                $dynamic = [
                    'a' => $p['name'],                                  // 项目名称
                    'b' => $data['title'],                              // bug名称
                ];
                $url = 'ProjectEstablish/view/id/'.$bugId;
                // 跟踪者
                $partins = $data['partin'];
                if (!empty($partins)) {
                    foreach ($partins as $k => $v) {
                        $dynamic['email'] = get_email($v);
                        $cost3 = sendTemplate($dynamic, $type1,$url);
                        $cost3['data'] .= $logs;
                        apiRead(Api::S_SEND, Api::DXY_S, $cost3); // 发给跟踪者
                    }
                }
                // 创建人
                $dynamic['email'] = get_email(UID);
                $cost1 = sendTemplate($dynamic, $type1,$url);
                // 被指派人
                $dynamic['email'] = get_email($data['assigneduid']);
                $cost2 = sendTemplate($dynamic, $type1,$url);
                $cost1['data'] .= $logs;
                $cost2['data'] .= $logs;
                apiRead(Api::S_SEND, Api::DXY_S, $cost1); // 发给创建人 : LGW
                apiRead(Api::S_SEND, Api::DXY_S, $cost2); // 发给被指派人
                $Model->commit(); // 成功则提交事务
                $this->redirect('admin/Execute/bug_view', array('id' => $dataOrigin['bugid'], 'pid' => $pid));
            } else {
                $Model->rollback(); // 否则将事务回滚
                $this->error('编辑问题失败！');
            }
        } else {
            $map = [];
            $bugid = I('get.bugid');
            $map['b.bugid'] = $bugid;
            $list = M('bug')->alias('b')
                ->field('b.*,t.title as task,p.name')
                ->alias('b')
                ->join('ot_project p on p.pid=b.pid', 'INNER')
                ->join('ot_task t on t.tid=b.tid', 'LEFT')
                ->where($map)
                ->find();
            $con = $list['tag'];
            if ($con) {
                $this->assign('con', $con);
            }

            // tag
            $tags = explode(',', $list['tag']);
            $this->assign('tags', $tags);
            // 版本
            $where1['p.pid'] = $list['pid'];

            $version = M("Project")
                ->alias('p')
                ->field('p.version')
                ->where($where1)
                ->find();

            $version = explode(',', $version['version']);
            $this->assign('versions', $version);

            $where['t.pid'] = $list['pid'];


            // 跟踪者
            $partins = M("takepart")
                ->alias('t')
                ->field('distinct(t.uname),t.uid')
                ->where($where)
                ->order('t.addtime desc')
                ->select();

            $list['partin'] = explode(',', $list['partin']);

            foreach ($partins as $key => $val) {
                $val['being'] = 0;
                foreach ($list['partin'] as $k => $v) {
                    if ($v == $val['uid']) {
                        $val['being'] = 1;
                    }
                    $partins[$key] = $val;
                }

            }

            $this->assign('partins', $partins);

            $this->fetchData();

            $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
            $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');
            $root_mbx = array();
            $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
            $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
            $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectView/view?id=' . $pid));
            $root_mbx[] = array('title' => '执行', 'url' => U('Execute/task_index?id=' . $pid));
            $root_mbx[] = array('title' => '质量', 'url' => '');
            $this->assign('from_url', $from_url);
            $this->assign('root_mbx', $root_mbx);
            $actionURL = strstr(__ACTION__, '/Admin');
            $this->assign('actionURL', $actionURL);
            $this->assign('list', $list);
            $this->display();
        }
    }

    /**
     * 记录工时表更新发生金额 : LGW
     *
     * @param $bugId  问题id
     * @param $data   完成时的信息
     * @param $pid    项目id
     */
    public function bugHours($bugId, $data, $pid)
    {
        $hourList = [
            'bugid' => $bugId,
            'uid' => $data['finishuid'],
            'hours' => $data['finishhours'],
            'addtime' => time(),
        ];
        M('Bug_hours')->add($hourList);

        $map['pid'] = $pid;
        $map['outitem'] = '项目质量';
        $bugGet = M('Projectbudget')->alias('p')->where($map)->find();
        $bugGet ? $this->updateProjectCost($pid) : $this->addProjectCost($pid);
    }

    // 添加项目预算 : LGW
    public function addProjectCost($pid)
    {
        $list = D('Bug')->individualPrice($pid);

        $data = [
            'type1' => '预算外',
            'type' => '人力成本',
            'outitem' => '项目质量',
            'outid' => '10000',
            'cost' => $list['amount'], // 发生
            'finishours' => $list['finishours'],
            'chours' => $list['hours'],
            'addtime' => time(),
            'uid' => UID,
            'uname' => get_nickname(UID) ? get_nickname(UID) : get_username(UID),
            'pid' => $pid,
            'updatetime' => time(),
        ];
        M('Projectbudget')->add($data);
        // 更新项目
        update_project($pid);
    }

    /**
     *  问题详情
     */
    public function bug_view()
    {
        $this->assign('actionName', 'execute');
        $this->assign('actname', 'bug_index');
        $pid = I('get.pid');
        if (empty($pid)) {
            $this->error('项目不存在');
        }

        $project = M('project')->alias('p')->field('p.name,p.state,p.pid,d1.d_key as sname')
            ->join('ot_dictionary d1 on p.state = d1.d_value and d1.d_code=\'project_state\'', 'LEFT')->where(array('p.pid' => $pid))->find();
        if (empty($project)) {
            $this->error('项目不存在或已删除！');
        }
        $this->assign('p', $project);
        $this->assign('pid', $pid);
        $map = [];
        $bugId = I('get.id');
        $map['b.bugid'] = $bugId;
        $map['d.d_code'] = 'bug_type';
        $map['d1.d_code'] = 'priority_type';
        $list = M('bug')->alias('b')
            ->field('b.*,t.title as task,p.name,d.d_key,d1.d_key as level')
            ->alias('b')
            ->join('ot_project p on p.pid = b.pid', 'INNER')
            ->join('ot_task t on t.tid = b.tid', 'LEFT')
            ->join('ot_dictionary d on b.state = d.d_value', 'LEFT')
            ->join('ot_dictionary d1 on b.level = d1.d_value', 'LEFT')
            ->where($map)
            ->find();
        $where['bugid'] = $bugId;
        $doc = M('File')->alias('f')
            ->field('f.*,f.name as dname,f.ext as tname')
            ->join('ot_bug_file bf on bf.fileid = f.fileid', 'LEFT')
            ->where($where)
            ->select();

        $this->assign('doc', $doc);
        // 操作记录
        $logs = M("Log")->where(array("outtype" => "ot_bug", "outkey" => $bugId))->order("addtime asc")->select();
        if ($logs) {
            foreach ($logs as $k => $v) {
                $hs = M("History")->where("logid='{$v['logid']}'")->select();
                if ($hs) {
                    $mod = M("Dictionary");
                    foreach ($hs as $kk => $vv) {
                        $hs[$kk]['fname'] = tf_name("ot_bug", $vv['field']);
                        switch ($vv['field']) {
                            case "cid":
                                $oldtemp = M("Customer")->where("cid='{$vv['olddata']}'")->find();
                                if ($oldtemp) {
                                    $olddata = $oldtemp['name'];
                                }
                                if ($olddata) {
                                    $hs[$kk]['olddata'] = $olddata;
                                }

                                $newtemp = M("Customer")->where("cid='{$vv['newdata']}'")->find();
                                if ($newtemp) {
                                    $newdata = $newtemp['name'];
                                }
                                if ($newdata) {
                                    $hs[$kk]['newdata'] = $newdata;
                                }

                                break;
                            case "pstime":
                            case "petime":
                            case "livetime":
                            case "addtime":
                            case "assignedtime":
                            case "finishtime":
                                $hs[$kk]['olddata'] and $hs[$kk]['olddata'] = date('Y/m/d H:i', $hs[$kk]['olddata']);
                                $hs[$kk]['newdata'] = date('Y/m/d H:i', $hs[$kk]['newdata']);
                                break;
                            case "state":

                                $orow = $mod->field("d_key")->where("d_code='bug_type' and d_value='{$vv['olddata']}'")->find();
                                if ($orow) {
                                    $hs[$kk]['olddata'] = $orow["d_key"];
                                }
                                $nrow = $mod->field("d_key")->where("d_code='bug_type' and d_value='{$vv['newdata']}'")->find();
                                if ($orow) {
                                    $hs[$kk]['newdata'] = $nrow["d_key"];
                                }
                                break;
                            case "level";
                                $orow = $mod->field("d_key")->where("d_code='priority_type' and d_value='{$vv['olddata']}'")->find();
                                if ($orow) {
                                    $hs[$kk]['olddata'] = $orow["d_key"];
                                }
                                $nrow = $mod->field("d_key")->where("d_code='priority_type' and d_value='{$vv['newdata']}'")->find();
                                if ($nrow) {
                                    $hs[$kk]['newdata'] = $nrow["d_key"];
                                }
                                break;
                        }
                    }

                    $logs[$k]['hs'] = $hs;
                }
            }
        }

        $pid = $list['pid'];
        $partin = $list['partin'];

        //跟踪者
        $tplist = M("takepart")
            ->alias('t')
            ->where("pid=$pid and uid in ($partin)")
            ->join('ot_project_role pr on t.roleid=pr.prid', 'left')
            ->join('ot_ucenter_member m on m.id=t.uid', 'left')
            ->field(array('t.uname', 't.addtime', 't.adduname', 'pr.name as  title', 'm.mobile'))
            ->order('addtime desc')
            ->select();
        $this->assign('tplist', $tplist);

        $this->assign('logs', $logs);

        $from_route = Cookie('__from_route__') ? Cookie('__from_route__') : '我的项目';
        $from_url = Cookie('__from_url__') ? Cookie('__from_url__') : U('ProjectNew/index');
        $root_mbx = array();
        $root_mbx[] = array('title' => '项目', 'url' => U('ProjectNew/index'));
        $root_mbx[] = array('title' => $from_route, 'url' => $from_url);
        $root_mbx[] = array('title' => $project['name'], 'url' => U('ProjectView/view?id=' . $pid));
        $root_mbx[] = array('title' => '执行', 'url' => U('Execute/task_index?id=' . $pid));
        $root_mbx[] = array('title' => '质量', 'url' => '');
        $this->assign('from_url', $from_url);
        $this->assign('root_mbx', $root_mbx);
        $actionURL = strstr(__ACTION__, '/Admin');
        $this->assign('actionURL', $actionURL);
        $this->assign('list', $list);
        $this->display();

    }

    // 指派执行人
    public function alter_executor()
    {
        if (IS_POST) {
            $psids = I('post.psids');
            if (empty($psids)) {
                $this->error('请选择要执行的任务');
            }
            $toid = I("post.toid", '');
            if (empty($toid)) {
                $this->error('执行不能为空');
            }
            $c1 = "psid in ($psids)";
            $map['_string'] = "(($c1))";
            $pService = M('ProjectService')->field('title,state,pid')->where($map)->select();
            $this->project_out($pService['pid']);//判断项目是否可以操作
            $states1 = '';
            foreach ($pService as $k => $v) {
                if ($v['state'] == 1) {
                    $states1 .= "任务『 " . $v['title'] . '』 已启动不能指派执行人' . '<br>';  // LGW
                }
            }
            if ($states1 != '') {
                $this->error($states1, 'javascript:window.parent.choose2();');
            }


            $name = get_nickname($toid) ? get_nickname($toid) : get_username($toid);
            $psids = explode(',', $psids);
            $data = [
                'assigneduid' => $toid,
                'assignedname' => $name
            ];
            foreach ($psids as $k => $v) {
                $map = [];
                $map['psid'] = $v;
                M('ProjectService')->where($map)->save($data);
            }
            $this->success('操作成功！', 'javascript:window.parent.choose1();');
        } else {

            $this->display();
        }
    }

    /**
     * 获取操作记录
     *
     * @param $type
     * @param $id
     * @param $action
     *
     * @return string
     */
    public function getLogs($type, $id, $action)
    {
        $map = [];
        $map['outtype'] = $type;
        $map['outkey'] = $id;
        $map['action'] = $action;
        $logs = M("Log")
            ->field('logid,addtime,uname,action')
            ->where($map)
            ->order("addtime desc")
            ->find();
        $title = '';
        $content = '';
        if ($logs) {
            $addTime = date("Y-m-d H:i", $logs['addtime']);
            $action = ac_name($logs['action']);
            $title = ' ' . $addTime . '，由 ' . $logs['uname'] . ' ' . $action . '。';
            $hs = M("History")->where("logid='{$logs['logid']}'")->select();
            if ($hs) {
                $mod = M("Dictionary");
                foreach ($hs as $kk => $vv) {
                    $fname = tf_name($type, $vv['field']);
                    $olddata = $vv['olddata'];
                    $newdata = $vv['newdata'];
                    switch ($vv['field']) {
                        case "cid":
                            $oldtemp = M("Customer")->where("cid='{$vv['olddata']}'")->find();
                            if ($oldtemp) {
                                $olddata = $oldtemp['name'];
                            }
                            $newtemp = M("Customer")->where("cid='{$vv['newdata']}'")->find();
                            if ($newtemp) {
                                $newdata = $newtemp['name'];
                            }
                            break;
                        case "pstime":
                        case "petime":
                        case "livetime":
                        case "addtime":
                        case "assignedtime":
                        case "finishtime":
                            $olddata and $olddata = date('Y/m/d H:i', $olddata);
                            $newdata = date('Y/m/d H:i', $newdata);
                            break;
                        case "state":
                            $orow = $mod->field("d_key")->where("d_code='bug_type' and d_value='{$olddata}'")->find();
                            if ($orow) {
                                $olddata = $orow["d_key"];
                            }
                            $nrow = $mod->field("d_key")->where("d_code='bug_type' and d_value='{$newdata}'")->find();
                            if ($orow) {
                                $newdata = $nrow["d_key"];
                            }
                            break;
                        case "partin" :
                            $m1['t.uid'] = ['in', "{$olddata}"];
                            $orow = M("takepart")->alias('t')->field('DISTINCT(t.uid),t.uname')->where($m1)->select();
                            if ($orow) {
                                $unames = array_column($orow, 'uname');
                                $olddata = implode(',', $unames);
                            }
                            $m2['t.uid'] = ['in', "{$newdata}"];
                            $nrow = M("takepart")->alias('t')->field('DISTINCT(t.uid),t.uname')->where($m2)->select();
                            if ($nrow) {
                                $unames = array_column($nrow, 'uname');
                                $newdata = implode(',', $unames);
                            }
                            break;
                        case "level";
                            $orow = $mod->field("d_key")->where("d_code='priority_type' and d_value='{$olddata}'")->find();
                            if ($orow) {
                                $olddata = $orow["d_key"];
                            }
                            $nrow = $mod->field("d_key")->where("d_code='priority_type' and d_value='{$newdata}'")->find();
                            if ($nrow) {
                                $newdata = $nrow["d_key"];
                            }
                            break;
                    }
                    $content .= "修改了 " . $fname . '，旧值为"' . $olddata . '"新值为"' . $newdata . '"。';
                }
            }
        }
        $message = $title . $content;
        return $message;
    }

    /**
     * 任务通知
     *
     * @param $logs
     * @param $task
     */
    public function taskNotice($logs, $task)
    {
        $uid = UID;  // 判断登录是经理还是执行人
        $url = 'Task/view/id/'.$task['tid'];
        // 项目经理操作 给执行人发
        
        // 执行人操作 给项目经理发
        if ($uid == $task['assigneduid']) {
            // 发给项目经理 时间点：操作记录  LGW
            $assigned = [
                'a' => $task['pname'],                      // 项目名称
                'b' => $task['title'],                      // 任务名称
                'email' => get_email($task['pmuid']),           // 执行人邮箱
            ];
            $cost = sendTemplate($assigned, 'task_manager',$url);
            $cost['data'] .= $logs;
            apiRead(Api::S_SEND, Api::DXY_S, $cost);  // 发给项目经理 : LGW
        }else{
        	//if ($uid == $task['pmuid']) 
            // 发给执行人 时间点：操作记录  LGW
            $assigned = [
                'a' => $task['pname'],                      // 项目名称
                'b' => $task['title'],                      // 任务名称
                'email' => get_email($task['assigneduid']),     // 执行人邮箱
            ];
            $cost = sendTemplate($assigned, 'task_execute',$url);
            $cost['data'] .= $logs;
            apiRead(Api::S_SEND, Api::DXY_S, $cost);  // 发给执行人 : LGW
        }
    }
}

