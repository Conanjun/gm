<?php

namespace Studio\Controller;
use Think\Page;
use Common\Common\Super\Order;
/**
 * 任务管理-财务确认：fhc
 *
 */
class OrderTaskCwController extends AdminController
{
	private $model;
	
	//构造函数
	public function __construct()
	{
		parent::__construct();
		$this->model = D('OrderTask');    // 订单任务
	}
	//首页
	public function index(){

        $stuid = Order::get_stuid(UID);    // 工作室id
        $where = "1=1 and t.tasktype = 'STUDIO_TASK_CW' and o.stuid = {$stuid}";

        $filter= '';

        $order_sn = empty($_GET['order_sn'])?'':trim($_GET['order_sn']);//订单编号
        if($order_sn){
            $filter .= " and o.order_sn like '%{$order_sn}%'";
        }

        $tname = empty($_GET['tname'])?'':trim($_GET['tname']);//任务名称
        if($tname){
            $filter .= " and t.tname like '%{$tname}%'";
        }

        $finishname = empty($_GET['finishname'])?'':trim($_GET['finishname']);//完成人
        if($finishname){
            $filter .= " and m.nickname like '%{$finishname}%'";
        }

        if ($_GET['start_addtime']) {
            $af = gmstr2time($_GET['start_addtime']);
            $filter .= " and t.add_time>='" . $af . "'";
        }
        if ($_GET['end_addtime']) {
            $at = gmstr2time_end($_GET['end_addtime']);
            $filter .= " and t.add_time<'" . $at . "'";
        }
        if ($_GET['start_finishtime']) {
            $of = gmstr2time($_GET['start_finishtime']);
            $filter .= " and t.finishtime>='" . $of . "'";
        }
        if ($_GET['end_finishtime']) {
            $ot = gmstr2time_end($_GET['end_finishtime']);
            $filter .= " and t.finishtime<'" . $ot . "'";
        }

        $state = empty($_GET['state'])?'':intval($_GET['state']);//任务状态
        $state == 1 and  $filter .= " and t.state = 1";
        $state == 2 and  $filter .= " and t.state = 0";

        $isurgent = empty($_GET['isurgent'])?'':trim($_GET['isurgent']);//是否加急
        $isurgent == 1 and  $filter .= " and t.isurgent = 1";
        $isurgent == 2 and  $filter .= " and t.isurgent = 0";

        $where .= $filter;
        $count = $this->model->alias('t')->join("ot_order o on t.oid = o.order_id")->join("ot_member m on m.uid = t.finishuid","left")->where($where)->count();
        $page = new \Think\Page($count, 10);
        $lists = $this->model
            ->alias('t')
            ->field('t.*,t.state as task_state,t.addtime as task_addtime,t.finishtime as task_finishtime,t.finishuid as task_finishuid,t.isurgent as task_isurgent,o.*,m.nickname as task_finishman')
            ->join("ot_order o on t.oid = o.order_id")
            ->join("ot_member m on m.uid = t.finishuid","left")
            ->where($where)
            ->limit($page->firstRow . ',' . $page->listRows)
            ->select();
        foreach ($lists as $key=>$list){
            $lists[$key]['str_state'] = L(Order::$orderState[$list['state']]);
        }
        $page->setConfig('theme','%FIRST% %UP_PAGE% %LINK_PAGE% %DOWN_PAGE% %END% %HEADER%');
        $this->assign('lists', $lists);
        $states = array(
            2=>L('NOFINISH'),
            1=>L('FINISH'));
        $this->assign('states',$states);
        $urgents = array(
            2=>L('NO'),
            1=>L('YES'));
        $this->assign('urgents',$urgents);
        $this->assign('_page', $page->show());
        $this->assign('filtered', $filter ? 1 : 0); //是否有查询条件
        $this->display();
	}

	//财务明细
	public function feepay(){
        $tid = empty($_GET['tid'])?0:$_GET['tid'];
        if(empty($tid)){
            $this->error(L('TASK_ERROR_EMPTY'));
        }
        $task = M("OrderTask")->where('tastkid='.$tid)->find();
        if(empty($task)){
            $this->error(L('TASK_ERROR_EMPTY'));
        }
        $oid = $task['oid'];
        if(Order::checkorder($oid)==0){
            $this->error(L('S_TASK_ERROR_1'));
        }
        $order = M("order")->where("order_id=".$oid)->find();
        if($order['state']!=Order::CONFIRMED){
            $this->error(L('S_TASK_CW_ERROR_2'));
        }
        $pays = M("order_pay")->where("oid=".$oid)->select();
        $this->assign("pays",$pays);
        $m = M("order_pay")->where("oid=".$oid)->sum('money');
        $m1 = M("order_pay")->where("oid=".$oid)->sum('money1');
        $this->assign("money",$m);
        $this->assign("money1",$m1);
        $user_state = Order::checkdent($oid);
        $this->assign("user_state",$user_state);
        $this->assign("tid",$tid);
        $this->display();
    }

    //财务确认
	public function confirm(){
        if(IS_POST){//确认处理
            $tid = empty($_POST['tid'])?0:$_POST['tid'];
            $note = empty($_POST['finishnote'])?'':trim($_POST['finishnote']);
            if(empty($tid)){
                $this->error ( L('TASK_ERROR_EMPTY'));
            }
            $task = M("OrderTask")->where('tastkid='.$tid)->find();
            if(empty($task)){
                $this->error ( L('TASK_ERROR_EMPTY'));
            }
            $oid = $task['oid'];
            if(Order::checkorder($oid)==0){
                $this->error ( L('S_TASK_ERROR_1'));
            }
            $order = M("order")->where("order_id=".$oid)->find();
            if($order['state']!=Order::CONFIRMED){
                $this->error ( L('S_TASK_CW_ERROR_2'));
            }
            $item = empty($_POST['item'])?'':$_POST['item'];

            $pay_type = Order::get_dent_paytype($oid);
            //测试
            $item = Array
            (
                '137' => Array
                (
                    'money' => 180.00,
                    'money1' => 80.00
                ),

                '142' => Array
                (
                    'money' => 280.00,
                    'money1' => 30.00
                ),

                '143' => Array
                (
                    'money' => 500.00,
                    'money1' => 80.00
                ),
                '1' => Array
                (
                    'money' => 400.00,
                    'money1' => 80.00
                )
            );
            $old = array();
            $new = array();
            $pays = M("order_pay")->where("oid=".$oid)->select();
            $old_m = 0;
            $old_m1 = 0;
            foreach ($pays as $k=>$v){
                $old[] = $v['opid'];
                $old_m +=$v['money'];
                $old_m1 +=$v['money1'];
            }
            foreach ($item as $key=>$v){
                $new[] = (string)$key;
            }
            $add_data = array_diff($new,$old);
            $Model = M(); // 实例化一个空对象
            $Model->startTrans(); // 开启事务
            if(empty($item)){//直接处理
                //给客户发消息
                $title = sprintf(L('S_TASK_TASK_PROMPT_1'),$order['order_sn']);
                $content = sprintf(L('S_TASK_TASK_PROMPT_5'),$order['stuname'],$order['order_sn'],L('COST_CONFIRMED'));
                $msg_id = Order::action_msg_log(array('fromid' => '', 'toid' =>$order['uid'], 'addtime' => '','title' => $title,'content' => $content, 'outtype' => 'client_order' ,'outkey'=>$oid));
                if($order['hasmaking']==1){//需要生成打印任务
                    $tname =sprintf(L('S_TASK_TASK_PROMPT_4'),$order['order_sn']);
                    $newtid = Order::add_task(array('oid' => $oid, 'tname' =>$tname, 'tasktype' => 'STUDIO_TASK_SD', 'uid' => '' ,'note'=>$tname,'isurgent'=>$order['isurgent']));
                }
                //写入订单操作记录
                $log_id = Order::action_order_log(array('oid' => $oid, 'uid' =>'', 'addtime' => '', 'state' => Order::COST_CONFIRMED ,'note'=>$content));
                //更改订单状态
                $result = M('Order')->where("order_id=".$oid)->save(array('state'=>Order::COST_CONFIRMED));
                //更新任务状态
                $result1 = M('OrderTask')->where("tastkid=".$tid)->save(array('state'=>1,'finishuid'=>UID,'finishtime'=>NOW_TIME,'finishnote'=>$note));
                if($order['hasmaking']==1){
                    if($msg_id&&$newtid&&$log_id&&$result&&$result1){
                        $Model->commit(); // 成功则提交事务
                        $redrect=U('OrderTaskCw/index');
                        $this->success(L('S_TASK_CW_SUC'), $redrect);
                    } else {
                        $Model->rollback(); // 否则将事务回滚
                        $this->error ( L('S_TASK_CW_ERROR'));
                    }
                }else{
                    if($msg_id&&$log_id&&$result){
                        $Model->commit(); // 成功则提交事务
                        $redrect=U('OrderTaskCw/index');
                        $this->success(L('S_TASK_CW_SUC'), $redrect);
                    } else {
                        $Model->rollback(); // 否则将事务回滚
                        $this->error ( L('S_TASK_CW_ERROR'));
                    }
                }
            }else{
                if(Order::checkdent($oid)==1){//现付用户
                    $m = M("order_pay")->where("oid=".$oid)->sum('money');
                    $m1 = M("order_pay")->where("oid=".$oid)->sum('money1');
                    $new_m = 0;
                    $new_m1 = 0;
                    foreach ($item as $key=>$v){
                        $new_m += $v['money'];
                        $new_m1 += $v['money1'];
                    }
                    if(($new_m<0 && abs($new_m)>$m) || ($new_m1<0 && abs($new_m1)>$m1)){
                        //退款超出已支付
                        $this->error ( L('S_TASK_CW_ERROR_4'));
                    }

                    foreach ($item as $k=>$v){
                        $order_pay = array(
                            'oid'=>$order['order_id'],
                            'feename' => L('S_TASK_CW_FEE_ADD'),
                            'money' => $v['money'],
                            'money1' => $v['money1'],
                            'addtime' =>NOW_TIME,
                            'adduid' =>UID,
                            'paytype' =>$pay_type,
                        );
                        $opid = M('OrderPay')->add($order_pay);
                        if(empty($opid)){
                            $this->error(L('S_TASK_CW_ERROR_5'));
                        }
                    }
                    $pays = M("OrderPay")->where("oid=".$oid)->select();
                    $m =0;
                    $m1=0;
                    foreach ($pays as $p){
                        $m +=$p['money'];
                        $m1 +=$p['money1'];
                    }
                    $data = array();
                    $data['amount'] = $m;
                    $data['amount1'] = $m1;
                    $result1 = M("Order")->where("order_id=".$oid)->save($data);
                    if($new_m<0 && $new_m1<0){//退款需要走退款流程
                        //给客户发退款消息
                        $title = sprintf(L('S_TASK_TASK_PROMPT_2'),$order['order_sn']);
                        $content =sprintf(L('S_TASK_TASK_PROMPT_6'),$order['stuname'],$order['order_sn'],$old_m,$m,$old_m1,$m1);
                    }else{
                        //给客户发费用增加消息
                        $title = sprintf(L('S_TASK_TASK_PROMPT_2'),$order['order_sn']);
                        $content =sprintf(L('S_TASK_TASK_PROMPT_7'),$order['stuname'],$order['order_sn'],$old_m,$m,$old_m1,$m1);
                    }
                    $msg_id = Order::action_msg_log(array('fromid' => '', 'toid' =>$order['uid'], 'addtime' => '','title' => $title,'content' => $content, 'outtype' => 'client_order' ,'outkey'=>$oid));
                    if($msg_id&&$result1){
                        $Model->commit(); // 成功则提交事务
                        $redrect=U('OrderTaskCw/index');
                        $this->success(L('S_TASK_CW_SUC'), $redrect);
                    } else {
                        $Model->rollback(); // 否则将事务回滚
                        $this->error ( L('S_TASK_CW_ERROR'));
                    }
                }else{//月付用户
                    //修改
                    foreach ($old as $k=>$v){
                        if($item[$v]['money']<1 || $item[$v]['money1']<1){
                            $this->error(L('S_TASK_CW_ERROR_6'));
                        }
                        $order_pay = array(
                            'opid'=>$v,
                            'oid'=>$order['order_id'],
                            'feename' => L('S_TASK_CW_FEE_ADD'),
                            'money' => $v['money'],
                            'money1' => $v['money1'],
                            'addtime' =>NOW_TIME,
                            'adduid' =>UID,
                            'paytype' =>$pay_type,
                        );
                        $opid = M('OrderPay')->save($order_pay);
                        if(empty($opid)){
                            $this->error(L('S_TASK_CW_ERROR_5'));
                        }
                    }
                    //新增
                    foreach ($add_data as $k=>$v){
                        if($item[$v]['money']<1 || $item[$v]['money1']<1){
                            $this->error(L('S_TASK_CW_ERROR_6'));
                        }
                        $order_pay = array(
                            'oid'=>$order['order_id'],
                            'feename' => L('S_TASK_CW_FEE_ADD'),
                            'money' => $v['money'],
                            'money1' => $v['money1'],
                            'addtime' =>NOW_TIME,
                            'adduid' =>UID,
                            'paytype' =>$pay_type,
                        );
                        $opid = M('OrderPay')->add($order_pay);
                        if(empty($opid)){
                            $this->error(L('S_TASK_CW_ERROR_5'));
                        }
                    }
                    $pays = M("OrderPay")->where("oid=".$oid)->select();
                    $m =0;
                    $m1=0;
                    foreach ($pays as $p){
                        $m +=$p['money'];
                        $m1 +=$p['money1'];
                    }
                    $data = array();
                    $data['amount'] = $m;
                    $data['amount1'] = $m1;
                    $data['state'] =Order::COST_CONFIRMED;
                    $result = M("Order")->where("order_id=".$oid)->save($data);
                    if($m！=$old_m && $m1！=$old_m1){
                        //给客户发费用变更状态变更消息
                        $title = sprintf(L('S_TASK_TASK_PROMPT_3'),$order['order_sn']);
                        $content =sprintf(L('S_TASK_TASK_PROMPT_8'),$order['stuname'],$order['order_sn'],$old_m,$m,$old_m1,$m1,L('COST_CONFIRMED'));
                    }else{
                        $title = sprintf(L('S_TASK_TASK_PROMPT_1'),$order['order_sn']);
                        $content = sprintf(L('S_TASK_TASK_PROMPT_5'),$order['stuname'],$order['order_sn'],L('COST_CONFIRMED'));
                    }
                    $msg_id = Order::action_msg_log(array('fromid' => '', 'toid' =>$order['uid'], 'addtime' => '','title' => $title,'content' => $content, 'outtype' => 'client_order' ,'outkey'=>$oid));
                    if($order['hasmaking']==1){//需要生成打印任务
                        $tname =sprintf(L('S_TASK_TASK_PROMPT_4'),$order['order_sn']);
                        $newtid = Order::add_task(array('oid' => $oid, 'tname' =>$tname, 'tasktype' => 'STUDIO_TASK_SD', 'uid' => '' ,'note'=>$tname,'isurgent'=>$order['isurgent']));
                    }
                    //写入订单操作记录
                    $log_id = Order::action_order_log(array('oid' => $oid, 'uid' =>'', 'addtime' => '', 'state' => Order::COST_CONFIRMED ,'note'=>''));

                    //更新任务状态
                    $result1 = M('OrderTask')->where("tastkid=".$tid)->save(array('state'=>1,'finishuid'=>UID,'finishtime'=>NOW_TIME));
                    if($order['hasmaking']==1){
                        if($msg_id&&$newtid&&$log_id&&$result&&$result1){
                            $Model->commit(); // 成功则提交事务
                            $redrect=U('OrderTaskCw/index');
                            $this->success(L('S_TASK_CW_SUC'), $redrect);
                        } else {
                            $Model->rollback(); // 否则将事务回滚
                            $this->error ( L('S_TASK_CW_ERROR'));
                        }
                    }else{
                        if($msg_id&&$log_id&&$result){
                            $Model->commit(); // 成功则提交事务
                            $redrect=U('OrderTaskCw/index');
                            $this->success(L('S_TASK_CW_SUC'), $redrect);
                        } else {
                            $Model->rollback(); // 否则将事务回滚
                            $this->error ( L('S_TASK_CW_ERROR'));
                        }
                    }
                }
            }
        }
    }

    //删除费用明细
    public function delpay(){
        //删除pay记录并且重新计算费用并更新入订单主表
        $pid = empty($_POST['pid'])?0:$_POST['pid'];
        $pay = M("OrderPay")->where("opid=".$pid.' and state=0')->find();
        if(empty($pay)){
            $this->error ( L('S_TASK_CW_ERROR_3'));
        }
        $Model = M(); // 实例化一个空对象
        $Model->startTrans(); // 开启事务
        $result = M("OrderPay")->where("opid=".$pid)->delete();
        $pays = M("OrderPay")->where("oid=".$pay['oid'].' and state=0')->select();
        $m =0;
        $m1=0;
        foreach ($pays as $p){
            $m +=$p['money'];
            $m1 +=$p['money1'];
        }
        $data = array();
        $data['amount'] = $m;
        $data['amount1'] = $m1;
        $result1 = M("Order")->where("order_id=".$pay['oid'])->save($data);
        if (!empty($result) && !empty($result1)) {
            $Model->commit(); // 成功则提交事务
            $redrect=U('OrderTaskCw/index');
            $this->success(L('DELETE_SUC'),$redrect);
        } else {
            $Model->rollback(); // 否则将事务回滚
            $this->error ( L('DELETE_ERROR'));
        }
    }
}
